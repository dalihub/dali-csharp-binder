/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <string_view>
#include <stdio.h>

/* Support for throwing C# exceptions from C/C++. There are two types:
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_NDalic(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback,
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback,
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback,
                                                SWIG_CSharpExceptionCallback_t overflowCallback,
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_NDalic(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;

// keep argWidgetCs and argWidgetV so they're always available to DALi
int argWidgetC = 1;
char **argWidgetV = NULL;

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_NDalic(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError         -1
#define  SWIG_IOError              -2
#define  SWIG_RuntimeError         -3
#define  SWIG_IndexError           -4
#define  SWIG_TypeError            -5
#define  SWIG_DivisionByZero       -6
#define  SWIG_OverflowError        -7
#define  SWIG_SyntaxError          -8
#define  SWIG_ValueError           -9
#define  SWIG_SystemError          -10
#define  SWIG_AttributeError       -11
#define  SWIG_MemoryError          -12
#define  SWIG_NullReferenceError   -13


/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#define SWIGSTDCALL

#include <time.h>

#include <dali/dali.h>
#include <dali-toolkit/dali-toolkit.h>

#include <dali/devel-api/actors/actor-devel.h>
#include <dali/devel-api/animation/key-frames-devel.h>
#include <dali/devel-api/common/stage-devel.h>
#include <dali/devel-api/events/key-event-devel.h>
#include <dali/devel-api/events/wheel-event-devel.h>
#include <dali/devel-api/events/hover-event-devel.h>
#include <dali/devel-api/events/touch-point.h>
#include <dali/devel-api/events/pan-gesture-devel.h>
#include <dali/devel-api/events/pinch-gesture-devel.h>
#include <dali/devel-api/events/long-press-gesture-devel.h>
#include <dali/devel-api/events/tap-gesture-devel.h>

#include <dali/public-api/math/matrix.h>
#include <dali/public-api/math/matrix3.h>
#include <dali/public-api/math/viewport.h>
#include <dali/public-api/object/property-key.h>
#include <dali/devel-api/object/csharp-type-info.h>
#include <dali/devel-api/object/csharp-type-registry.h>

#include <dali/public-api/adaptor-framework/timer.h>
#include <dali/public-api/adaptor-framework/style-change.h>
#include <dali/devel-api/adaptor-framework/environment-variable.h>

#include <dali-toolkit/devel-api/accessibility-manager/accessibility-manager.h>

#include <dali-toolkit/devel-api/builder/builder.h>

#include <dali-toolkit/devel-api/focus-manager/keyinput-focus-manager.h>
#include <dali-toolkit/devel-api/focus-manager/keyboard-focus-manager-devel.h>

#include <dali-toolkit/devel-api/controls/control-devel.h>
#include <dali-toolkit/devel-api/controls/popup/popup.h>
#include <dali-toolkit/devel-api/controls/gaussian-blur-view/gaussian-blur-view.h>
#include <dali-toolkit/devel-api/controls/page-turn-view/page-factory.h>
#include <dali-toolkit/devel-api/controls/page-turn-view/page-turn-view.h>
#include <dali-toolkit/devel-api/controls/page-turn-view/page-turn-landscape-view.h>
#include <dali-toolkit/devel-api/controls/page-turn-view/page-turn-portrait-view.h>
#include <dali-toolkit/devel-api/controls/buttons/toggle-button.h>
#include <dali-toolkit/devel-api/controls/alignment/alignment.h>
#include <dali-toolkit/devel-api/controls/scroll-bar/scroll-bar.h>
#include <dali-toolkit/devel-api/controls/table-view/table-view.h>

#include <dali-toolkit/devel-api/visual-factory/visual-base.h>
#include <dali-toolkit/devel-api/visual-factory/visual-factory.h>
#include <dali-toolkit/devel-api/visual-factory/transition-data.h>

#include <dali-toolkit/public-api/visuals/visual-properties.h>
#include <dali-toolkit/public-api/visuals/text-visual-properties.h>
#include <dali-toolkit/public-api/visuals/image-visual-properties.h>

#include <dali-toolkit/devel-api/controls/tooltip/tooltip-properties.h>
#include <dali-toolkit/devel-api/visuals/image-visual-properties-devel.h>
#include <dali-toolkit/devel-api/controls/control-depth-index-ranges.h>

#include <dali-toolkit/public-api/controls/scrollable/item-view/item-view-declarations.h>

#include <dali/devel-api/adaptor-framework/pixel-buffer.h>
#include <dali/devel-api/adaptor-framework/image-loading.h>

#include <dali/public-api/events/mouse-button.h>

#include <dali/integration-api/debug.h>

#include <dali-toolkit/devel-api/controls/video-view/video-view-devel.h>

#include <dali/devel-api/adaptor-framework/native-image-source-devel.h>

#include <dali-toolkit/devel-api/text/rendering-backend.h>


#include <dali/devel-api/update/frame-callback-interface.h>
#include <dali/devel-api/update/update-proxy.h>

#include <dali-toolkit/public-api/image-loader/image.h>
#include <dali-toolkit/public-api/image-loader/image-url.h>


// add here SWIG version check

#if defined(_MSC_VER)         // Microsoft Visual C++ 6.0
// disable Swig-dependent warnings

// 'identifier1' has C-linkage specified,
// but returns UDT 'identifier2' which is incompatible with C
#pragma warning(disable: 4190)

// 'int' : forcing value to bool 'true' or 'false' (performance warning)
#pragma warning(disable: 4800)

// debug info too long etc etc
#pragma warning(disable: 4786)
#endif


#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>


typedef float floatp;

SWIGINTERN floatp *new_floatp(){
  return new float();
}
SWIGINTERN void delete_floatp(floatp *self){
  if (self) delete self;
}
SWIGINTERN void floatp_assign(floatp *self,float value){
  *self = value;
}
SWIGINTERN float floatp_value(floatp *self){
  return *self;
}
SWIGINTERN float *floatp_cast(floatp *self){
  return self;
}
SWIGINTERN floatp *floatp_frompointer(float *t){
  return (floatp *) t;
}

typedef int intp;

SWIGINTERN intp *new_intp(){
  return new int();
}
SWIGINTERN void delete_intp(intp *self){
  if (self) delete self;
}
SWIGINTERN void intp_assign(intp *self,int value){
  *self = value;
}
SWIGINTERN int intp_value(intp *self){
  return *self;
}
SWIGINTERN int *intp_cast(intp *self){
  return self;
}
SWIGINTERN intp *intp_frompointer(int *t){
  return (intp *) t;
}

typedef double doublep;

SWIGINTERN doublep *new_doublep(){
  return new double();
}
SWIGINTERN void delete_doublep(doublep *self){
  if (self) delete self;
}
SWIGINTERN void doublep_assign(doublep *self,double value){
  *self = value;
}
SWIGINTERN double doublep_value(doublep *self){
  return *self;
}
SWIGINTERN double *doublep_cast(doublep *self){
  return self;
}
SWIGINTERN doublep *doublep_frompointer(double *t){
  return (doublep *) t;
}

typedef unsigned int uintp;

SWIGINTERN uintp *new_uintp(){
  return new unsigned int();
}
SWIGINTERN void delete_uintp(uintp *self){
  if (self) delete self;
}
SWIGINTERN void uintp_assign(uintp *self,unsigned int value){
  *self = value;
}
SWIGINTERN unsigned int uintp_value(uintp *self){
  return *self;
}
SWIGINTERN unsigned int *uintp_cast(uintp *self){
  return self;
}
SWIGINTERN uintp *uintp_frompointer(unsigned int *t){
  return (uintp *) t;
}

typedef unsigned short ushortp;

SWIGINTERN ushortp *new_ushortp(){
  return new unsigned short();
}
SWIGINTERN void delete_ushortp(ushortp *self){
  if (self) delete self;
}
SWIGINTERN void ushortp_assign(ushortp *self,unsigned short value){
  *self = value;
}
SWIGINTERN unsigned short ushortp_value(ushortp *self){
  return *self;
}
SWIGINTERN unsigned short *ushortp_cast(ushortp *self){
  return self;
}
SWIGINTERN ushortp *ushortp_frompointer(unsigned short *t){
  return (ushortp *) t;
}

unsigned int int_to_uint(int x) {
   return (unsigned int) x;
}


#define CALL_CATCH_EXCEPTION(ret)          \
	 catch (std::out_of_range& e)            \
         {                                                                                                                                  \
             SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what()));   \
             return ret;\
          }                                                                                                                                 \
          catch (std::exception& e)                                                                                         \
          {                                                                                                                                 \
            SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what()));\
            return ret;\
          }                                                                                                                                 \
          catch (DaliException e)                                                                                            \
          {                                                                                                                                 \
            SWIG_CSharpException(SWIG_UnknownError, e.condition);                            \
            return ret;\
          }                                                                                                                                 \
          catch (...)                                                                                                                  \
          {                                                                                                                                 \
            SWIG_CSharpException(SWIG_UnknownError, "unknown error");                  \
            return ret;\
          }



using namespace Dali;
using namespace Dali::Toolkit;

SWIGINTERN bool Dali_BaseHandle_HasBody(Dali::BaseHandle const *self)
{
  bool result = false;
  try
  {
    // C++ code. DALi uses Handle <-> Body design pattern.
    // This function checks the Handle to see if it has a body attached ( possible to have empty handles).
    // Handles in DALi can be converted into a boolean type
    // to check if the handle has a valid body attached to it.
    // Internally checking *self will  checks IntrusivePtr<Dali::RefObject> mObjectHandle in BaseHandle;
    if( *self )
    {
      result = true;
    }
    else
    {
      result = false;
    }
  }
  CALL_CATCH_EXCEPTION(false);
  return result;
}

SWIGINTERN bool Dali_BaseHandle_IsEqual(Dali::BaseHandle const *self,Dali::BaseHandle const &rhs)
{
  bool result = false;
  try
  {
    // C++ code. Check if two handles reference the same implemtion
    if( *self == rhs)
    {
      result = true;
    }
    else
    {
      result = false;
    }
  }
  CALL_CATCH_EXCEPTION(false);
  return result;
}


SWIGINTERN void Dali_TypeRegistration_RegisterControl(std::string const &controlName,Dali::CSharpTypeInfo::CreateFunction createFunc){
     Dali::CSharpTypeRegistry::RegisterType( controlName, typeid( Dali::Toolkit::Control), createFunc );
   }
SWIGINTERN void Dali_TypeRegistration_RegisterProperty(std::string const &controlName,std::string const &propertyName,int index,Dali::Property::Type type,Dali::CSharpTypeInfo::SetPropertyFunction setFunc,Dali::CSharpTypeInfo::GetPropertyFunction getFunc){
     Dali::CSharpTypeRegistry::RegisterProperty( controlName, propertyName, index, type, setFunc, getFunc );
   }
SWIGINTERN std::vector< Dali::TouchPoint > *new_std_vector_Sl_Dali_TouchPoint_Sg___SWIG_2(int capacity){
        std::vector< Dali::TouchPoint >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Dali::TouchPoint >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Dali::TouchPoint std_vector_Sl_Dali_TouchPoint_Sg__getitemcopy(std::vector< Dali::TouchPoint > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN Dali::TouchPoint const &std_vector_Sl_Dali_TouchPoint_Sg__getitem(std::vector< Dali::TouchPoint > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Dali_TouchPoint_Sg__setitem(std::vector< Dali::TouchPoint > *self,int index,Dali::TouchPoint const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Dali_TouchPoint_Sg__AddRange(std::vector< Dali::TouchPoint > *self,std::vector< Dali::TouchPoint > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Dali::TouchPoint > *std_vector_Sl_Dali_TouchPoint_Sg__GetRange(std::vector< Dali::TouchPoint > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Dali::TouchPoint >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Dali_TouchPoint_Sg__Insert(std::vector< Dali::TouchPoint > *self,int index,Dali::TouchPoint const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Dali_TouchPoint_Sg__InsertRange(std::vector< Dali::TouchPoint > *self,int index,std::vector< Dali::TouchPoint > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Dali_TouchPoint_Sg__RemoveAt(std::vector< Dali::TouchPoint > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Dali_TouchPoint_Sg__RemoveRange(std::vector< Dali::TouchPoint > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Dali::TouchPoint > *std_vector_Sl_Dali_TouchPoint_Sg__Repeat(Dali::TouchPoint const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Dali::TouchPoint >(count, value);
      }
SWIGINTERN void std_vector_Sl_Dali_TouchPoint_Sg__Reverse__SWIG_0(std::vector< Dali::TouchPoint > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Dali_TouchPoint_Sg__Reverse__SWIG_1(std::vector< Dali::TouchPoint > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Dali_TouchPoint_Sg__SetRange(std::vector< Dali::TouchPoint > *self,int index,std::vector< Dali::TouchPoint > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_float_SP__Sg__Empty(Dali::Signal< void (float) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_float_SP__Sg__GetConnectionCount(Dali::Signal< void (float) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_float_SP__Sg__Connect(Dali::Signal< void (float) > *self,void (*func)(float)){
          self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_float_SP__Sg__Disconnect(Dali::Signal< void (float) > *self,void (*func)(float)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_float_SP__Sg__Emit(Dali::Signal< void (float) > *self,float arg){
          /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_BaseHandle_SP__Sg__Empty(Dali::Signal< void (Dali::BaseHandle) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_BaseHandle_SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::BaseHandle) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_BaseHandle_SP__Sg__Connect(Dali::Signal< void (Dali::BaseHandle) > *self,void (*func)(Dali::BaseHandle)){
          self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_BaseHandle_SP__Sg__Disconnect(Dali::Signal< void (Dali::BaseHandle) > *self,void (*func)(Dali::BaseHandle)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_BaseHandle_SP__Sg__Emit(Dali::Signal< void (Dali::BaseHandle) > *self,Dali::BaseHandle arg){
          /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_RefObject_SS_const_Sm__SP__Sg__Empty(Dali::Signal< void (Dali::RefObject const *) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_RefObject_SS_const_Sm__SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::RefObject const *) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_RefObject_SS_const_Sm__SP__Sg__Connect(Dali::Signal< void (Dali::RefObject const *) > *self,void (*func)(Dali::RefObject const *)){
          self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_RefObject_SS_const_Sm__SP__Sg__Disconnect(Dali::Signal< void (Dali::RefObject const *) > *self,void (*func)(Dali::RefObject const *)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_RefObject_SS_const_Sm__SP__Sg__Emit(Dali::Signal< void (Dali::RefObject const *) > *self,Dali::RefObject const *arg){
          /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_PropertyNotification_SA__SP__Sg__Empty(Dali::Signal< void (Dali::PropertyNotification &) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_PropertyNotification_SA__SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::PropertyNotification &) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_PropertyNotification_SA__SP__Sg__Connect(Dali::Signal< void (Dali::PropertyNotification &) > *self,void (*func)(Dali::PropertyNotification &)){
          self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_PropertyNotification_SA__SP__Sg__Disconnect(Dali::Signal< void (Dali::PropertyNotification &) > *self,void (*func)(Dali::PropertyNotification &)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_PropertyNotification_SA__SP__Sg__Emit(Dali::Signal< void (Dali::PropertyNotification &) > *self,Dali::PropertyNotification &arg){
          /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_LongPressGesture_SS_const_SA__SP__Sg__Empty(Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_LongPressGesture_SS_const_SA__SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_LongPressGesture_SS_const_SA__SP__Sg__Connect(Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *self,void (*func)(Dali::Actor,Dali::LongPressGesture const &)){
        self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_LongPressGesture_SS_const_SA__SP__Sg__Disconnect(Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *self,void (*func)(Dali::Actor,Dali::LongPressGesture const &)){
        self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_LongPressGesture_SS_const_SA__SP__Sg__Emit(Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *self,Dali::Actor arg1,Dali::LongPressGesture const &arg2){
        /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg1, arg2 );
      }
SWIGINTERN bool Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_TouchEvent_SS_const_SA__SP__Sg__Empty(Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_TouchEvent_SS_const_SA__SP__Sg__GetConnectionCount(Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_TouchEvent_SS_const_SA__SP__Sg__Connect(Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *self,bool (*func)(Dali::Actor,Dali::TouchEvent const &)){
        self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_TouchEvent_SS_const_SA__SP__Sg__Disconnect(Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *self,bool (*func)(Dali::Actor,Dali::TouchEvent const &)){
        self->Disconnect( func );
      }
SWIGINTERN bool Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_TouchEvent_SS_const_SA__SP__Sg__Emit(Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *self,Dali::Actor arg1,Dali::TouchEvent const &arg2){
        return self->Emit( arg1, arg2 );
      }
SWIGINTERN bool Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_HoverEvent_SS_const_SA__SP__Sg__Empty(Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_HoverEvent_SS_const_SA__SP__Sg__GetConnectionCount(Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_HoverEvent_SS_const_SA__SP__Sg__Connect(Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *self,bool (*func)(Dali::Actor,Dali::HoverEvent const &)){
        self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_HoverEvent_SS_const_SA__SP__Sg__Disconnect(Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *self,bool (*func)(Dali::Actor,Dali::HoverEvent const &)){
        self->Disconnect( func );
      }
SWIGINTERN bool Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_HoverEvent_SS_const_SA__SP__Sg__Emit(Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *self,Dali::Actor arg1,Dali::HoverEvent const &arg2){
        return self->Emit( arg1, arg2 );
      }
SWIGINTERN bool Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_WheelEvent_SS_const_SA__SP__Sg__Empty(Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_WheelEvent_SS_const_SA__SP__Sg__GetConnectionCount(Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_WheelEvent_SS_const_SA__SP__Sg__Connect(Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *self,bool (*func)(Dali::Actor,Dali::WheelEvent const &)){
        self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_WheelEvent_SS_const_SA__SP__Sg__Disconnect(Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *self,bool (*func)(Dali::Actor,Dali::WheelEvent const &)){
        self->Disconnect( func );
      }
SWIGINTERN bool Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_WheelEvent_SS_const_SA__SP__Sg__Emit(Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *self,Dali::Actor arg1,Dali::WheelEvent const &arg2){
        return self->Emit( arg1, arg2 );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Actor_SP__Sg__Empty(Dali::Signal< void (Dali::Actor) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Actor_SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Actor) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_SP__Sg__Connect(Dali::Signal< void (Dali::Actor) > *self,void (*func)(Dali::Actor)){
          self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_SP__Sg__Disconnect(Dali::Signal< void (Dali::Actor) > *self,void (*func)(Dali::Actor)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_SP__Sg__Emit(Dali::Signal< void (Dali::Actor) > *self,Dali::Actor arg){
          /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_KeyEvent_SS_const_SA__SP__Sg__Empty(Dali::Signal< void (Dali::KeyEvent const &) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_KeyEvent_SS_const_SA__SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::KeyEvent const &) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_KeyEvent_SS_const_SA__SP__Sg__Connect(Dali::Signal< void (Dali::KeyEvent const &) > *self,void (*func)(Dali::KeyEvent const &)){
          self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_KeyEvent_SS_const_SA__SP__Sg__Disconnect(Dali::Signal< void (Dali::KeyEvent const &) > *self,void (*func)(Dali::KeyEvent const &)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_KeyEvent_SS_const_SA__SP__Sg__Emit(Dali::Signal< void (Dali::KeyEvent const &) > *self,Dali::KeyEvent const &arg){
          /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_TouchEvent_SS_const_SA__SP__Sg__Empty(Dali::Signal< void (Dali::TouchEvent const &) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_TouchEvent_SS_const_SA__SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::TouchEvent const &) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_TouchEvent_SS_const_SA__SP__Sg__Connect(Dali::Signal< void (Dali::TouchEvent const &) > *self,void (*func)(Dali::TouchEvent const &)){
          self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_TouchEvent_SS_const_SA__SP__Sg__Disconnect(Dali::Signal< void (Dali::TouchEvent const &) > *self,void (*func)(Dali::TouchEvent const &)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_TouchEvent_SS_const_SA__SP__Sg__Emit(Dali::Signal< void (Dali::TouchEvent const &) > *self,Dali::TouchEvent const &arg){
          /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_WheelEvent_SS_const_SA__SP__Sg__Empty(Dali::Signal< void (Dali::WheelEvent const &) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_WheelEvent_SS_const_SA__SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::WheelEvent const &) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_WheelEvent_SS_const_SA__SP__Sg__Connect(Dali::Signal< void (Dali::WheelEvent const &) > *self,void (*func)(Dali::WheelEvent const &)){
          self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_WheelEvent_SS_const_SA__SP__Sg__Disconnect(Dali::Signal< void (Dali::WheelEvent const &) > *self,void (*func)(Dali::WheelEvent const &)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_WheelEvent_SS_const_SA__SP__Sg__Emit(Dali::Signal< void (Dali::WheelEvent const &) > *self,Dali::WheelEvent const &arg){
          /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PanGesture_SS_const_SA__SP__Sg__Empty(Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PanGesture_SS_const_SA__SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PanGesture_SS_const_SA__SP__Sg__Connect(Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *self,void (*func)(Dali::Actor,Dali::PanGesture const &)){
        self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PanGesture_SS_const_SA__SP__Sg__Disconnect(Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *self,void (*func)(Dali::Actor,Dali::PanGesture const &)){
        self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PanGesture_SS_const_SA__SP__Sg__Emit(Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *self,Dali::Actor arg1,Dali::PanGesture const &arg2){
        /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg1, arg2 );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PinchGesture_SS_const_SA__SP__Sg__Empty(Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PinchGesture_SS_const_SA__SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PinchGesture_SS_const_SA__SP__Sg__Connect(Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *self,void (*func)(Dali::Actor,Dali::PinchGesture const &)){
        self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PinchGesture_SS_const_SA__SP__Sg__Disconnect(Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *self,void (*func)(Dali::Actor,Dali::PinchGesture const &)){
        self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PinchGesture_SS_const_SA__SP__Sg__Emit(Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *self,Dali::Actor arg1,Dali::PinchGesture const &arg2){
        /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg1, arg2 );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_TapGesture_SS_const_SA__SP__Sg__Empty(Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_TapGesture_SS_const_SA__SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_TapGesture_SS_const_SA__SP__Sg__Connect(Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *self,void (*func)(Dali::Actor,Dali::TapGesture const &)){
        self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_TapGesture_SS_const_SA__SP__Sg__Disconnect(Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *self,void (*func)(Dali::Actor,Dali::TapGesture const &)){
        self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_TapGesture_SS_const_SA__SP__Sg__Emit(Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *self,Dali::Actor arg1,Dali::TapGesture const &arg2){
        /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg1, arg2 );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_LayoutDirection_Type_SP__Sg__Empty(Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_LayoutDirection_Type_SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_LayoutDirection_Type_SP__Sg__Connect(Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *self,void (*func)(Dali::Actor, Dali::LayoutDirection::Type)){
          return self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_LayoutDirection_Type_SP__Sg__Disconnect(Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *self,void (*func)(Dali::Actor, Dali::LayoutDirection::Type)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_LayoutDirection_Type_SP__Sg__Emit(Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *self,Dali::Actor arg1, Dali::LayoutDirection::Type arg3){
          self->Emit( arg1, arg3 );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_VisibilityChange_Type_SP__Sg__Empty(Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_VisibilityChange_Type_SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_VisibilityChange_Type_SP__Sg__Connect(Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *self,void (*func)(Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type)){
          return self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_VisibilityChange_Type_SP__Sg__Disconnect(Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *self,void (*func)(Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_VisibilityChange_Type_SP__Sg__Emit(Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *self,Dali::Actor arg1,bool arg2,Dali::DevelActor::VisibilityChange::Type arg3){
          /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg1, arg2, arg3 );
      }

SWIGINTERN bool Dali_Signal_Sl_bool_Sp__SP__Sg__Empty(Dali::Signal< bool () > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_bool_Sp__SP__Sg__GetConnectionCount(Dali::Signal< bool () > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp__SP__Sg__Connect(Dali::Signal< bool () > *self,bool (*func)()){
          self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp__SP__Sg__Disconnect(Dali::Signal< bool () > *self,bool (*func)()){
          self->Disconnect( func );
      }
SWIGINTERN bool Dali_Signal_Sl_bool_Sp__SP__Sg__Emit(Dali::Signal< bool () > *self){
          return self->Emit();
      }

SWIGINTERN std::vector< unsigned int > *new_std_vector_Sl_unsigned_SS_int_Sg___SWIG_2(int capacity){
        std::vector< unsigned int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned int std_vector_Sl_unsigned_SS_int_Sg__getitemcopy(std::vector< unsigned int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN unsigned int const &std_vector_Sl_unsigned_SS_int_Sg__getitem(std::vector< unsigned int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__setitem(std::vector< unsigned int > *self,int index,unsigned int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__AddRange(std::vector< unsigned int > *self,std::vector< unsigned int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned int > *std_vector_Sl_unsigned_SS_int_Sg__GetRange(std::vector< unsigned int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__Insert(std::vector< unsigned int > *self,int index,unsigned int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__InsertRange(std::vector< unsigned int > *self,int index,std::vector< unsigned int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__RemoveAt(std::vector< unsigned int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__RemoveRange(std::vector< unsigned int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned int > *std_vector_Sl_unsigned_SS_int_Sg__Repeat(unsigned int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned int >(count, value);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__Reverse__SWIG_0(std::vector< unsigned int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__Reverse__SWIG_1(std::vector< unsigned int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__SetRange(std::vector< unsigned int > *self,int index,std::vector< unsigned int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_int_Sg__Contains(std::vector< unsigned int > *self,unsigned int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_unsigned_SS_int_Sg__IndexOf(std::vector< unsigned int > *self,unsigned int const &value){
        int index = -1;
        std::vector< unsigned int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_unsigned_SS_int_Sg__LastIndexOf(std::vector< unsigned int > *self,unsigned int const &value){
        int index = -1;
        std::vector< unsigned int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_int_Sg__Remove(std::vector< unsigned int > *self,unsigned int const &value){
        std::vector< unsigned int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::pair< unsigned int,Dali::Actor > > *new_std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::pair< unsigned int,Dali::Actor > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::pair< unsigned int,Dali::Actor > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::pair< unsigned int,Dali::Actor > std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__getitemcopy(std::vector< std::pair< unsigned int,Dali::Actor > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::pair< unsigned int,Dali::Actor > const &std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__getitem(std::vector< std::pair< unsigned int,Dali::Actor > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__setitem(std::vector< std::pair< unsigned int,Dali::Actor > > *self,int index,std::pair< unsigned int,Dali::Actor > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__AddRange(std::vector< std::pair< unsigned int,Dali::Actor > > *self,std::vector< std::pair< unsigned int,Dali::Actor > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::pair< unsigned int,Dali::Actor > > *std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__GetRange(std::vector< std::pair< unsigned int,Dali::Actor > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::pair< unsigned int,Dali::Actor > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__Insert(std::vector< std::pair< unsigned int,Dali::Actor > > *self,int index,std::pair< unsigned int,Dali::Actor > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__InsertRange(std::vector< std::pair< unsigned int,Dali::Actor > > *self,int index,std::vector< std::pair< unsigned int,Dali::Actor > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__RemoveAt(std::vector< std::pair< unsigned int,Dali::Actor > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__RemoveRange(std::vector< std::pair< unsigned int,Dali::Actor > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::pair< unsigned int,Dali::Actor > > *std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__Repeat(std::pair< unsigned int,Dali::Actor > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::pair< unsigned int,Dali::Actor > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__Reverse__SWIG_0(std::vector< std::pair< unsigned int,Dali::Actor > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__Reverse__SWIG_1(std::vector< std::pair< unsigned int,Dali::Actor > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__SetRange(std::vector< std::pair< unsigned int,Dali::Actor > > *self,int index,std::vector< std::pair< unsigned int,Dali::Actor > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< Dali::Actor > *new_std_vector_Sl_Dali_Actor_Sg___SWIG_2(int capacity){
        std::vector< Dali::Actor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Dali::Actor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Dali::Actor std_vector_Sl_Dali_Actor_Sg__getitemcopy(std::vector< Dali::Actor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN Dali::Actor const &std_vector_Sl_Dali_Actor_Sg__getitem(std::vector< Dali::Actor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Dali_Actor_Sg__setitem(std::vector< Dali::Actor > *self,int index,Dali::Actor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Dali_Actor_Sg__AddRange(std::vector< Dali::Actor > *self,std::vector< Dali::Actor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Dali::Actor > *std_vector_Sl_Dali_Actor_Sg__GetRange(std::vector< Dali::Actor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Dali::Actor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Dali_Actor_Sg__Insert(std::vector< Dali::Actor > *self,int index,Dali::Actor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Dali_Actor_Sg__InsertRange(std::vector< Dali::Actor > *self,int index,std::vector< Dali::Actor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Dali_Actor_Sg__RemoveAt(std::vector< Dali::Actor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Dali_Actor_Sg__RemoveRange(std::vector< Dali::Actor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Dali::Actor > *std_vector_Sl_Dali_Actor_Sg__Repeat(Dali::Actor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Dali::Actor >(count, value);
      }
SWIGINTERN void std_vector_Sl_Dali_Actor_Sg__Reverse__SWIG_0(std::vector< Dali::Actor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Dali_Actor_Sg__Reverse__SWIG_1(std::vector< Dali::Actor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Dali_Actor_Sg__SetRange(std::vector< Dali::Actor > *self,int index,std::vector< Dali::Actor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool Dali_Signal_Sl_bool_Sp_Dali_Toolkit_AccessibilityManager_SA__SP__Sg__Empty(Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_bool_Sp_Dali_Toolkit_AccessibilityManager_SA__SP__Sg__GetConnectionCount(Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp_Dali_Toolkit_AccessibilityManager_SA__SP__Sg__Connect(Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *self,bool (*func)(Dali::Toolkit::AccessibilityManager &)){
          self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp_Dali_Toolkit_AccessibilityManager_SA__SP__Sg__Disconnect(Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *self,bool (*func)(Dali::Toolkit::AccessibilityManager &)){
          self->Disconnect( func );
      }
SWIGINTERN bool Dali_Signal_Sl_bool_Sp_Dali_Toolkit_AccessibilityManager_SA__SP__Sg__Emit(Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *self,Dali::Toolkit::AccessibilityManager &arg){
          return self->Emit( arg );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Toolkit_AccessibilityManager_FocusOvershotDirection_SP__Sg__Empty(Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Toolkit_AccessibilityManager_FocusOvershotDirection_SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Toolkit_AccessibilityManager_FocusOvershotDirection_SP__Sg__Connect(Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *self,void (*func)(Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection)){
        self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Toolkit_AccessibilityManager_FocusOvershotDirection_SP__Sg__Disconnect(Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *self,void (*func)(Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection)){
        self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Toolkit_AccessibilityManager_FocusOvershotDirection_SP__Sg__Emit(Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *self,Dali::Actor arg1,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection arg2){
        /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg1, arg2 );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Actor_SP__Sg__Empty(Dali::Signal< void (Dali::Actor,Dali::Actor) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Actor_SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Actor,Dali::Actor) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Actor_SP__Sg__Connect(Dali::Signal< void (Dali::Actor,Dali::Actor) > *self,void (*func)(Dali::Actor,Dali::Actor)){
        self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Actor_SP__Sg__Disconnect(Dali::Signal< void (Dali::Actor,Dali::Actor) > *self,void (*func)(Dali::Actor,Dali::Actor)){
        self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Actor_SP__Sg__Emit(Dali::Signal< void (Dali::Actor,Dali::Actor) > *self,Dali::Actor arg1,Dali::Actor arg2){
        /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg1, arg2 );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_SP__Sg__Empty(Dali::Signal< void (Dali::Actor,bool) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Actor,bool) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_SP__Sg__Connect(Dali::Signal< void (Dali::Actor,bool) > *self,void (*func)(Dali::Actor,bool)){
        self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_SP__Sg__Disconnect(Dali::Signal< void (Dali::Actor,bool) > *self,void (*func)(Dali::Actor,bool)){
        self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_SP__Sg__Emit(Dali::Signal< void (Dali::Actor,bool) > *self,Dali::Actor arg1,bool arg2){
        /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg1, arg2 );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Toolkit_StyleManager_Sc_Dali_StyleChange_Type_SP__Sg__Empty(Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Toolkit_StyleManager_Sc_Dali_StyleChange_Type_SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_StyleManager_Sc_Dali_StyleChange_Type_SP__Sg__Connect(Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *self,void (*func)(Dali::Toolkit::StyleManager,Dali::StyleChange::Type)){
        self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_StyleManager_Sc_Dali_StyleChange_Type_SP__Sg__Disconnect(Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *self,void (*func)(Dali::Toolkit::StyleManager,Dali::StyleChange::Type)){
        self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_StyleManager_Sc_Dali_StyleChange_Type_SP__Sg__Emit(Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *self,Dali::Toolkit::StyleManager arg1,Dali::StyleChange::Type arg2){
        /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg1, arg2 );
      }
SWIGINTERN bool Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Button_SP__Sg__Empty(Dali::Signal< bool (Dali::Toolkit::Button) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Button_SP__Sg__GetConnectionCount(Dali::Signal< bool (Dali::Toolkit::Button) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Button_SP__Sg__Connect(Dali::Signal< bool (Dali::Toolkit::Button) > *self,bool (*func)(Dali::Toolkit::Button)){
          self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Button_SP__Sg__Disconnect(Dali::Signal< bool (Dali::Toolkit::Button) > *self,bool (*func)(Dali::Toolkit::Button)){
          self->Disconnect( func );
      }
SWIGINTERN bool Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Button_SP__Sg__Emit(Dali::Signal< bool (Dali::Toolkit::Button) > *self,Dali::Toolkit::Button arg){
          return self->Emit( arg );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Toolkit_GaussianBlurView_SP__Sg__Empty(Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Toolkit_GaussianBlurView_SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_GaussianBlurView_SP__Sg__Connect(Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *self,void (*func)(Dali::Toolkit::GaussianBlurView)){
          self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_GaussianBlurView_SP__Sg__Disconnect(Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *self,void (*func)(Dali::Toolkit::GaussianBlurView)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_GaussianBlurView_SP__Sg__Emit(Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *self,Dali::Toolkit::GaussianBlurView arg){
          /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_Sc_unsigned_SS_int_Sc_bool_SP__Sg__Empty(Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_Sc_unsigned_SS_int_Sc_bool_SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_Sc_unsigned_SS_int_Sc_bool_SP__Sg__Connect(Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *self,void (*func)(Dali::Toolkit::PageTurnView,unsigned int,bool)){
          return self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_Sc_unsigned_SS_int_Sc_bool_SP__Sg__Disconnect(Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *self,void (*func)(Dali::Toolkit::PageTurnView,unsigned int,bool)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_Sc_unsigned_SS_int_Sc_bool_SP__Sg__Emit(Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *self,Dali::Toolkit::PageTurnView arg1,unsigned int arg2,bool arg3){
          /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg1, arg2, arg3 );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_SP__Sg__Empty(Dali::Signal< void (Dali::Toolkit::PageTurnView) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Toolkit::PageTurnView) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_SP__Sg__Connect(Dali::Signal< void (Dali::Toolkit::PageTurnView) > *self,void (*func)(Dali::Toolkit::PageTurnView)){
          self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_SP__Sg__Disconnect(Dali::Signal< void (Dali::Toolkit::PageTurnView) > *self,void (*func)(Dali::Toolkit::PageTurnView)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_SP__Sg__Emit(Dali::Signal< void (Dali::Toolkit::PageTurnView) > *self,Dali::Toolkit::PageTurnView arg){
          /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Toolkit_ProgressBar_Sc_float_Sc_float_SP__Sg__Empty(Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Toolkit_ProgressBar_Sc_float_Sc_float_SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_ProgressBar_Sc_float_Sc_float_SP__Sg__Connect(Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *self,void (*func)(Dali::Toolkit::ProgressBar,float,float)){
          return self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_ProgressBar_Sc_float_Sc_float_SP__Sg__Disconnect(Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *self,void (*func)(Dali::Toolkit::ProgressBar,float,float)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_ProgressBar_Sc_float_Sc_float_SP__Sg__Emit(Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *self,Dali::Toolkit::ProgressBar arg1,float arg2,float arg3){
          /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg1, arg2, arg3 );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Toolkit_ScrollView_SnapEvent_SS_const_SA__SP__Sg__Empty(Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Toolkit_ScrollView_SnapEvent_SS_const_SA__SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_ScrollView_SnapEvent_SS_const_SA__SP__Sg__Connect(Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *self,void (*func)(Dali::Toolkit::ScrollView::SnapEvent const &)){
          self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_ScrollView_SnapEvent_SS_const_SA__SP__Sg__Disconnect(Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *self,void (*func)(Dali::Toolkit::ScrollView::SnapEvent const &)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_ScrollView_SnapEvent_SS_const_SA__SP__Sg__Emit(Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *self,Dali::Toolkit::ScrollView::SnapEvent const &arg){
          /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Vector2_SS_const_SA__SP__Sg__Empty(Dali::Signal< void (Dali::Vector2 const &) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Vector2_SS_const_SA__SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Vector2 const &) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Vector2_SS_const_SA__SP__Sg__Connect(Dali::Signal< void (Dali::Vector2 const &) > *self,void (*func)(Dali::Vector2 const &)){
          self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Vector2_SS_const_SA__SP__Sg__Disconnect(Dali::Signal< void (Dali::Vector2 const &) > *self,void (*func)(Dali::Vector2 const &)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Vector2_SS_const_SA__SP__Sg__Emit(Dali::Signal< void (Dali::Vector2 const &) > *self,Dali::Vector2 const &arg){
          /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg );
      }


SWIGINTERN bool Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Control_Sc_Dali_KeyEvent_SS_const_SA__SP__Sg__Empty(Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Control_Sc_Dali_KeyEvent_SS_const_SA__SP__Sg__GetConnectionCount(Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Control_Sc_Dali_KeyEvent_SS_const_SA__SP__Sg__Connect(Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *self,bool (*func)(Dali::Toolkit::Control,Dali::KeyEvent const &)){
        self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Control_Sc_Dali_KeyEvent_SS_const_SA__SP__Sg__Disconnect(Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *self,bool (*func)(Dali::Toolkit::Control,Dali::KeyEvent const &)){
        self->Disconnect( func );
      }
SWIGINTERN bool Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Control_Sc_Dali_KeyEvent_SS_const_SA__SP__Sg__Emit(Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *self,Dali::Toolkit::Control arg1,Dali::KeyEvent const &arg2){
        return self->Emit( arg1, arg2 );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Toolkit_Control_SP__Sg__Empty(Dali::Signal< void (Dali::Toolkit::Control) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Toolkit_Control_SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Toolkit::Control) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_Control_SP__Sg__Connect(Dali::Signal< void (Dali::Toolkit::Control) > *self,void (*func)(Dali::Toolkit::Control)){
          self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_Control_SP__Sg__Disconnect(Dali::Signal< void (Dali::Toolkit::Control) > *self,void (*func)(Dali::Toolkit::Control)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_Control_SP__Sg__Emit(Dali::Signal< void (Dali::Toolkit::Control) > *self,Dali::Toolkit::Control arg){
          /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg );
      }
SWIGINTERN bool Dali_Signal_Sl_void_Sp_Dali_Toolkit_VideoView_SA__SP__Sg__Empty(Dali::Signal< void (Dali::Toolkit::VideoView &) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_void_Sp_Dali_Toolkit_VideoView_SA__SP__Sg__GetConnectionCount(Dali::Signal< void (Dali::Toolkit::VideoView &) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_VideoView_SA__SP__Sg__Connect(Dali::Signal< void (Dali::Toolkit::VideoView &) > *self,void (*func)(Dali::Toolkit::VideoView &)){
          self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_VideoView_SA__SP__Sg__Disconnect(Dali::Signal< void (Dali::Toolkit::VideoView &) > *self,void (*func)(Dali::Toolkit::VideoView &)){
          self->Disconnect( func );
      }
SWIGINTERN void Dali_Signal_Sl_void_Sp_Dali_Toolkit_VideoView_SA__SP__Sg__Emit(Dali::Signal< void (Dali::Toolkit::VideoView &) > *self,Dali::Toolkit::VideoView &arg){
          /*@SWIG:SWIG/signals.i,185,NO_RETURN_FUNC@*/;
/*@SWIG@*/ self->Emit( arg );
      }
SWIGINTERN bool Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_float_SP__Sg__Empty(Dali::Signal< bool (Dali::Toolkit::Slider,float) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_float_SP__Sg__GetConnectionCount(Dali::Signal< bool (Dali::Toolkit::Slider,float) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_float_SP__Sg__Connect(Dali::Signal< bool (Dali::Toolkit::Slider,float) > *self,bool (*func)(Dali::Toolkit::Slider,float)){
        self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_float_SP__Sg__Disconnect(Dali::Signal< bool (Dali::Toolkit::Slider,float) > *self,bool (*func)(Dali::Toolkit::Slider,float)){
        self->Disconnect( func );
      }
SWIGINTERN bool Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_float_SP__Sg__Emit(Dali::Signal< bool (Dali::Toolkit::Slider,float) > *self,Dali::Toolkit::Slider arg1,float arg2){
        return self->Emit( arg1, arg2 );
      }
SWIGINTERN bool Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_int_SP__Sg__Empty(Dali::Signal< bool (Dali::Toolkit::Slider,int) > const *self){
         return self->Empty();
      }
SWIGINTERN std::size_t Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_int_SP__Sg__GetConnectionCount(Dali::Signal< bool (Dali::Toolkit::Slider,int) > const *self){
        return self->GetConnectionCount();
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_int_SP__Sg__Connect(Dali::Signal< bool (Dali::Toolkit::Slider,int) > *self,bool (*func)(Dali::Toolkit::Slider,int)){
        self->Connect( func );
      }
SWIGINTERN void Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_int_SP__Sg__Disconnect(Dali::Signal< bool (Dali::Toolkit::Slider,int) > *self,bool (*func)(Dali::Toolkit::Slider,int)){
        self->Disconnect( func );
      }
SWIGINTERN bool Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_int_SP__Sg__Emit(Dali::Signal< bool (Dali::Toolkit::Slider,int) > *self,Dali::Toolkit::Slider arg1,int arg2){
        return self->Emit( arg1, arg2 );
      }

/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "dali_wrap.h"

/*
 *  Widget director
 */
SwigDirector_WidgetImpl::SwigDirector_WidgetImpl() : Dali::Internal::Adaptor::Widget(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_WidgetImpl::~SwigDirector_WidgetImpl() {
}

void SwigDirector_WidgetImpl::OnCreate(std::string const &contentInfo, Dali::Window window) {
  char * jcontentInfo = 0 ;
  void * jwindow  ;

  if (!swig_callbackOnCreate) {
    Dali::Internal::Adaptor::Widget::OnCreate(contentInfo,window);
    return;
  } else {
    jcontentInfo = SWIG_csharp_string_callback((&contentInfo)->c_str());
    jwindow = (void *)new Dali::Window((const Dali::Window &)window);
    swig_callbackOnCreate(jcontentInfo, jwindow);
  }
}

void SwigDirector_WidgetImpl::OnTerminate(std::string const &contentInfo, Dali::Widget::Termination type) {
  char * jcontentInfo = 0 ;
  int jtype  ;

  if (!swig_callbackOnTerminate) {
    Dali::Internal::Adaptor::Widget::OnTerminate(contentInfo,type);
    return;
  } else {
    jcontentInfo = SWIG_csharp_string_callback((&contentInfo)->c_str());
    jtype = (int)type;
    swig_callbackOnTerminate(jcontentInfo, jtype);
  }
}

void SwigDirector_WidgetImpl::OnPause() {
  if (!swig_callbackOnPause) {
    Dali::Internal::Adaptor::Widget::OnPause();
    return;
  } else {
    swig_callbackOnPause();
  }
}

void SwigDirector_WidgetImpl::OnResume() {
  if (!swig_callbackOnResume) {
    Dali::Internal::Adaptor::Widget::OnResume();
    return;
  } else {
    swig_callbackOnResume();
  }
}

void SwigDirector_WidgetImpl::OnResize(Dali::Window window) {
  void * jwindow  ;

  if (!swig_callbackOnResize) {
    Dali::Internal::Adaptor::Widget::OnResize(window);
    return;
  } else {
    jwindow = (void *)new Dali::Window((const Dali::Window &)window);
    swig_callbackOnResize(jwindow);
  }
}

void SwigDirector_WidgetImpl::OnUpdate(std::string const &contentInfo, int force) {
  char * jcontentInfo = 0 ;
  int jforce  ;

  if (!swig_callbackOnUpdate) {
    Dali::Internal::Adaptor::Widget::OnUpdate(contentInfo,force);
    return;
  } else {
    jcontentInfo = SWIG_csharp_string_callback((&contentInfo)->c_str());
    jforce = force;
    swig_callbackOnUpdate(jcontentInfo, jforce);
  }
}

void SwigDirector_WidgetImpl::SignalConnected(Dali::SlotObserver *slotObserver, Dali::CallbackBase *callback) {
  void * jslotObserver = 0 ;
  void * jcallback = 0 ;

  if (!swig_callbackSignalConnected) {
    Dali::Internal::Adaptor::Widget::SignalConnected(slotObserver,callback);
    return;
  } else {
    jslotObserver = (void *) slotObserver;
    jcallback = (void *) callback;
    swig_callbackSignalConnected(jslotObserver, jcallback);
  }
}

void SwigDirector_WidgetImpl::SignalDisconnected(Dali::SlotObserver *slotObserver, Dali::CallbackBase *callback) {
  void * jslotObserver = 0 ;
  void * jcallback = 0 ;

  if (!swig_callbackSignalDisconnected) {
    Dali::Internal::Adaptor::Widget::SignalDisconnected(slotObserver,callback);
    return;
  } else {
    jslotObserver = (void *) slotObserver;
    jcallback = (void *) callback;
    swig_callbackSignalDisconnected(jslotObserver, jcallback);
  }
}

void SwigDirector_WidgetImpl::swig_connect_director(SWIG_Callback0_t callbackOnCreate, SWIG_Callback1_t callbackOnTerminate, SWIG_Callback2_t callbackOnPause, SWIG_Callback3_t callbackOnResume, SWIG_Callback4_t callbackOnResize, SWIG_Callback5_t callbackOnUpdate, SWIG_Callback6_t callbackSignalConnected, SWIG_Callback7_t callbackSignalDisconnected) {

  swig_callbackOnCreate = callbackOnCreate;
  swig_callbackOnTerminate = callbackOnTerminate;
  swig_callbackOnPause = callbackOnPause;
  swig_callbackOnResume = callbackOnResume;
  swig_callbackOnResize = callbackOnResize;
  swig_callbackOnUpdate = callbackOnUpdate;
  swig_callbackSignalConnected = callbackSignalConnected;
  swig_callbackSignalDisconnected = callbackSignalDisconnected;
}

void SwigDirector_WidgetImpl::swig_init_callbacks() {
  swig_callbackOnCreate = 0;
  swig_callbackOnTerminate = 0;
  swig_callbackOnPause = 0;
  swig_callbackOnResume = 0;
  swig_callbackOnResize = 0;
  swig_callbackOnUpdate = 0;
  swig_callbackSignalConnected = 0;
  swig_callbackSignalDisconnected = 0;
}


SwigDirector_ViewImpl::SwigDirector_ViewImpl(Dali::Toolkit::Internal::Control::ControlBehaviour behaviourFlags) : Dali::Toolkit::Internal::Control(behaviourFlags), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ViewImpl::~SwigDirector_ViewImpl() {

}


void SwigDirector_ViewImpl::OnSceneConnection(int depth) {
  int jdepth  ;

  if (!swig_callbackOnSceneConnection) {
    Dali::Toolkit::Internal::Control::OnSceneConnection(depth);
    return;
  } else {
    jdepth = depth;
    swig_callbackOnSceneConnection(jdepth);
  }
}

void SwigDirector_ViewImpl::OnSceneDisconnection() {
  if (!swig_callbackOnSceneDisconnection) {
    Dali::Toolkit::Internal::Control::OnSceneDisconnection();
    return;
  } else {
    swig_callbackOnSceneDisconnection();
  }
}

void SwigDirector_ViewImpl::OnChildAdd(Dali::Actor &child) {
  void * jchild = 0 ;

  if (!swig_callbackOnChildAdd) {
    Dali::Toolkit::Internal::Control::OnChildAdd(child);
    return;
  } else {
    jchild = (Dali::Actor *) &child;
    swig_callbackOnChildAdd(jchild);
  }
}

void SwigDirector_ViewImpl::OnChildRemove(Dali::Actor &child) {
  void * jchild = 0 ;

  if (!swig_callbackOnChildRemove) {
    Dali::Toolkit::Internal::Control::OnChildRemove(child);
    return;
  } else {
    jchild = (Dali::Actor *) &child;
    swig_callbackOnChildRemove(jchild);
  }
}

void SwigDirector_ViewImpl::OnPropertySet(Dali::Property::Index index, const Dali::Property::Value& propertyValue) {
  int jindex  ;
  void * jpropertyValue  ;

  if (!swig_callbackOnPropertySet) {
    Dali::Toolkit::Internal::Control::OnPropertySet(index,propertyValue);
    return;
  } else {
    jindex = index;
    jpropertyValue = (void *)new Dali::Property::Value((const Dali::Property::Value &)propertyValue);
    swig_callbackOnPropertySet(jindex, jpropertyValue);
  }
}

void SwigDirector_ViewImpl::OnSizeSet(Dali::Vector3 const &targetSize) {
  void * jtargetSize = 0 ;

  if (!swig_callbackOnSizeSet) {
    Dali::Toolkit::Internal::Control::OnSizeSet(targetSize);
    return;
  } else {
    jtargetSize = (Dali::Vector3 *) &targetSize;
    swig_callbackOnSizeSet(jtargetSize);
  }
}

void SwigDirector_ViewImpl::OnSizeAnimation(Dali::Animation &animation, Dali::Vector3 const &targetSize) {
  void * janimation = 0 ;
  void * jtargetSize = 0 ;

  if (!swig_callbackOnSizeAnimation) {
    Dali::Toolkit::Internal::Control::OnSizeAnimation(animation,targetSize);
    return;
  } else {
    janimation = (Dali::Animation *) &animation;
    jtargetSize = (Dali::Vector3 *) &targetSize;
    swig_callbackOnSizeAnimation(janimation, jtargetSize);
  }
}

bool SwigDirector_ViewImpl::OnKeyEvent(Dali::KeyEvent const &event) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jarg0 = 0 ;

  if (!swig_callbackOnKeyEvent) {
    return Dali::Toolkit::Internal::Control::OnKeyEvent(event);
  } else {
    jarg0 = (Dali::KeyEvent *) &event;
    jresult = (unsigned int) swig_callbackOnKeyEvent(jarg0);
    c_result = jresult ? true : false;
  }
  return c_result;
}

void SwigDirector_ViewImpl::OnRelayout(Dali::Vector2 const &size, Dali::RelayoutContainer &container) {
  void * jsize = 0 ;
  void * jcontainer = 0 ;

  if (!swig_callbackOnRelayout) {
    Dali::Toolkit::Internal::Control::OnRelayout(size,container);
    return;
  } else {
    jsize = (Dali::Vector2 *) &size;
    jcontainer = (Dali::RelayoutContainer *) &container;
    swig_callbackOnRelayout(jsize, jcontainer);
  }
}

void SwigDirector_ViewImpl::OnSetResizePolicy(Dali::ResizePolicy::Type policy, Dali::Dimension::Type dimension) {
  int jpolicy  ;
  int jdimension  ;

  if (!swig_callbackOnSetResizePolicy) {
    Dali::Toolkit::Internal::Control::OnSetResizePolicy(policy,dimension);
    return;
  } else {
    jpolicy = (int)policy;
    jdimension = (int)dimension;
    swig_callbackOnSetResizePolicy(jpolicy, jdimension);
  }
}

Dali::Vector3 SwigDirector_ViewImpl::GetNaturalSize() {
  Dali::Vector3 c_result ;
  void * jresult = 0 ;

  if (!swig_callbackGetNaturalSize) {
    return Dali::Toolkit::Internal::Control::GetNaturalSize();
  } else {
    jresult = (void *) swig_callbackGetNaturalSize();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Dali::Vector3", 0);
      return c_result;
    }
    c_result = *(Dali::Vector3 *)jresult;
  }
  return c_result;
}

float SwigDirector_ViewImpl::CalculateChildSize(Dali::Actor const &child, Dali::Dimension::Type dimension) {
  float c_result = SwigValueInit< float >() ;
  float jresult = 0 ;
  void * jchild = 0 ;
  int jdimension  ;

  if (!swig_callbackCalculateChildSize) {
    return Dali::Toolkit::Internal::Control::CalculateChildSize(child,dimension);
  } else {
    jchild = (Dali::Actor *) &child;
    jdimension = (int)dimension;
    jresult = (float) swig_callbackCalculateChildSize(jchild, jdimension);
    c_result = (float)jresult;
  }
  return c_result;
}

float SwigDirector_ViewImpl::GetHeightForWidth(float width) {
  float c_result = SwigValueInit< float >() ;
  float jresult = 0 ;
  float jwidth  ;

  if (!swig_callbackGetHeightForWidth) {
    return Dali::Toolkit::Internal::Control::GetHeightForWidth(width);
  } else {
    jwidth = width;
    jresult = (float) swig_callbackGetHeightForWidth(jwidth);
    c_result = (float)jresult;
  }
  return c_result;
}

float SwigDirector_ViewImpl::GetWidthForHeight(float height) {
  float c_result = SwigValueInit< float >() ;
  float jresult = 0 ;
  float jheight  ;

  if (!swig_callbackGetWidthForHeight) {
    return Dali::Toolkit::Internal::Control::GetWidthForHeight(height);
  } else {
    jheight = height;
    jresult = (float) swig_callbackGetWidthForHeight(jheight);
    c_result = (float)jresult;
  }
  return c_result;
}

bool SwigDirector_ViewImpl::RelayoutDependentOnChildren(Dali::Dimension::Type dimension) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  int jdimension  ;

  if (!swig_callbackRelayoutDependentOnChildren__SWIG_0) {
    return Dali::Toolkit::Internal::Control::RelayoutDependentOnChildren(dimension);
  } else {
    jdimension = (int)dimension;
    jresult = (unsigned int) swig_callbackRelayoutDependentOnChildren__SWIG_0(jdimension);
    c_result = jresult ? true : false;
  }
  return c_result;
}

void SwigDirector_ViewImpl::OnCalculateRelayoutSize(Dali::Dimension::Type dimension) {
  int jdimension  ;

  if (!swig_callbackOnCalculateRelayoutSize) {
    Dali::Toolkit::Internal::Control::OnCalculateRelayoutSize(dimension);
    return;
  } else {
    jdimension = (int)dimension;
    swig_callbackOnCalculateRelayoutSize(jdimension);
  }
}

void SwigDirector_ViewImpl::OnLayoutNegotiated(float size, Dali::Dimension::Type dimension) {
  float jsize  ;
  int jdimension  ;

  if (!swig_callbackOnLayoutNegotiated) {
    Dali::Toolkit::Internal::Control::OnLayoutNegotiated(size,dimension);
    return;
  } else {
    jsize = size;
    jdimension = (int)dimension;
    swig_callbackOnLayoutNegotiated(jsize, jdimension);
  }
}

Dali::CustomActorImpl::Extension *SwigDirector_ViewImpl::GetExtension() {
  return Dali::CustomActorImpl::GetExtension();
}

void SwigDirector_ViewImpl::OnInitialize() {
  if (!swig_callbackOnInitialize) {
    Dali::Toolkit::Internal::Control::OnInitialize();
    return;
  } else {
    swig_callbackOnInitialize();
  }
}

void SwigDirector_ViewImpl::OnStyleChange(Dali::Toolkit::StyleManager styleManager, Dali::StyleChange::Type change) {
  void * jstyleManager  ;
  int jchange  ;

  if (!swig_callbackOnStyleChange) {
    Dali::Toolkit::Internal::Control::OnStyleChange(styleManager,change);
    return;
  } else {
    jstyleManager = (void *)new Dali::Toolkit::StyleManager((const Dali::Toolkit::StyleManager &)styleManager);
    jchange = (int)change;
    swig_callbackOnStyleChange(jstyleManager, jchange);
  }
}

bool SwigDirector_ViewImpl::OnAccessibilityActivated() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;

  if (!swig_callbackOnAccessibilityActivated) {
    return Dali::Toolkit::Internal::Control::OnAccessibilityActivated();
  } else {
    jresult = (unsigned int) swig_callbackOnAccessibilityActivated();
    c_result = jresult ? true : false;
  }
  return c_result;
}

bool SwigDirector_ViewImpl::OnAccessibilityPan(Dali::PanGesture gesture) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jgesture  ;

  if (!swig_callbackOnAccessibilityPan) {
    return Dali::Toolkit::Internal::Control::OnAccessibilityPan(gesture);
  } else {
    jgesture = (void *)new Dali::PanGesture((const Dali::PanGesture &)gesture);
    jresult = (unsigned int) swig_callbackOnAccessibilityPan(jgesture);
    c_result = jresult ? true : false;
  }
  return c_result;
}

bool SwigDirector_ViewImpl::OnAccessibilityValueChange(bool isIncrease) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  unsigned int jisIncrease  ;

  if (!swig_callbackOnAccessibilityValueChange) {
    return Dali::Toolkit::Internal::Control::OnAccessibilityValueChange(isIncrease);
  } else {
    jisIncrease = isIncrease;
    jresult = (unsigned int) swig_callbackOnAccessibilityValueChange(jisIncrease);
    c_result = jresult ? true : false;
  }
  return c_result;
}

bool SwigDirector_ViewImpl::OnAccessibilityZoom() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;

  if (!swig_callbackOnAccessibilityZoom) {
    return Dali::Toolkit::Internal::Control::OnAccessibilityZoom();
  } else {
    jresult = (unsigned int) swig_callbackOnAccessibilityZoom();
    c_result = jresult ? true : false;
  }
  return c_result;
}

void SwigDirector_ViewImpl::OnKeyInputFocusGained() {
  if (!swig_callbackOnKeyInputFocusGained) {
    Dali::Toolkit::Internal::Control::OnKeyInputFocusGained();
    return;
  } else {
    swig_callbackOnKeyInputFocusGained();
  }
}

void SwigDirector_ViewImpl::OnKeyInputFocusLost() {
  if (!swig_callbackOnKeyInputFocusLost) {
    Dali::Toolkit::Internal::Control::OnKeyInputFocusLost();
    return;
  } else {
    swig_callbackOnKeyInputFocusLost();
  }
}

Dali::Actor SwigDirector_ViewImpl::GetNextKeyboardFocusableActor(Dali::Actor currentFocusedActor, Dali::Toolkit::Control::KeyboardFocus::Direction direction, bool loopEnabled) {
  Dali::Actor c_result ;
  void * jresult = 0 ;
  void * jcurrentFocusedActor  ;
  int jdirection  ;
  unsigned int jloopEnabled  ;

  if (!swig_callbackGetNextKeyboardFocusableActor) {
    return Dali::Toolkit::Internal::Control::GetNextKeyboardFocusableActor(currentFocusedActor,direction,loopEnabled);
  } else {
    jcurrentFocusedActor = (void *)new Dali::Actor((const Dali::Actor &)currentFocusedActor);
    jdirection = (int)direction;
    jloopEnabled = loopEnabled;
    jresult = (void *) swig_callbackGetNextKeyboardFocusableActor(jcurrentFocusedActor, jdirection, jloopEnabled);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Dali::Actor", 0);
      return c_result;
    }
    c_result = *(Dali::Actor *)jresult;
  }
  return c_result;
}

void SwigDirector_ViewImpl::OnKeyboardFocusChangeCommitted(Dali::Actor commitedFocusableActor) {
  void * jcommitedFocusableActor  ;

  if (!swig_callbackOnKeyboardFocusChangeCommitted) {
    Dali::Toolkit::Internal::Control::OnKeyboardFocusChangeCommitted(commitedFocusableActor);
    return;
  } else {
    jcommitedFocusableActor = (void *)new Dali::Actor((const Dali::Actor &)commitedFocusableActor);
    swig_callbackOnKeyboardFocusChangeCommitted(jcommitedFocusableActor);
  }
}

bool SwigDirector_ViewImpl::OnKeyboardEnter() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;

  if (!swig_callbackOnKeyboardEnter) {
    return Dali::Toolkit::Internal::Control::OnKeyboardEnter();
  } else {
    jresult = (unsigned int) swig_callbackOnKeyboardEnter();
    c_result = jresult ? true : false;
  }
  return c_result;
}

void SwigDirector_ViewImpl::OnPinch(Dali::PinchGesture const &pinch) {
  void * jpinch = 0 ;

  if (!swig_callbackOnPinch) {
    Dali::Toolkit::Internal::Control::OnPinch(pinch);
    return;
  } else {
    jpinch = (Dali::PinchGesture *) &pinch;
    swig_callbackOnPinch(jpinch);
  }
}

void SwigDirector_ViewImpl::OnPan(Dali::PanGesture const &pan) {
  void * jpan = 0 ;

  if (!swig_callbackOnPan) {
    Dali::Toolkit::Internal::Control::OnPan(pan);
    return;
  } else {
    jpan = (Dali::PanGesture *) &pan;
    swig_callbackOnPan(jpan);
  }
}

void SwigDirector_ViewImpl::OnTap(Dali::TapGesture const &tap) {
  void * jtap = 0 ;

  if (!swig_callbackOnTap) {
    Dali::Toolkit::Internal::Control::OnTap(tap);
    return;
  } else {
    jtap = (Dali::TapGesture *) &tap;
    swig_callbackOnTap(jtap);
  }
}

void SwigDirector_ViewImpl::OnLongPress(Dali::LongPressGesture const &longPress) {
  void * jlongPress = 0 ;

  if (!swig_callbackOnLongPress) {
    Dali::Toolkit::Internal::Control::OnLongPress(longPress);
    return;
  } else {
    jlongPress = (Dali::LongPressGesture *) &longPress;
    swig_callbackOnLongPress(jlongPress);
  }
}

void SwigDirector_ViewImpl::SignalConnected(Dali::SlotObserver *slotObserver, Dali::CallbackBase *callback) {
  void * jslotObserver = 0 ;
  void * jcallback = 0 ;

  if (!swig_callbackSignalConnected) {
    Dali::Toolkit::Internal::Control::SignalConnected(slotObserver,callback);
    return;
  } else {
    jslotObserver = (void *) slotObserver;
    jcallback = (void *) callback;
    swig_callbackSignalConnected(jslotObserver, jcallback);
  }
}

void SwigDirector_ViewImpl::SignalDisconnected(Dali::SlotObserver *slotObserver, Dali::CallbackBase *callback) {
  void * jslotObserver = 0 ;
  void * jcallback = 0 ;

  if (!swig_callbackSignalDisconnected) {
    Dali::Toolkit::Internal::Control::SignalDisconnected(slotObserver,callback);
    return;
  } else {
    jslotObserver = (void *) slotObserver;
    jcallback = (void *) callback;
    swig_callbackSignalDisconnected(jslotObserver, jcallback);
  }
}

Dali::Toolkit::Internal::Control::Extension *SwigDirector_ViewImpl::GetControlExtension() {
  return Dali::Toolkit::Internal::Control::GetControlExtension();
}

void SwigDirector_ViewImpl::swig_connect_director(SWIG_Callback0_t callbackOnSceneConnection, SWIG_Callback1_t callbackOnSceneDisconnection, SWIG_Callback2_t callbackOnChildAdd, SWIG_Callback3_t callbackOnChildRemove, SWIG_Callback4_t callbackOnPropertySet, SWIG_Callback5_t callbackOnSizeSet, SWIG_Callback6_t callbackOnSizeAnimation, SWIG_Callback9_t callbackOnKeyEvent, SWIG_Callback11_t callbackOnRelayout, SWIG_Callback12_t callbackOnSetResizePolicy, SWIG_Callback13_t callbackGetNaturalSize, SWIG_Callback14_t callbackCalculateChildSize, SWIG_Callback15_t callbackGetHeightForWidth, SWIG_Callback16_t callbackGetWidthForHeight, SWIG_Callback17_t callbackRelayoutDependentOnChildren__SWIG_0, SWIG_Callback18_t callbackRelayoutDependentOnChildren__SWIG_1, SWIG_Callback19_t callbackOnCalculateRelayoutSize, SWIG_Callback20_t callbackOnLayoutNegotiated, SWIG_Callback21_t callbackOnInitialize, SWIG_Callback24_t callbackOnStyleChange, SWIG_Callback25_t callbackOnAccessibilityActivated, SWIG_Callback26_t callbackOnAccessibilityPan, SWIG_Callback28_t callbackOnAccessibilityValueChange, SWIG_Callback29_t callbackOnAccessibilityZoom, SWIG_Callback30_t callbackOnKeyInputFocusGained, SWIG_Callback31_t callbackOnKeyInputFocusLost, SWIG_Callback32_t callbackGetNextKeyboardFocusableActor, SWIG_Callback33_t callbackOnKeyboardFocusChangeCommitted, SWIG_Callback34_t callbackOnKeyboardEnter, SWIG_Callback35_t callbackOnPinch, SWIG_Callback36_t callbackOnPan, SWIG_Callback37_t callbackOnTap, SWIG_Callback38_t callbackOnLongPress, SWIG_Callback39_t callbackSignalConnected, SWIG_Callback40_t callbackSignalDisconnected) {
  swig_callbackOnSceneConnection = callbackOnSceneConnection;
  swig_callbackOnSceneDisconnection = callbackOnSceneDisconnection;
  swig_callbackOnChildAdd = callbackOnChildAdd;
  swig_callbackOnChildRemove = callbackOnChildRemove;
  swig_callbackOnPropertySet = callbackOnPropertySet;
  swig_callbackOnSizeSet = callbackOnSizeSet;
  swig_callbackOnSizeAnimation = callbackOnSizeAnimation;
  swig_callbackOnKeyEvent = callbackOnKeyEvent;
  swig_callbackOnRelayout = callbackOnRelayout;
  swig_callbackOnSetResizePolicy = callbackOnSetResizePolicy;
  swig_callbackGetNaturalSize = callbackGetNaturalSize;
  swig_callbackCalculateChildSize = callbackCalculateChildSize;
  swig_callbackGetHeightForWidth = callbackGetHeightForWidth;
  swig_callbackGetWidthForHeight = callbackGetWidthForHeight;
  swig_callbackRelayoutDependentOnChildren__SWIG_0 = callbackRelayoutDependentOnChildren__SWIG_0;
  swig_callbackRelayoutDependentOnChildren__SWIG_1 = callbackRelayoutDependentOnChildren__SWIG_1;
  swig_callbackOnCalculateRelayoutSize = callbackOnCalculateRelayoutSize;
  swig_callbackOnLayoutNegotiated = callbackOnLayoutNegotiated;
  swig_callbackOnInitialize = callbackOnInitialize;
  swig_callbackOnStyleChange = callbackOnStyleChange;
  swig_callbackOnAccessibilityActivated = callbackOnAccessibilityActivated;
  swig_callbackOnAccessibilityPan = callbackOnAccessibilityPan;
  swig_callbackOnAccessibilityValueChange = callbackOnAccessibilityValueChange;
  swig_callbackOnAccessibilityZoom = callbackOnAccessibilityZoom;
  swig_callbackOnKeyInputFocusGained = callbackOnKeyInputFocusGained;
  swig_callbackOnKeyInputFocusLost = callbackOnKeyInputFocusLost;
  swig_callbackGetNextKeyboardFocusableActor = callbackGetNextKeyboardFocusableActor;
  swig_callbackOnKeyboardFocusChangeCommitted = callbackOnKeyboardFocusChangeCommitted;
  swig_callbackOnKeyboardEnter = callbackOnKeyboardEnter;
  swig_callbackOnPinch = callbackOnPinch;
  swig_callbackOnPan = callbackOnPan;
  swig_callbackOnTap = callbackOnTap;
  swig_callbackOnLongPress = callbackOnLongPress;
  swig_callbackSignalConnected = callbackSignalConnected;
  swig_callbackSignalDisconnected = callbackSignalDisconnected;
}

void SwigDirector_ViewImpl::swig_init_callbacks() {
  swig_callbackOnSceneConnection = 0;
  swig_callbackOnSceneDisconnection = 0;
  swig_callbackOnChildAdd = 0;
  swig_callbackOnChildRemove = 0;
  swig_callbackOnPropertySet = 0;
  swig_callbackOnSizeSet = 0;
  swig_callbackOnSizeAnimation = 0;
  swig_callbackOnKeyEvent = 0;
  swig_callbackOnRelayout = 0;
  swig_callbackOnSetResizePolicy = 0;
  swig_callbackGetNaturalSize = 0;
  swig_callbackCalculateChildSize = 0;
  swig_callbackGetHeightForWidth = 0;
  swig_callbackGetWidthForHeight = 0;
  swig_callbackRelayoutDependentOnChildren__SWIG_0 = 0;
  swig_callbackRelayoutDependentOnChildren__SWIG_1 = 0;
  swig_callbackOnCalculateRelayoutSize = 0;
  swig_callbackOnLayoutNegotiated = 0;
  swig_callbackOnInitialize = 0;
  swig_callbackOnStyleChange = 0;
  swig_callbackOnAccessibilityActivated = 0;
  swig_callbackOnAccessibilityPan = 0;
  swig_callbackOnAccessibilityValueChange = 0;
  swig_callbackOnAccessibilityZoom = 0;
  swig_callbackOnKeyInputFocusGained = 0;
  swig_callbackOnKeyInputFocusLost = 0;
  swig_callbackGetNextKeyboardFocusableActor = 0;
  swig_callbackOnKeyboardFocusChangeCommitted = 0;
  swig_callbackOnKeyboardEnter = 0;
  swig_callbackOnPinch = 0;
  swig_callbackOnPan = 0;
  swig_callbackOnTap = 0;
  swig_callbackOnLongPress = 0;
  swig_callbackSignalConnected = 0;
  swig_callbackSignalDisconnected = 0;
}

SwigDirector_ItemFactory::SwigDirector_ItemFactory() : Dali::Toolkit::ItemFactory(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ItemFactory::~SwigDirector_ItemFactory() {

}


unsigned int SwigDirector_ItemFactory::GetNumberOfItems() {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  unsigned int jresult = 0 ;

  if (!swig_callbackGetNumberOfItems) {
    throw Swig::DirectorPureVirtualException("Dali::Toolkit::ItemFactory::GetNumberOfItems");
  } else {
    jresult = (unsigned int) swig_callbackGetNumberOfItems();
    c_result = (unsigned int)jresult;
  }
  return c_result;
}

Dali::Actor SwigDirector_ItemFactory::NewItem(unsigned int itemId) {
  Dali::Actor c_result ;
  void * jresult = 0 ;
  unsigned int jitemId  ;

  if (!swig_callbackNewItem) {
    throw Swig::DirectorPureVirtualException("Dali::Toolkit::ItemFactory::NewItem");
  } else {
    jitemId = itemId;
    jresult = (void *) swig_callbackNewItem(jitemId);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Dali::Actor", 0);
      return c_result;
    }
    c_result = *(Dali::Actor *)jresult;
  }
  return c_result;
}

void SwigDirector_ItemFactory::ItemReleased(unsigned int itemId, Dali::Actor actor) {
  unsigned int jitemId  ;
  void * jactor  ;

  if (!swig_callbackItemReleased) {
    Dali::Toolkit::ItemFactory::ItemReleased(itemId,actor);
    return;
  } else {
    jitemId = itemId;
    jactor = (void *)new Dali::Actor((const Dali::Actor &)actor);
    swig_callbackItemReleased(jitemId, jactor);
  }
}

Dali::Toolkit::ItemFactory::Extension *SwigDirector_ItemFactory::GetExtension() {
  return Dali::Toolkit::ItemFactory::GetExtension();
}

void SwigDirector_ItemFactory::swig_connect_director(SWIG_Callback0_t callbackGetNumberOfItems, SWIG_Callback1_t callbackNewItem, SWIG_Callback2_t callbackItemReleased) {
  swig_callbackGetNumberOfItems = callbackGetNumberOfItems;
  swig_callbackNewItem = callbackNewItem;
  swig_callbackItemReleased = callbackItemReleased;
}

void SwigDirector_ItemFactory::swig_init_callbacks() {
  swig_callbackGetNumberOfItems = 0;
  swig_callbackNewItem = 0;
  swig_callbackItemReleased = 0;
}

SwigDirector_CustomAlgorithmInterface::SwigDirector_CustomAlgorithmInterface() : Dali::Toolkit::DevelKeyboardFocusManager::CustomAlgorithmInterface(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_CustomAlgorithmInterface::~SwigDirector_CustomAlgorithmInterface() {

}


Dali::Actor SwigDirector_CustomAlgorithmInterface::GetNextFocusableActor(Dali::Actor current, Dali::Actor proposed, Dali::Toolkit::Control::KeyboardFocus::Direction direction) {
  Dali::Actor c_result ;
  void * jresult = 0 ;
  void * jcurrent  ;
  void * jproposed  ;
  int jdirection  ;

  if (!swig_callbackGetNextFocusableActor) {
    throw Swig::DirectorPureVirtualException("Dali::Toolkit::DevelKeyboardFocusManager::CustomAlgorithmInterface::GetNextFocusableActor");
  } else {
    jcurrent = (void *)new Dali::Actor((const Dali::Actor &)current);
    jproposed = (void *)new Dali::Actor((const Dali::Actor &)proposed);
    jdirection = (int)direction;
    jresult = (void *) swig_callbackGetNextFocusableActor(jcurrent, jproposed, jdirection);
    if (!jresult) {
      DALI_LOG_ERROR("[ERROR][%s line:%d] Unexpected null return for type Dali::Actor! Next focus will be NULL, please be cautious to handle the keyboard foucs! ", __FILE__, __LINE__);
      return c_result;
    }
    c_result = *(Dali::Actor *)jresult;
  }
  return c_result;
}

void SwigDirector_CustomAlgorithmInterface::swig_connect_director(SWIG_Callback0_t callbackGetNextFocusableActor) {
  swig_callbackGetNextFocusableActor = callbackGetNextFocusableActor;
}

void SwigDirector_CustomAlgorithmInterface::swig_init_callbacks() {
  swig_callbackGetNextFocusableActor = 0;
}

SwigDirector_FrameCallbackInterface::SwigDirector_FrameCallbackInterface() : Dali::FrameCallbackInterface(), Swig::Director() {
  swig_callbackOnUpdate = 0;
}

SwigDirector_FrameCallbackInterface::~SwigDirector_FrameCallbackInterface() {

}

void SwigDirector_FrameCallbackInterface::swig_connect_director(SWIG_Callback0_t callbackUpdate) {
  swig_callbackOnUpdate = callbackUpdate;
}


void SwigDirector_FrameCallbackInterface::Update(Dali::UpdateProxy& updateProxy, float elapsedSeconds) {
  void * jcurrent  ;

  if (!swig_callbackOnUpdate) {
    throw Swig::DirectorPureVirtualException("Dali::FrameCallbackInterface::Update");
  } else {
    Dali::UpdateProxy* proxy = &updateProxy;
    jcurrent = (void *)proxy;
    swig_callbackOnUpdate(jcurrent, elapsedSeconds);
    if (!jcurrent) {
      DALI_LOG_ERROR("[ERROR][%s line:%d] Unexpected null return for type Dali::UpdateProxy! ", __FILE__, __LINE__);
      return;
    }
  }
  return;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_floatp() {
  void * jresult ;
  floatp *result = 0 ;

  {
    try {
      result = (floatp *)new_floatp();
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_floatp(void * jarg1) {
  floatp *arg1 = (floatp *) 0 ;

  arg1 = (floatp *)jarg1;
  {
    try {
      delete_floatp(arg1);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_floatp_assign(void * jarg1, float jarg2) {
  floatp *arg1 = (floatp *) 0 ;
  float arg2 ;

  arg1 = (floatp *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      floatp_assign(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_floatp_value(void * jarg1) {
  float jresult ;
  floatp *arg1 = (floatp *) 0 ;
  float result;

  arg1 = (floatp *)jarg1;
  {
    try {
      result = (float)floatp_value(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_floatp_cast(void * jarg1) {
  void * jresult ;
  floatp *arg1 = (floatp *) 0 ;
  float *result = 0 ;

  arg1 = (floatp *)jarg1;
  {
    try {
      result = (float *)floatp_cast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_floatp_frompointer(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  floatp *result = 0 ;

  arg1 = (float *)jarg1;
  {
    try {
      result = (floatp *)floatp_frompointer(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_intp() {
  void * jresult ;
  intp *result = 0 ;

  {
    try {
      result = (intp *)new_intp();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_intp(void * jarg1) {
  intp *arg1 = (intp *) 0 ;

  arg1 = (intp *)jarg1;
  {
    try {
      delete_intp(arg1);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_intp_assign(void * jarg1, int jarg2) {
  intp *arg1 = (intp *) 0 ;
  int arg2 ;

  arg1 = (intp *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      intp_assign(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_intp_value(void * jarg1) {
  int jresult ;
  intp *arg1 = (intp *) 0 ;
  int result;

  arg1 = (intp *)jarg1;
  {
    try {
      result = (int)intp_value(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_intp_cast(void * jarg1) {
  void * jresult ;
  intp *arg1 = (intp *) 0 ;
  int *result = 0 ;

  arg1 = (intp *)jarg1;
  {
    try {
      result = (int *)intp_cast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_intp_frompointer(void * jarg1) {
  void * jresult ;
  int *arg1 = (int *) 0 ;
  intp *result = 0 ;

  arg1 = (int *)jarg1;
  {
    try {
      result = (intp *)intp_frompointer(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_doublep() {
  void * jresult ;
  doublep *result = 0 ;

  {
    try {
      result = (doublep *)new_doublep();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_doublep(void * jarg1) {
  doublep *arg1 = (doublep *) 0 ;

  arg1 = (doublep *)jarg1;
  {
    try {
      delete_doublep(arg1);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_doublep_assign(void * jarg1, double jarg2) {
  doublep *arg1 = (doublep *) 0 ;
  double arg2 ;

  arg1 = (doublep *)jarg1;
  arg2 = (double)jarg2;
  {
    try {
      doublep_assign(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT double SWIGSTDCALL CSharp_Dali_doublep_value(void * jarg1) {
  double jresult ;
  doublep *arg1 = (doublep *) 0 ;
  double result;

  arg1 = (doublep *)jarg1;
  {
    try {
      result = (double)doublep_value(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_doublep_cast(void * jarg1) {
  void * jresult ;
  doublep *arg1 = (doublep *) 0 ;
  double *result = 0 ;

  arg1 = (doublep *)jarg1;
  {
    try {
      result = (double *)doublep_cast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_doublep_frompointer(void * jarg1) {
  void * jresult ;
  double *arg1 = (double *) 0 ;
  doublep *result = 0 ;

  arg1 = (double *)jarg1;
  {
    try {
      result = (doublep *)doublep_frompointer(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_uintp() {
  void * jresult ;
  uintp *result = 0 ;

  {
    try {
      result = (uintp *)new_uintp();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_uintp(void * jarg1) {
  uintp *arg1 = (uintp *) 0 ;

  arg1 = (uintp *)jarg1;
  {
    try {
      delete_uintp(arg1);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_uintp_assign(void * jarg1, unsigned int jarg2) {
  uintp *arg1 = (uintp *) 0 ;
  unsigned int arg2 ;

  arg1 = (uintp *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      uintp_assign(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_uintp_value(void * jarg1) {
  unsigned int jresult ;
  uintp *arg1 = (uintp *) 0 ;
  unsigned int result;

  arg1 = (uintp *)jarg1;
  {
    try {
      result = (unsigned int)uintp_value(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_uintp_cast(void * jarg1) {
  void * jresult ;
  uintp *arg1 = (uintp *) 0 ;
  unsigned int *result = 0 ;

  arg1 = (uintp *)jarg1;
  {
    try {
      result = (unsigned int *)uintp_cast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_uintp_frompointer(void * jarg1) {
  void * jresult ;
  unsigned int *arg1 = (unsigned int *) 0 ;
  uintp *result = 0 ;

  arg1 = (unsigned int *)jarg1;
  {
    try {
      result = (uintp *)uintp_frompointer(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ushortp() {
  void * jresult ;
  ushortp *result = 0 ;

  {
    try {
      result = (ushortp *)new_ushortp();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ushortp(void * jarg1) {
  ushortp *arg1 = (ushortp *) 0 ;

  arg1 = (ushortp *)jarg1;
  {
    try {
      delete_ushortp(arg1);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ushortp_assign(void * jarg1, unsigned short jarg2) {
  ushortp *arg1 = (ushortp *) 0 ;
  unsigned short arg2 ;

  arg1 = (ushortp *)jarg1;
  arg2 = (unsigned short)jarg2;
  {
    try {
      ushortp_assign(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Dali_ushortp_value(void * jarg1) {
  unsigned short jresult ;
  ushortp *arg1 = (ushortp *) 0 ;
  unsigned short result;

  arg1 = (ushortp *)jarg1;
  {
    try {
      result = (unsigned short)ushortp_value(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ushortp_cast(void * jarg1) {
  void * jresult ;
  ushortp *arg1 = (ushortp *) 0 ;
  unsigned short *result = 0 ;

  arg1 = (ushortp *)jarg1;
  {
    try {
      result = (unsigned short *)ushortp_cast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ushortp_frompointer(void * jarg1) {
  void * jresult ;
  unsigned short *arg1 = (unsigned short *) 0 ;
  ushortp *result = 0 ;

  arg1 = (unsigned short *)jarg1;
  {
    try {
      result = (ushortp *)ushortp_frompointer(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_int_to_uint(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  unsigned int result;

  arg1 = (int)jarg1;
  {
    try {
      result = (unsigned int)int_to_uint(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RefObject_Reference(void * jarg1) {
  Dali::RefObject *arg1 = (Dali::RefObject *) 0 ;

  arg1 = (Dali::RefObject *)jarg1;
  {
    try {
      (arg1)->Reference();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RefObject_Unreference(void * jarg1) {
  Dali::RefObject *arg1 = (Dali::RefObject *) 0 ;

  arg1 = (Dali::RefObject *)jarg1;
  {
    try {
      (arg1)->Unreference();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_RefObject_ReferenceCount(void * jarg1) {
  int jresult ;
  Dali::RefObject *arg1 = (Dali::RefObject *) 0 ;
  int result;

  arg1 = (Dali::RefObject *)jarg1;
  {
    try {
      result = (int)(arg1)->ReferenceCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Any__SWIG_0() {
  void * jresult ;
  Dali::Any *result = 0 ;

  {
    try {
      result = (Dali::Any *)new Dali::Any();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Any(void * jarg1) {
  Dali::Any *arg1 = (Dali::Any *) 0 ;

  arg1 = (Dali::Any *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Any_AssertAlways(char * jarg1) {
  char *arg1 = (char *) 0 ;

  arg1 = (char *)jarg1;
  {
    try {
      Dali::Any::AssertAlways((char const *)arg1);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Any__SWIG_2(void * jarg1) {
  void * jresult ;
  Dali::Any *arg1 = 0 ;
  Dali::Any *result = 0 ;

  arg1 = (Dali::Any *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Any const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Any *)new Dali::Any((Dali::Any const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Any_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Any *arg1 = (Dali::Any *) 0 ;
  Dali::Any *arg2 = 0 ;
  Dali::Any *result = 0 ;

  arg1 = (Dali::Any *)jarg1;
  arg2 = (Dali::Any *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Any const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Any *) &(arg1)->operator =((Dali::Any const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Any_GetType(void * jarg1) {
  void * jresult ;
  Dali::Any *arg1 = (Dali::Any *) 0 ;
  std::type_info *result = 0 ;

  arg1 = (Dali::Any *)jarg1;
  {
    try {
      result = (std::type_info *) &((Dali::Any const *)arg1)->GetType();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Any_Empty(void * jarg1) {
  bool jresult ;
  Dali::Any *arg1 = (Dali::Any *) 0 ;
  bool result;

  arg1 = (Dali::Any *)jarg1;
  {
    try {
      result = (bool)((Dali::Any const *)arg1)->Empty();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Any_AnyContainerBase(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::type_info *arg1 = 0 ;
  Dali::Any::CloneFunc arg2 = (Dali::Any::CloneFunc) 0 ;
  Dali::Any::DeleteFunc arg3 = (Dali::Any::DeleteFunc) 0 ;
  Dali::Any::AnyContainerBase *result = 0 ;

  arg1 = (std::type_info *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::type_info const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Any::CloneFunc)jarg2;
  arg3 = (Dali::Any::DeleteFunc)jarg3;
  {
    try {
      result = (Dali::Any::AnyContainerBase *)new Dali::Any::AnyContainerBase((std::type_info const &)*arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Any_AnyContainerBase_GetType(void * jarg1) {
  void * jresult ;
  Dali::Any::AnyContainerBase *arg1 = (Dali::Any::AnyContainerBase *) 0 ;
  std::type_info *result = 0 ;

  arg1 = (Dali::Any::AnyContainerBase *)jarg1;
  {
    try {
      result = (std::type_info *) &((Dali::Any::AnyContainerBase const *)arg1)->GetType();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Any_AnyContainerBase_mType_get(void * jarg1) {
  void * jresult ;
  Dali::Any::AnyContainerBase *arg1 = (Dali::Any::AnyContainerBase *) 0 ;
  ::std::type_info *result = 0 ;

  arg1 = (Dali::Any::AnyContainerBase *)jarg1;
  result = (::std::type_info *) &(::std::type_info const &) ((arg1)->mType);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Any_AnyContainerBase_mCloneFunc_set(void * jarg1, void * jarg2) {
  Dali::Any::AnyContainerBase *arg1 = (Dali::Any::AnyContainerBase *) 0 ;
  Dali::Any::CloneFunc arg2 = (Dali::Any::CloneFunc) 0 ;

  arg1 = (Dali::Any::AnyContainerBase *)jarg1;
  arg2 = (Dali::Any::CloneFunc)jarg2;
  if (arg1) (arg1)->mCloneFunc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Any_AnyContainerBase_mCloneFunc_get(void * jarg1) {
  void * jresult ;
  Dali::Any::AnyContainerBase *arg1 = (Dali::Any::AnyContainerBase *) 0 ;
  Dali::Any::CloneFunc result;

  arg1 = (Dali::Any::AnyContainerBase *)jarg1;
  result = (Dali::Any::CloneFunc) ((arg1)->mCloneFunc);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Any_AnyContainerBase_mDeleteFunc_set(void * jarg1, void * jarg2) {
  Dali::Any::AnyContainerBase *arg1 = (Dali::Any::AnyContainerBase *) 0 ;
  Dali::Any::DeleteFunc arg2 = (Dali::Any::DeleteFunc) 0 ;

  arg1 = (Dali::Any::AnyContainerBase *)jarg1;
  arg2 = (Dali::Any::DeleteFunc)jarg2;
  if (arg1) (arg1)->mDeleteFunc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Any_AnyContainerBase_mDeleteFunc_get(void * jarg1) {
  void * jresult ;
  Dali::Any::AnyContainerBase *arg1 = (Dali::Any::AnyContainerBase *) 0 ;
  Dali::Any::DeleteFunc result;

  arg1 = (Dali::Any::AnyContainerBase *)jarg1;
  result = (Dali::Any::DeleteFunc) ((arg1)->mDeleteFunc);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Any_AnyContainerBase(void * jarg1) {
  Dali::Any::AnyContainerBase *arg1 = (Dali::Any::AnyContainerBase *) 0 ;

  arg1 = (Dali::Any::AnyContainerBase *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Any_mContainer_set(void * jarg1, void * jarg2) {
  Dali::Any *arg1 = (Dali::Any *) 0 ;
  Dali::Any::AnyContainerBase *arg2 = (Dali::Any::AnyContainerBase *) 0 ;

  arg1 = (Dali::Any *)jarg1;
  arg2 = (Dali::Any::AnyContainerBase *)jarg2;
  if (arg1) (arg1)->mContainer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Any_mContainer_get(void * jarg1) {
  void * jresult ;
  Dali::Any *arg1 = (Dali::Any *) 0 ;
  Dali::Any::AnyContainerBase *result = 0 ;

  arg1 = (Dali::Any *)jarg1;
  result = (Dali::Any::AnyContainerBase *) ((arg1)->mContainer);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_DaliAssertMessage(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = (char *)jarg1;
  arg2 = (char *)jarg2;
  {
    try {
      Dali::DaliAssertMessage((char const *)arg1,(char const *)arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_DaliException(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  Dali::DaliException *result = 0 ;

  arg1 = (char *)jarg1;
  arg2 = (char *)jarg2;
  {
    try {
      result = (Dali::DaliException *)new Dali::DaliException((char const *)arg1,(char const *)arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_DaliException_location_set(void * jarg1, char * jarg2) {
  Dali::DaliException *arg1 = (Dali::DaliException *) 0 ;
  std::string arg2 = std::string(jarg2);

  arg1 = (Dali::DaliException *)jarg1;
  {
    if (!arg2.empty()) {
      ((char *)(arg1->location))[arg2.copy((char*)(arg1->location), strlen(arg1->location)-1)] = '\0';
    } else {
      arg1->location = 0;
    }
  }
}

SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_DaliException_location_get(void * jarg1) {
  char * jresult ;
  Dali::DaliException *arg1 = (Dali::DaliException *) 0 ;
  char *result = 0 ;

  arg1 = (Dali::DaliException *)jarg1;
  result = (char *) ((arg1)->location);
  jresult = SWIG_csharp_string_callback((const char *)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_DaliException_condition_set(void * jarg1, char * jarg2) {
  Dali::DaliException *arg1 = (Dali::DaliException *) 0 ;
  std::string arg2 = std::string(jarg2);

  arg1 = (Dali::DaliException *)jarg1;
  {
    if (!arg2.empty()) {
      ((char *)(arg1->condition))[arg2.copy((char*)(arg1->condition), strlen(arg1->condition)-1)] = '\0';
    } else {
      arg1->condition = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_DaliException_condition_get(void * jarg1) {
  char * jresult ;
  Dali::DaliException *arg1 = (Dali::DaliException *) 0 ;
  char *result = 0 ;

  arg1 = (Dali::DaliException *)jarg1;
  result = (char *) ((arg1)->condition);
  jresult = SWIG_csharp_string_callback((const char *)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_DaliException(void * jarg1) {
  Dali::DaliException *arg1 = (Dali::DaliException *) 0 ;

  arg1 = (Dali::DaliException *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Vector2__SWIG_0() {
  void * jresult ;
  Dali::Vector2 *result = 0 ;

  {
    try {
      result = (Dali::Vector2 *)new Dali::Vector2();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Vector2__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (Dali::Vector2 *)new Dali::Vector2(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Vector2__SWIG_2(float* jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Dali::Vector2 *result = 0 ;

  arg1 = jarg1;
  {
    try {
      result = (Dali::Vector2 *)new Dali::Vector2((float const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;


  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Vector2__SWIG_3(void * jarg1) {
  void * jresult ;
  Dali::Vector3 *arg1 = 0 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector2 *)new Dali::Vector2((Dali::Vector3 const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Vector2__SWIG_4(void * jarg1) {
  void * jresult ;
  Dali::Vector4 *arg1 = 0 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector2 *)new Dali::Vector2((Dali::Vector4 const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_ONE_get() {
  void * jresult ;
  Dali::Vector2 *result = 0 ;

  result = (Dali::Vector2 *)&Dali::Vector2::ONE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_XAXIS_get() {
  void * jresult ;
  Dali::Vector2 *result = 0 ;

  result = (Dali::Vector2 *)&Dali::Vector2::XAXIS;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_YAXIS_get() {
  void * jresult ;
  Dali::Vector2 *result = 0 ;

  result = (Dali::Vector2 *)&Dali::Vector2::YAXIS;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_NEGATIVE_XAXIS_get() {
  void * jresult ;
  Dali::Vector2 *result = 0 ;

  result = (Dali::Vector2 *)&Dali::Vector2::NEGATIVE_XAXIS;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_NEGATIVE_YAXIS_get() {
  void * jresult ;
  Dali::Vector2 *result = 0 ;

  result = (Dali::Vector2 *)&Dali::Vector2::NEGATIVE_YAXIS;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_ZERO_get() {
  void * jresult ;
  Dali::Vector2 *result = 0 ;

  result = (Dali::Vector2 *)&Dali::Vector2::ZERO;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_Assign__SWIG_0(void * jarg1, float* jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  float *arg2 = (float *) 0 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = jarg2;
  {
    try {
      result = (Dali::Vector2 *) &(arg1)->operator =((float const *)arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;


  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_Assign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector2 *) &(arg1)->operator =((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_Assign__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector2 *) &(arg1)->operator =((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Vector2 const *)arg1)->operator +((Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_AddAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector2 *) &(arg1)->operator +=((Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_Subtract__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Vector2 const *)arg1)->operator -((Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_SubtractAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector2 *) &(arg1)->operator -=((Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_Multiply__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Vector2 const *)arg1)->operator *((Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_Multiply__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  float arg2 ;
  Dali::Vector2 result;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = ((Dali::Vector2 const *)arg1)->operator *(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_MultiplyAssign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector2 *) &(arg1)->operator *=((Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_MultiplyAssign__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  float arg2 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (Dali::Vector2 *) &(arg1)->operator *=(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_Divide__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Vector2 const *)arg1)->operator /((Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_Divide__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  float arg2 ;
  Dali::Vector2 result;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = ((Dali::Vector2 const *)arg1)->operator /(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_DivideAssign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector2 *) &(arg1)->operator /=((Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_DivideAssign__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  float arg2 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (Dali::Vector2 *) &(arg1)->operator /=(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_Subtract__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::Vector2 *)jarg1;
  {
    try {
      result = ((Dali::Vector2 const *)arg1)->operator -();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Vector2_EqualTo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Vector2 const *)arg1)->operator ==((Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Vector2_NotEqualTo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Vector2 const *)arg1)->operator !=((Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector2_ValueOfIndex__SWIG_0(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  unsigned int arg2 ;
  float *result = 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (float *) &((Dali::Vector2 const *)arg1)->operator [](arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = *result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector2_Length(void * jarg1) {
  float jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  float result;

  arg1 = (Dali::Vector2 *)jarg1;
  {
    try {
      result = (float)((Dali::Vector2 const *)arg1)->Length();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector2_LengthSquared(void * jarg1) {
  float jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  float result;

  arg1 = (Dali::Vector2 *)jarg1;
  {
    try {
      result = (float)((Dali::Vector2 const *)arg1)->LengthSquared();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector2_Normalize(void * jarg1) {
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  {
    try {
      (arg1)->Normalize();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector2_Clamp(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::Vector2 *arg3 = 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  arg3 = (Dali::Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Clamp((Dali::Vector2 const &)*arg2,(Dali::Vector2 const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector2_AsFloat__SWIG_0(void * jarg1) {
  void * jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  float *result = 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  {
    try {
      result = (float *)((Dali::Vector2 const *)arg1)->AsFloat();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector2_X_set(void * jarg1, float jarg2) {
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector2_X_get(void * jarg1) {
  float jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  float result;

  arg1 = (Dali::Vector2 *)jarg1;
  result = (float) ((arg1)->x);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector2_Width_set(void * jarg1, float jarg2) {
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector2_Width_get(void * jarg1) {
  float jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  float result;

  arg1 = (Dali::Vector2 *)jarg1;
  result = (float) ((arg1)->width);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector2_Y_set(void * jarg1, float jarg2) {
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector2_Y_get(void * jarg1) {
  float jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  float result;

  arg1 = (Dali::Vector2 *)jarg1;
  result = (float) ((arg1)->y);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector2_Height_set(void * jarg1, float jarg2) {
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector2 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector2_Height_get(void * jarg1) {
  float jresult ;
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;
  float result;

  arg1 = (Dali::Vector2 *)jarg1;
  result = (float) ((arg1)->height);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Vector2(void * jarg1) {
  Dali::Vector2 *arg1 = (Dali::Vector2 *) 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Min__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::Vector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = Dali::Min((Dali::Vector2 const &)*arg1,(Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Max__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::Vector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = Dali::Max((Dali::Vector2 const &)*arg1,(Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Clamp__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Dali::Vector2 *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  float temp3 ;
  Dali::Vector2 result;

  arg1 = (Dali::Vector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  temp2 = (float)jarg2;
  arg2 = &temp2;
  temp3 = (float)jarg3;
  arg3 = &temp3;
  {
    try {
      result = Dali::Clamp((Dali::Vector2 const &)*arg1,(float const &)*arg2,(float const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Vector3__SWIG_0() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  {
    try {
      result = (Dali::Vector3 *)new Dali::Vector3();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Vector3__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Dali::Vector3 *result = 0 ;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      result = (Dali::Vector3 *)new Dali::Vector3(arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Vector3__SWIG_2(float* jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Dali::Vector3 *result = 0 ;

  arg1 = jarg1;
  {
    try {
      result = (Dali::Vector3 *)new Dali::Vector3((float const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;


  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Vector3__SWIG_3(void * jarg1) {
  void * jresult ;
  Dali::Vector2 *arg1 = 0 ;
  Dali::Vector3 *result = 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector3 *)new Dali::Vector3((Dali::Vector2 const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Vector3__SWIG_4(void * jarg1) {
  void * jresult ;
  Dali::Vector4 *arg1 = 0 ;
  Dali::Vector3 *result = 0 ;

  arg1 = (Dali::Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector3 *)new Dali::Vector3((Dali::Vector4 const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_ONE_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::Vector3::ONE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_XAXIS_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::Vector3::XAXIS;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_YAXIS_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::Vector3::YAXIS;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_ZAXIS_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::Vector3::ZAXIS;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_NEGATIVE_XAXIS_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::Vector3::NEGATIVE_XAXIS;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_NEGATIVE_YAXIS_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::Vector3::NEGATIVE_YAXIS;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_NEGATIVE_ZAXIS_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::Vector3::NEGATIVE_ZAXIS;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_ZERO_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::Vector3::ZERO;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_Assign__SWIG_0(void * jarg1, float* jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float *arg2 = (float *) 0 ;
  Dali::Vector3 *result = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = jarg2;
  {
    try {
      result = (Dali::Vector3 *) &(arg1)->operator =((float const *)arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;


  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_Assign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::Vector3 *result = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector3 *) &(arg1)->operator =((Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_Assign__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  Dali::Vector3 *result = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector3 *) &(arg1)->operator =((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Vector3 const *)arg1)->operator +((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_AddAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Vector3 *result = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector3 *) &(arg1)->operator +=((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_Subtract__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Vector3 const *)arg1)->operator -((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_SubtractAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Vector3 *result = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector3 *) &(arg1)->operator -=((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_Multiply__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Vector3 const *)arg1)->operator *((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_Multiply__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float arg2 ;
  Dali::Vector3 result;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = ((Dali::Vector3 const *)arg1)->operator *(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_MultiplyAssign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Vector3 *result = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector3 *) &(arg1)->operator *=((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_MultiplyAssign__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float arg2 ;
  Dali::Vector3 *result = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (Dali::Vector3 *) &(arg1)->operator *=(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_MultiplyAssign__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Quaternion *arg2 = 0 ;
  Dali::Vector3 *result = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector3 *) &(arg1)->operator *=((Dali::Quaternion const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_Divide__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Vector3 const *)arg1)->operator /((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_Divide__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float arg2 ;
  Dali::Vector3 result;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = ((Dali::Vector3 const *)arg1)->operator /(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_DivideAssign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Vector3 *result = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector3 *) &(arg1)->operator /=((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_DivideAssign__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float arg2 ;
  Dali::Vector3 *result = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (Dali::Vector3 *) &(arg1)->operator /=(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_Subtract__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Vector3 *)jarg1;
  {
    try {
      result = ((Dali::Vector3 const *)arg1)->operator -();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Vector3_EqualTo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Vector3 const *)arg1)->operator ==((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Vector3_NotEqualTo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Vector3 const *)arg1)->operator !=((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector3_ValueOfIndex__SWIG_0(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  unsigned int arg2 ;
  float *result = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (float *) &((Dali::Vector3 const *)arg1)->operator [](arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = *result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector3_Dot(void * jarg1, void * jarg2) {
  float jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  float result;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (float)((Dali::Vector3 const *)arg1)->Dot((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_Cross(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Vector3 const *)arg1)->Cross((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector3_Length(void * jarg1) {
  float jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float result;

  arg1 = (Dali::Vector3 *)jarg1;
  {
    try {
      result = (float)((Dali::Vector3 const *)arg1)->Length();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector3_LengthSquared(void * jarg1) {
  float jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float result;

  arg1 = (Dali::Vector3 *)jarg1;
  {
    try {
      result = (float)((Dali::Vector3 const *)arg1)->LengthSquared();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector3_Normalize(void * jarg1) {
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  {
    try {
      (arg1)->Normalize();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector3_Clamp(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Vector3 *arg3 = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  arg3 = (Dali::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Clamp((Dali::Vector3 const &)*arg2,(Dali::Vector3 const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_AsFloat__SWIG_0(void * jarg1) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float *result = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  {
    try {
      result = (float *)((Dali::Vector3 const *)arg1)->AsFloat();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_GetVectorXY__SWIG_0(void * jarg1) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  {
    try {
      result = (Dali::Vector2 *) &((Dali::Vector3 const *)arg1)->GetVectorXY();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector3_GetVectorYZ__SWIG_0(void * jarg1) {
  void * jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  {
    try {
      result = (Dali::Vector2 *) &((Dali::Vector3 const *)arg1)->GetVectorYZ();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector3_X_set(void * jarg1, float jarg2) {
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector3_X_get(void * jarg1) {
  float jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float result;

  arg1 = (Dali::Vector3 *)jarg1;
  result = (float) ((arg1)->x);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector3_Width_set(void * jarg1, float jarg2) {
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector3_Width_get(void * jarg1) {
  float jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float result;

  arg1 = (Dali::Vector3 *)jarg1;
  result = (float) ((arg1)->width);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector3_r_set(void * jarg1, float jarg2) {
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector3_r_get(void * jarg1) {
  float jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float result;

  arg1 = (Dali::Vector3 *)jarg1;
  result = (float) ((arg1)->r);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector3_Y_set(void * jarg1, float jarg2) {
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector3_Y_get(void * jarg1) {
  float jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float result;

  arg1 = (Dali::Vector3 *)jarg1;
  result = (float) ((arg1)->y);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector3_Height_set(void * jarg1, float jarg2) {
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector3_Height_get(void * jarg1) {
  float jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float result;

  arg1 = (Dali::Vector3 *)jarg1;
  result = (float) ((arg1)->height);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector3_g_set(void * jarg1, float jarg2) {
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector3_g_get(void * jarg1) {
  float jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float result;

  arg1 = (Dali::Vector3 *)jarg1;
  result = (float) ((arg1)->g);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector3_Z_set(void * jarg1, float jarg2) {
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector3_Z_get(void * jarg1) {
  float jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float result;

  arg1 = (Dali::Vector3 *)jarg1;
  result = (float) ((arg1)->z);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector3_Depth_set(void * jarg1, float jarg2) {
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->depth = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector3_Depth_get(void * jarg1) {
  float jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float result;

  arg1 = (Dali::Vector3 *)jarg1;
  result = (float) ((arg1)->depth);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector3_b_set(void * jarg1, float jarg2) {
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector3 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector3_b_get(void * jarg1) {
  float jresult ;
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;
  float result;

  arg1 = (Dali::Vector3 *)jarg1;
  result = (float) ((arg1)->b);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Vector3(void * jarg1) {
  Dali::Vector3 *arg1 = (Dali::Vector3 *) 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Min__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = Dali::Min((Dali::Vector3 const &)*arg1,(Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Max__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector3 *arg1 = 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = Dali::Max((Dali::Vector3 const &)*arg1,(Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Clamp__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Dali::Vector3 *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  float temp3 ;
  Dali::Vector3 result;

  arg1 = (Dali::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  temp2 = (float)jarg2;
  arg2 = &temp2;
  temp3 = (float)jarg3;
  arg3 = &temp3;
  {
    try {
      result = Dali::Clamp((Dali::Vector3 const &)*arg1,(float const &)*arg2,(float const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Vector4__SWIG_0() {
  void * jresult ;
  Dali::Vector4 *result = 0 ;

  {
    try {
      result = (Dali::Vector4 *)new Dali::Vector4();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Vector4__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Dali::Vector4 *result = 0 ;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  {
    try {
      result = (Dali::Vector4 *)new Dali::Vector4(arg1,arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Vector4__SWIG_2(float* jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Dali::Vector4 *result = 0 ;

  arg1 = jarg1;
  {
    try {
      result = (Dali::Vector4 *)new Dali::Vector4((float const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;


  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Vector4__SWIG_3(void * jarg1) {
  void * jresult ;
  Dali::Vector2 *arg1 = 0 ;
  Dali::Vector4 *result = 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector4 *)new Dali::Vector4((Dali::Vector2 const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Vector4__SWIG_4(void * jarg1) {
  void * jresult ;
  Dali::Vector3 *arg1 = 0 ;
  Dali::Vector4 *result = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector4 *)new Dali::Vector4((Dali::Vector3 const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_ONE_get() {
  void * jresult ;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Vector4::ONE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_XAXIS_get() {
  void * jresult ;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Vector4::XAXIS;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_YAXIS_get() {
  void * jresult ;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Vector4::YAXIS;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_ZAXIS_get() {
  void * jresult ;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Vector4::ZAXIS;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_ZERO_get() {
  void * jresult ;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Vector4::ZERO;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_Assign__SWIG_0(void * jarg1, float* jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float *arg2 = (float *) 0 ;
  Dali::Vector4 *result = 0 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = jarg2;
  {
    try {
      result = (Dali::Vector4 *) &(arg1)->operator =((float const *)arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;


  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_Assign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::Vector4 *result = 0 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector4 *) &(arg1)->operator =((Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_Assign__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Vector4 *result = 0 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector4 *) &(arg1)->operator =((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  Dali::Vector4 result;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Vector4 const *)arg1)->operator +((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_AddAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  Dali::Vector4 *result = 0 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector4 *) &(arg1)->operator +=((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_Subtract__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  Dali::Vector4 result;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Vector4 const *)arg1)->operator -((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_SubtractAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  Dali::Vector4 *result = 0 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector4 *) &(arg1)->operator -=((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_Multiply__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  Dali::Vector4 result;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Vector4 const *)arg1)->operator *((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_Multiply__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float arg2 ;
  Dali::Vector4 result;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = ((Dali::Vector4 const *)arg1)->operator *(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_MultiplyAssign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  Dali::Vector4 *result = 0 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector4 *) &(arg1)->operator *=((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_MultiplyAssign__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float arg2 ;
  Dali::Vector4 *result = 0 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (Dali::Vector4 *) &(arg1)->operator *=(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_Divide__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  Dali::Vector4 result;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Vector4 const *)arg1)->operator /((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_Divide__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float arg2 ;
  Dali::Vector4 result;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = ((Dali::Vector4 const *)arg1)->operator /(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_DivideAssign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  Dali::Vector4 *result = 0 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector4 *) &(arg1)->operator /=((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_DivideAssign__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float arg2 ;
  Dali::Vector4 *result = 0 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (Dali::Vector4 *) &(arg1)->operator /=(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_Subtract__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector4 result;

  arg1 = (Dali::Vector4 *)jarg1;
  {
    try {
      result = ((Dali::Vector4 const *)arg1)->operator -();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Vector4_EqualTo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Vector4 const *)arg1)->operator ==((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Vector4_NotEqualTo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Vector4 const *)arg1)->operator !=((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_ValueOfIndex__SWIG_0(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  unsigned int arg2 ;
  float *result = 0 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (float *) &((Dali::Vector4 const *)arg1)->operator [](arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = *result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_Dot__SWIG_0(void * jarg1, void * jarg2) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  float result;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (float)((Dali::Vector4 const *)arg1)->Dot((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_Dot__SWIG_1(void * jarg1, void * jarg2) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  float result;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (float)((Dali::Vector4 const *)arg1)->Dot((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_Dot4(void * jarg1, void * jarg2) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  float result;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (float)((Dali::Vector4 const *)arg1)->Dot4((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_Cross(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  Dali::Vector4 result;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Vector4 const *)arg1)->Cross((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_Length(void * jarg1) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float result;

  arg1 = (Dali::Vector4 *)jarg1;
  {
    try {
      result = (float)((Dali::Vector4 const *)arg1)->Length();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_LengthSquared(void * jarg1) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float result;

  arg1 = (Dali::Vector4 *)jarg1;
  {
    try {
      result = (float)((Dali::Vector4 const *)arg1)->LengthSquared();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector4_Normalize(void * jarg1) {
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;

  arg1 = (Dali::Vector4 *)jarg1;
  {
    try {
      (arg1)->Normalize();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector4_Clamp(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  Dali::Vector4 *arg3 = 0 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return ;
  }
  arg3 = (Dali::Vector4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Clamp((Dali::Vector4 const &)*arg2,(Dali::Vector4 const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Vector4_AsFloat__SWIG_0(void * jarg1) {
  void * jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float *result = 0 ;

  arg1 = (Dali::Vector4 *)jarg1;
  {
    try {
      result = (float *)((Dali::Vector4 const *)arg1)->AsFloat();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector4_X_set(void * jarg1, float jarg2) {
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_X_get(void * jarg1) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float result;

  arg1 = (Dali::Vector4 *)jarg1;
  result = (float) ((arg1)->x);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector4_r_set(void * jarg1, float jarg2) {
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_r_get(void * jarg1) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float result;

  arg1 = (Dali::Vector4 *)jarg1;
  result = (float) ((arg1)->r);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector4_s_set(void * jarg1, float jarg2) {
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->s = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_s_get(void * jarg1) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float result;

  arg1 = (Dali::Vector4 *)jarg1;
  result = (float) ((arg1)->s);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector4_Y_set(void * jarg1, float jarg2) {
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_Y_get(void * jarg1) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float result;

  arg1 = (Dali::Vector4 *)jarg1;
  result = (float) ((arg1)->y);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector4_g_set(void * jarg1, float jarg2) {
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_g_get(void * jarg1) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float result;

  arg1 = (Dali::Vector4 *)jarg1;
  result = (float) ((arg1)->g);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector4_t_set(void * jarg1, float jarg2) {
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->t = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_t_get(void * jarg1) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float result;

  arg1 = (Dali::Vector4 *)jarg1;
  result = (float) ((arg1)->t);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector4_Z_set(void * jarg1, float jarg2) {
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_Z_get(void * jarg1) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float result;

  arg1 = (Dali::Vector4 *)jarg1;
  result = (float) ((arg1)->z);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector4_b_set(void * jarg1, float jarg2) {
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_b_get(void * jarg1) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float result;

  arg1 = (Dali::Vector4 *)jarg1;
  result = (float) ((arg1)->b);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector4_p_set(void * jarg1, float jarg2) {
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->p = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_p_get(void * jarg1) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float result;

  arg1 = (Dali::Vector4 *)jarg1;
  result = (float) ((arg1)->p);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector4_W_set(void * jarg1, float jarg2) {
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_W_get(void * jarg1) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float result;

  arg1 = (Dali::Vector4 *)jarg1;
  result = (float) ((arg1)->w);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector4_a_set(void * jarg1, float jarg2) {
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_a_get(void * jarg1) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float result;

  arg1 = (Dali::Vector4 *)jarg1;
  result = (float) ((arg1)->a);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Vector4_q_set(void * jarg1, float jarg2) {
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Vector4 *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->q = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Vector4_q_get(void * jarg1) {
  float jresult ;
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;
  float result;

  arg1 = (Dali::Vector4 *)jarg1;
  result = (float) ((arg1)->q);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Vector4(void * jarg1) {
  Dali::Vector4 *arg1 = (Dali::Vector4 *) 0 ;

  arg1 = (Dali::Vector4 *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Min__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = 0 ;
  Dali::Vector4 *arg2 = 0 ;
  Dali::Vector4 result;

  arg1 = (Dali::Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = Dali::Min((Dali::Vector4 const &)*arg1,(Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Max__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector4 *arg1 = 0 ;
  Dali::Vector4 *arg2 = 0 ;
  Dali::Vector4 result;

  arg1 = (Dali::Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = Dali::Max((Dali::Vector4 const &)*arg1,(Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Clamp__SWIG_2(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Dali::Vector4 *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  float temp3 ;
  Dali::Vector4 result;

  arg1 = (Dali::Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  temp2 = (float)jarg2;
  arg2 = &temp2;
  temp3 = (float)jarg3;
  arg3 = &temp3;
  {
    try {
      result = Dali::Clamp((Dali::Vector4 const &)*arg1,(float const &)*arg2,(float const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Uint16Pair__SWIG_0() {
  void * jresult ;
  Dali::Uint16Pair *result = 0 ;

  {
    try {
      result = (Dali::Uint16Pair *)new Dali::Uint16Pair();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Uint16Pair__SWIG_1(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  uint32_t arg1 ;
  uint32_t arg2 ;
  Dali::Uint16Pair *result = 0 ;

  arg1 = (uint32_t)jarg1;
  arg2 = (uint32_t)jarg2;
  {
    try {
      result = (Dali::Uint16Pair *)new Dali::Uint16Pair(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Uint16Pair__SWIG_2(void * jarg1) {
  void * jresult ;
  Dali::Uint16Pair *arg1 = 0 ;
  Dali::Uint16Pair *result = 0 ;

  arg1 = (Dali::Uint16Pair *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Uint16Pair const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Uint16Pair *)new Dali::Uint16Pair((Dali::Uint16Pair const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Uint16Pair_SetWidth(void * jarg1, unsigned short jarg2) {
  Dali::Uint16Pair *arg1 = (Dali::Uint16Pair *) 0 ;
  uint16_t arg2 ;

  arg1 = (Dali::Uint16Pair *)jarg1;
  arg2 = (uint16_t)jarg2;
  {
    try {
      (arg1)->SetWidth(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Dali_Uint16Pair_GetWidth(void * jarg1) {
  unsigned short jresult ;
  Dali::Uint16Pair *arg1 = (Dali::Uint16Pair *) 0 ;
  uint16_t result;

  arg1 = (Dali::Uint16Pair *)jarg1;
  {
    try {
      result = ((Dali::Uint16Pair const *)arg1)->GetWidth();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Uint16Pair_SetHeight(void * jarg1, unsigned short jarg2) {
  Dali::Uint16Pair *arg1 = (Dali::Uint16Pair *) 0 ;
  uint16_t arg2 ;

  arg1 = (Dali::Uint16Pair *)jarg1;
  arg2 = (uint16_t)jarg2;
  {
    try {
      (arg1)->SetHeight(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Dali_Uint16Pair_GetHeight(void * jarg1) {
  unsigned short jresult ;
  Dali::Uint16Pair *arg1 = (Dali::Uint16Pair *) 0 ;
  uint16_t result;

  arg1 = (Dali::Uint16Pair *)jarg1;
  {
    try {
      result = ((Dali::Uint16Pair const *)arg1)->GetHeight();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Uint16Pair_SetX(void * jarg1, unsigned short jarg2) {
  Dali::Uint16Pair *arg1 = (Dali::Uint16Pair *) 0 ;
  uint16_t arg2 ;

  arg1 = (Dali::Uint16Pair *)jarg1;
  arg2 = (uint16_t)jarg2;
  {
    try {
      (arg1)->SetX(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Dali_Uint16Pair_GetX(void * jarg1) {
  unsigned short jresult ;
  Dali::Uint16Pair *arg1 = (Dali::Uint16Pair *) 0 ;
  uint16_t result;

  arg1 = (Dali::Uint16Pair *)jarg1;
  {
    try {
      result = ((Dali::Uint16Pair const *)arg1)->GetX();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Uint16Pair_SetY(void * jarg1, unsigned short jarg2) {
  Dali::Uint16Pair *arg1 = (Dali::Uint16Pair *) 0 ;
  uint16_t arg2 ;

  arg1 = (Dali::Uint16Pair *)jarg1;
  arg2 = (uint16_t)jarg2;
  {
    try {
      (arg1)->SetY(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Dali_Uint16Pair_GetY(void * jarg1) {
  unsigned short jresult ;
  Dali::Uint16Pair *arg1 = (Dali::Uint16Pair *) 0 ;
  uint16_t result;

  arg1 = (Dali::Uint16Pair *)jarg1;
  {
    try {
      result = ((Dali::Uint16Pair const *)arg1)->GetY();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Uint16Pair_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Uint16Pair *arg1 = (Dali::Uint16Pair *) 0 ;
  Dali::Uint16Pair *arg2 = 0 ;
  Dali::Uint16Pair *result = 0 ;

  arg1 = (Dali::Uint16Pair *)jarg1;
  arg2 = (Dali::Uint16Pair *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Uint16Pair const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Uint16Pair *) &(arg1)->operator =((Dali::Uint16Pair const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Uint16Pair_EqualTo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Uint16Pair *arg1 = (Dali::Uint16Pair *) 0 ;
  Dali::Uint16Pair *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Uint16Pair *)jarg1;
  arg2 = (Dali::Uint16Pair *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Uint16Pair const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Uint16Pair const *)arg1)->operator ==((Dali::Uint16Pair const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Uint16Pair_NotEqualTo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Uint16Pair *arg1 = (Dali::Uint16Pair *) 0 ;
  Dali::Uint16Pair *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Uint16Pair *)jarg1;
  arg2 = (Dali::Uint16Pair *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Uint16Pair const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Uint16Pair const *)arg1)->operator !=((Dali::Uint16Pair const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Uint16Pair_LessThan(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Uint16Pair *arg1 = (Dali::Uint16Pair *) 0 ;
  Dali::Uint16Pair *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Uint16Pair *)jarg1;
  arg2 = (Dali::Uint16Pair *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Uint16Pair const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Uint16Pair const *)arg1)->operator <((Dali::Uint16Pair const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Uint16Pair_GreaterThan(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Uint16Pair *arg1 = (Dali::Uint16Pair *) 0 ;
  Dali::Uint16Pair *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Uint16Pair *)jarg1;
  arg2 = (Dali::Uint16Pair *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Uint16Pair const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Uint16Pair const *)arg1)->operator >((Dali::Uint16Pair const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Uint16Pair(void * jarg1) {
  Dali::Uint16Pair *arg1 = (Dali::Uint16Pair *) 0 ;

  arg1 = (Dali::Uint16Pair *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Degree__SWIG_0() {
  void * jresult ;
  Dali::Degree *result = 0 ;

  {
    try {
      result = (Dali::Degree *)new Dali::Degree();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Degree__SWIG_1(float jarg1) {
  void * jresult ;
  float arg1 ;
  Dali::Degree *result = 0 ;

  arg1 = (float)jarg1;
  {
    try {
      result = (Dali::Degree *)new Dali::Degree(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Degree__SWIG_2(void * jarg1) {
  void * jresult ;
  Dali::Radian arg1 ;
  Dali::Radian *argp1 ;
  Dali::Degree *result = 0 ;

  argp1 = (Dali::Radian *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = (Dali::Degree *)new Dali::Degree(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Degree_degree_set(void * jarg1, float jarg2) {
  Dali::Degree *arg1 = (Dali::Degree *) 0 ;
  float arg2 ;

  arg1 = (Dali::Degree *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->degree = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Degree_degree_get(void * jarg1) {
  float jresult ;
  Dali::Degree *arg1 = (Dali::Degree *) 0 ;
  float result;

  arg1 = (Dali::Degree *)jarg1;
  result = (float) ((arg1)->degree);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Degree(void * jarg1) {
  Dali::Degree *arg1 = (Dali::Degree *) 0 ;

  arg1 = (Dali::Degree *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ANGLE_360_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::ANGLE_360;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ANGLE_315_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::ANGLE_315;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ANGLE_270_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::ANGLE_270;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ANGLE_225_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::ANGLE_225;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ANGLE_180_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::ANGLE_180;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ANGLE_135_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::ANGLE_135;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ANGLE_120_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::ANGLE_120;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ANGLE_90_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::ANGLE_90;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ANGLE_60_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::ANGLE_60;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ANGLE_45_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::ANGLE_45;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ANGLE_30_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::ANGLE_30;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ANGLE_0_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::ANGLE_0;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_EqualTo__SWIG_5(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Degree *arg1 = 0 ;
  Dali::Degree *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Degree *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Degree const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Degree *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Degree const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)Dali::operator ==((Dali::Degree const &)*arg1,(Dali::Degree const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_NotEqualTo__SWIG_4(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Degree *arg1 = 0 ;
  Dali::Degree *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Degree *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Degree const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Degree *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Degree const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)Dali::operator !=((Dali::Degree const &)*arg1,(Dali::Degree const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Clamp__SWIG_3(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Dali::Degree arg1 ;
  float arg2 ;
  float arg3 ;
  Dali::Degree *argp1 ;
  Dali::Degree result;

  argp1 = (Dali::Degree *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Degree", 0);
    return 0;
  }
  arg1 = *argp1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      result = Dali::Clamp(arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Degree((const Dali::Degree &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Radian__SWIG_0() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  {
    try {
      result = (Dali::Radian *)new Dali::Radian();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Radian__SWIG_1(float jarg1) {
  void * jresult ;
  float arg1 ;
  Dali::Radian *result = 0 ;

  arg1 = (float)jarg1;
  {
    try {
      result = (Dali::Radian *)new Dali::Radian(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Radian__SWIG_2(void * jarg1) {
  void * jresult ;
  Dali::Degree arg1 ;
  Dali::Degree *argp1 ;
  Dali::Radian *result = 0 ;

  argp1 = (Dali::Degree *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Degree", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = (Dali::Radian *)new Dali::Radian(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Radian_Assign__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Radian *arg1 = (Dali::Radian *) 0 ;
  float arg2 ;
  Dali::Radian *result = 0 ;

  arg1 = (Dali::Radian *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (Dali::Radian *) &(arg1)->operator =(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Radian_Assign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Radian *arg1 = (Dali::Radian *) 0 ;
  Dali::Degree arg2 ;
  Dali::Degree *argp2 ;
  Dali::Radian *result = 0 ;

  arg1 = (Dali::Radian *)jarg1;
  argp2 = (Dali::Degree *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Degree", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (Dali::Radian *) &(arg1)->operator =(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Radian_ConvertToFloat(void * jarg1) {
  float jresult ;
  Dali::Radian *arg1 = (Dali::Radian *) 0 ;
  float result;

  arg1 = (Dali::Radian *)jarg1;
  {
    try {
      result = (float)((Dali::Radian const *)arg1)->operator float();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Radian_radian_set(void * jarg1, float jarg2) {
  Dali::Radian *arg1 = (Dali::Radian *) 0 ;
  float arg2 ;

  arg1 = (Dali::Radian *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->radian = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Radian_radian_get(void * jarg1) {
  float jresult ;
  Dali::Radian *arg1 = (Dali::Radian *) 0 ;
  float result;

  arg1 = (Dali::Radian *)jarg1;
  result = (float) ((arg1)->radian);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Radian(void * jarg1) {
  Dali::Radian *arg1 = (Dali::Radian *) 0 ;

  arg1 = (Dali::Radian *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_EqualTo__SWIG_6(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Radian arg1 ;
  Dali::Radian arg2 ;
  Dali::Radian *argp1 ;
  Dali::Radian *argp2 ;
  bool result;

  argp1 = (Dali::Radian *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg1 = *argp1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)Dali::operator ==(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_NotEqualTo__SWIG_5(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Radian arg1 ;
  Dali::Radian arg2 ;
  Dali::Radian *argp1 ;
  Dali::Radian *argp2 ;
  bool result;

  argp1 = (Dali::Radian *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg1 = *argp1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)Dali::operator !=(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_EqualTo__SWIG_7(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Radian arg1 ;
  Dali::Degree arg2 ;
  Dali::Radian *argp1 ;
  Dali::Degree *argp2 ;
  bool result;

  argp1 = (Dali::Radian *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg1 = *argp1;
  argp2 = (Dali::Degree *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Degree", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)Dali::operator ==(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_NotEqualTo__SWIG_6(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Radian arg1 ;
  Dali::Degree arg2 ;
  Dali::Radian *argp1 ;
  Dali::Degree *argp2 ;
  bool result;

  argp1 = (Dali::Radian *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg1 = *argp1;
  argp2 = (Dali::Degree *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Degree", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)Dali::operator !=(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_EqualTo__SWIG_8(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Degree arg1 ;
  Dali::Radian arg2 ;
  Dali::Degree *argp1 ;
  Dali::Radian *argp2 ;
  bool result;

  argp1 = (Dali::Degree *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Degree", 0);
    return 0;
  }
  arg1 = *argp1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)Dali::operator ==(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_NotEqualTo__SWIG_7(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Degree arg1 ;
  Dali::Radian arg2 ;
  Dali::Degree *argp1 ;
  Dali::Radian *argp2 ;
  bool result;

  argp1 = (Dali::Degree *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Degree", 0);
    return 0;
  }
  arg1 = *argp1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)Dali::operator !=(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_GreaterThan__SWIG_0(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Radian arg1 ;
  Dali::Radian arg2 ;
  Dali::Radian *argp1 ;
  Dali::Radian *argp2 ;
  bool result;

  argp1 = (Dali::Radian *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg1 = *argp1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)Dali::operator >(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_GreaterThan__SWIG_1(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Radian arg1 ;
  Dali::Degree arg2 ;
  Dali::Radian *argp1 ;
  Dali::Degree *argp2 ;
  bool result;

  argp1 = (Dali::Radian *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg1 = *argp1;
  argp2 = (Dali::Degree *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Degree", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)Dali::operator >(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_GreaterThan__SWIG_2(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Degree arg1 ;
  Dali::Radian arg2 ;
  Dali::Degree *argp1 ;
  Dali::Radian *argp2 ;
  bool result;

  argp1 = (Dali::Degree *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Degree", 0);
    return 0;
  }
  arg1 = *argp1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)Dali::operator >(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_LessThan__SWIG_0(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Radian arg1 ;
  Dali::Radian arg2 ;
  Dali::Radian *argp1 ;
  Dali::Radian *argp2 ;
  bool result;

  argp1 = (Dali::Radian *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg1 = *argp1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)Dali::operator <(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_LessThan__SWIG_1(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Radian arg1 ;
  Dali::Degree arg2 ;
  Dali::Radian *argp1 ;
  Dali::Degree *argp2 ;
  bool result;

  argp1 = (Dali::Radian *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg1 = *argp1;
  argp2 = (Dali::Degree *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Degree", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)Dali::operator <(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_LessThan__SWIG_2(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Degree arg1 ;
  Dali::Radian arg2 ;
  Dali::Degree *argp1 ;
  Dali::Radian *argp2 ;
  bool result;

  argp1 = (Dali::Degree *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Degree", 0);
    return 0;
  }
  arg1 = *argp1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)Dali::operator <(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Multiply(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Radian arg1 ;
  float arg2 ;
  Dali::Radian *argp1 ;
  Dali::Radian result;

  argp1 = (Dali::Radian *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg1 = *argp1;
  arg2 = (float)jarg2;
  {
    try {
      result = Dali::operator *(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Radian((const Dali::Radian &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Subtract(void * jarg1) {
  void * jresult ;
  Dali::Radian arg1 ;
  Dali::Radian *argp1 ;
  Dali::Radian result;

  argp1 = (Dali::Radian *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::operator -(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Radian((const Dali::Radian &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Clamp__SWIG_4(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Dali::Radian arg1 ;
  float arg2 ;
  float arg3 ;
  Dali::Radian *argp1 ;
  Dali::Radian result;

  argp1 = (Dali::Radian *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg1 = *argp1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      result = Dali::Clamp(arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Radian((const Dali::Radian &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Rotation__SWIG_0() {
  void * jresult ;
  Dali::Quaternion *result = 0 ;

  {
    try {
      result = (Dali::Quaternion *)new Dali::Quaternion();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Rotation__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Radian arg1 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Radian *argp1 ;
  Dali::Quaternion *result = 0 ;

  argp1 = (Dali::Radian *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg1 = *argp1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Quaternion *)new Dali::Quaternion(arg1,(Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Rotation(void * jarg1) {
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;

  arg1 = (Dali::Quaternion *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_IDENTITY_get() {
  void * jresult ;
  Dali::Quaternion *result = 0 ;

  result = (Dali::Quaternion *)&Dali::Quaternion::IDENTITY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Rotation_IsIdentity(void * jarg1) {
  bool jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  bool result;

  arg1 = (Dali::Quaternion *)jarg1;
  {
    try {
      result = (bool)((Dali::Quaternion const *)arg1)->IsIdentity();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Rotation_GetAxisAngle(void * jarg1, void * jarg2, void * jarg3) {
  bool jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Radian *arg3 = 0 ;
  bool result;

  arg1 = (Dali::Quaternion *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 & type is null", 0);
    return 0;
  }
  arg3 = (Dali::Radian *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Radian & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Quaternion const *)arg1)->ToAxisAngle(*arg2,*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  Dali::Quaternion *arg2 = 0 ;
  Dali::Quaternion result;

  arg1 = (Dali::Quaternion *)jarg1;
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Quaternion const *)arg1)->operator +((Dali::Quaternion const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Quaternion((const Dali::Quaternion &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_Subtract__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  Dali::Quaternion *arg2 = 0 ;
  Dali::Quaternion result;

  arg1 = (Dali::Quaternion *)jarg1;
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Quaternion const *)arg1)->operator -((Dali::Quaternion const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Quaternion((const Dali::Quaternion &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_Multiply__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  Dali::Quaternion *arg2 = 0 ;
  Dali::Quaternion result;

  arg1 = (Dali::Quaternion *)jarg1;
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Quaternion const *)arg1)->operator *((Dali::Quaternion const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Quaternion((const Dali::Quaternion &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_Multiply__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Quaternion *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Quaternion const *)arg1)->operator *((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_Divide__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  Dali::Quaternion *arg2 = 0 ;
  Dali::Quaternion result;

  arg1 = (Dali::Quaternion *)jarg1;
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Quaternion const *)arg1)->operator /((Dali::Quaternion const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Quaternion((const Dali::Quaternion &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_Multiply__SWIG_2(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  float arg2 ;
  Dali::Quaternion result;

  arg1 = (Dali::Quaternion *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = ((Dali::Quaternion const *)arg1)->operator *(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Quaternion((const Dali::Quaternion &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_Divide__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  float arg2 ;
  Dali::Quaternion result;

  arg1 = (Dali::Quaternion *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = ((Dali::Quaternion const *)arg1)->operator /(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Quaternion((const Dali::Quaternion &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_Subtract__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  Dali::Quaternion result;

  arg1 = (Dali::Quaternion *)jarg1;
  {
    try {
      result = ((Dali::Quaternion const *)arg1)->operator -();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Quaternion((const Dali::Quaternion &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_AddAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  Dali::Quaternion *arg2 = 0 ;
  Dali::Quaternion *result = 0 ;

  arg1 = (Dali::Quaternion *)jarg1;
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Quaternion *) &(arg1)->operator +=((Dali::Quaternion const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_SubtractAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  Dali::Quaternion *arg2 = 0 ;
  Dali::Quaternion *result = 0 ;

  arg1 = (Dali::Quaternion *)jarg1;
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Quaternion *) &(arg1)->operator -=((Dali::Quaternion const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_MultiplyAssign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  Dali::Quaternion *arg2 = 0 ;
  Dali::Quaternion *result = 0 ;

  arg1 = (Dali::Quaternion *)jarg1;
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Quaternion *) &(arg1)->operator *=((Dali::Quaternion const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_MultiplyAssign__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  float arg2 ;
  Dali::Quaternion *result = 0 ;

  arg1 = (Dali::Quaternion *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (Dali::Quaternion *) &(arg1)->operator *=(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_DivideAssign(void * jarg1, float jarg2) {
  void * jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  float arg2 ;
  Dali::Quaternion *result = 0 ;

  arg1 = (Dali::Quaternion *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (Dali::Quaternion *) &(arg1)->operator /=(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Rotation_EqualTo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  Dali::Quaternion *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Quaternion *)jarg1;
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Quaternion const *)arg1)->operator ==((Dali::Quaternion const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Rotation_NotEqualTo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  Dali::Quaternion *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Quaternion *)jarg1;
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Quaternion const *)arg1)->operator !=((Dali::Quaternion const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Rotation_Length(void * jarg1) {
  float jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  float result;

  arg1 = (Dali::Quaternion *)jarg1;
  {
    try {
      result = (float)((Dali::Quaternion const *)arg1)->Length();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Rotation_LengthSquared(void * jarg1) {
  float jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  float result;

  arg1 = (Dali::Quaternion *)jarg1;
  {
    try {
      result = (float)((Dali::Quaternion const *)arg1)->LengthSquared();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Rotation_Normalize(void * jarg1) {
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;

  arg1 = (Dali::Quaternion *)jarg1;
  {
    try {
      (arg1)->Normalize();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_Normalized(void * jarg1) {
  void * jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  Dali::Quaternion result;

  arg1 = (Dali::Quaternion *)jarg1;
  {
    try {
      result = ((Dali::Quaternion const *)arg1)->Normalized();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Quaternion((const Dali::Quaternion &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Rotation_Conjugate(void * jarg1) {
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;

  arg1 = (Dali::Quaternion *)jarg1;
  {
    try {
      (arg1)->Conjugate();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Rotation_Invert(void * jarg1) {
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;

  arg1 = (Dali::Quaternion *)jarg1;
  {
    try {
      (arg1)->Invert();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_Log(void * jarg1) {
  void * jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  Dali::Quaternion result;

  arg1 = (Dali::Quaternion *)jarg1;
  {
    try {
      result = ((Dali::Quaternion const *)arg1)->Log();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Quaternion((const Dali::Quaternion &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_Exp(void * jarg1) {
  void * jresult ;
  Dali::Quaternion *arg1 = (Dali::Quaternion *) 0 ;
  Dali::Quaternion result;

  arg1 = (Dali::Quaternion *)jarg1;
  {
    try {
      result = ((Dali::Quaternion const *)arg1)->Exp();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Quaternion((const Dali::Quaternion &)result);
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Rotation_Dot(void * jarg1, void * jarg2) {
  float jresult ;
  Dali::Quaternion *arg1 = 0 ;
  Dali::Quaternion *arg2 = 0 ;
  float result;

  arg1 = (Dali::Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (float)Dali::Quaternion::Dot((Dali::Quaternion const &)*arg1,(Dali::Quaternion const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_Lerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Dali::Quaternion *arg1 = 0 ;
  Dali::Quaternion *arg2 = 0 ;
  float arg3 ;
  Dali::Quaternion result;

  arg1 = (Dali::Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  arg3 = (float)jarg3;
  {
    try {
      result = Dali::Quaternion::Lerp((Dali::Quaternion const &)*arg1,(Dali::Quaternion const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Quaternion((const Dali::Quaternion &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_Slerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Dali::Quaternion *arg1 = 0 ;
  Dali::Quaternion *arg2 = 0 ;
  float arg3 ;
  Dali::Quaternion result;

  arg1 = (Dali::Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  arg3 = (float)jarg3;
  {
    try {
      result = Dali::Quaternion::Slerp((Dali::Quaternion const &)*arg1,(Dali::Quaternion const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Quaternion((const Dali::Quaternion &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_SlerpNoInvert(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Dali::Quaternion *arg1 = 0 ;
  Dali::Quaternion *arg2 = 0 ;
  float arg3 ;
  Dali::Quaternion result;

  arg1 = (Dali::Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  arg3 = (float)jarg3;
  {
    try {
      result = Dali::Quaternion::SlerpNoInvert((Dali::Quaternion const &)*arg1,(Dali::Quaternion const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Quaternion((const Dali::Quaternion &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_Squad(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  void * jresult ;
  Dali::Quaternion *arg1 = 0 ;
  Dali::Quaternion *arg2 = 0 ;
  Dali::Quaternion *arg3 = 0 ;
  Dali::Quaternion *arg4 = 0 ;
  float arg5 ;
  Dali::Quaternion result;

  arg1 = (Dali::Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  arg3 = (Dali::Quaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  arg4 = (Dali::Quaternion *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  arg5 = (float)jarg5;
  {
    try {
      result = Dali::Quaternion::Squad((Dali::Quaternion const &)*arg1,(Dali::Quaternion const &)*arg2,(Dali::Quaternion const &)*arg3,(Dali::Quaternion const &)*arg4,arg5);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Quaternion((const Dali::Quaternion &)result);
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Rotation_AngleBetween(void * jarg1, void * jarg2) {
  float jresult ;
  Dali::Quaternion *arg1 = 0 ;
  Dali::Quaternion *arg2 = 0 ;
  float result;

  arg1 = (Dali::Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (float)Dali::Quaternion::AngleBetween((Dali::Quaternion const &)*arg1,(Dali::Quaternion const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_Rotate_Vector3(void * nuiRotation, void * nuiVector3) {
  void * jresult ;
  Dali::Quaternion *quaternion = (Dali::Quaternion *)nuiRotation;
  Dali::Vector3 *vector3 = (Dali::Vector3 *)nuiVector3;
  Vector3 result;

  if (!quaternion) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  if (!vector3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Quaternion const *)quaternion)->Rotate(*vector3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rotation_Rotate_Vector4(void * nuiRotation, void * nuiVector4) {
  void * jresult ;
  Dali::Quaternion *quaternion = (Dali::Quaternion *)nuiRotation;
  Dali::Vector4 *vector4 = (Dali::Vector4 *)nuiVector4;
  Vector3 result;

  if (!quaternion) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  if (!vector4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Quaternion const *)quaternion)->Rotate(*vector4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Matrix__SWIG_0() {
  void * jresult ;
  Dali::Matrix *result = 0 ;

  {
    try {
      result = (Dali::Matrix *)new Dali::Matrix();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Matrix__SWIG_1(bool jarg1) {
  void * jresult ;
  bool arg1 ;
  Dali::Matrix *result = 0 ;

  arg1 = jarg1 ? true : false;
  {
    try {
      result = (Dali::Matrix *)new Dali::Matrix(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Matrix__SWIG_2(float* jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Dali::Matrix *result = 0 ;

  arg1 = jarg1;
  {
    try {
      result = (Dali::Matrix *)new Dali::Matrix((float const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;


  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Matrix__SWIG_3(void * jarg1) {
  void * jresult ;
  Dali::Quaternion *arg1 = 0 ;
  Dali::Matrix *result = 0 ;

  arg1 = (Dali::Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Matrix *)new Dali::Matrix((Dali::Quaternion const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Matrix__SWIG_4(void * jarg1) {
  void * jresult ;
  Dali::Matrix *arg1 = 0 ;
  Dali::Matrix *result = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Matrix *)new Dali::Matrix((Dali::Matrix const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Matrix_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Matrix *arg2 = 0 ;
  Dali::Matrix *result = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  arg2 = (Dali::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Matrix *) &(arg1)->operator =((Dali::Matrix const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Matrix_IDENTITY_get() {
  void * jresult ;
  Dali::Matrix *result = 0 ;

  result = (Dali::Matrix *)&Dali::Matrix::IDENTITY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix_SetIdentity(void * jarg1) {
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  {
    try {
      (arg1)->SetIdentity();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix_SetIdentityAndScale(void * jarg1, void * jarg2) {
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetIdentityAndScale((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix_InvertTransform(void * jarg1, void * jarg2) {
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Matrix *arg2 = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  arg2 = (Dali::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix & type is null", 0);
    return ;
  }
  {
    try {
      ((Dali::Matrix const *)arg1)->InvertTransform(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Matrix_Invert(void * jarg1) {
  bool jresult ;
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  bool result;

  arg1 = (Dali::Matrix *)jarg1;
  {
    try {
      result = (bool)(arg1)->Invert();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix_Transpose(void * jarg1) {
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  {
    try {
      (arg1)->Transpose();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Matrix_GetXAxis(void * jarg1) {
  void * jresult ;
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Matrix *)jarg1;
  {
    try {
      result = ((Dali::Matrix const *)arg1)->GetXAxis();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Matrix_GetYAxis(void * jarg1) {
  void * jresult ;
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Matrix *)jarg1;
  {
    try {
      result = ((Dali::Matrix const *)arg1)->GetYAxis();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Matrix_GetZAxis(void * jarg1) {
  void * jresult ;
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Matrix *)jarg1;
  {
    try {
      result = ((Dali::Matrix const *)arg1)->GetZAxis();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix_SetXAxis(void * jarg1, void * jarg2) {
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetXAxis((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix_SetYAxis(void * jarg1, void * jarg2) {
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetYAxis((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix_SetZAxis(void * jarg1, void * jarg2) {
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetZAxis((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Matrix_GetTranslation(void * jarg1) {
  void * jresult ;
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Vector4 *result = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  {
    try {
      result = (Dali::Vector4 *) &((Dali::Matrix const *)arg1)->GetTranslation();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Matrix_GetTranslation3(void * jarg1) {
  void * jresult ;
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Vector3 *result = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  {
    try {
      result = (Dali::Vector3 *) &((Dali::Matrix const *)arg1)->GetTranslation3();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix_SetTranslation__SWIG_0(void * jarg1, void * jarg2) {
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Vector4 *arg2 = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetTranslation((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix_SetTranslation__SWIG_1(void * jarg1, void * jarg2) {
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetTranslation((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix_OrthoNormalize(void * jarg1) {
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  {
    try {
      (arg1)->OrthoNormalize();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Matrix_AsFloat__SWIG_0(void * jarg1) {
  void * jresult ;
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  float *result = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  {
    try {
      result = (float *)((Dali::Matrix const *)arg1)->AsFloat();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix_Multiply__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Matrix *arg1 = 0 ;
  Dali::Matrix *arg2 = 0 ;
  Dali::Matrix *arg3 = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix & type is null", 0);
    return ;
  }
  arg2 = (Dali::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix const & type is null", 0);
    return ;
  }
  arg3 = (Dali::Matrix *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix const & type is null", 0);
    return ;
  }
  {
    try {
      Dali::Matrix::Multiply(*arg1,(Dali::Matrix const &)*arg2,(Dali::Matrix const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix_Multiply__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Matrix *arg1 = 0 ;
  Dali::Matrix *arg2 = 0 ;
  Dali::Quaternion *arg3 = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix & type is null", 0);
    return ;
  }
  arg2 = (Dali::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix const & type is null", 0);
    return ;
  }
  arg3 = (Dali::Quaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return ;
  }
  {
    try {
      Dali::Matrix::Multiply(*arg1,(Dali::Matrix const &)*arg2,(Dali::Quaternion const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Matrix_Multiply__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  Dali::Vector4 result;

  arg1 = (Dali::Matrix *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Matrix const *)arg1)->operator *((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Matrix_EqualTo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Matrix *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Matrix *)jarg1;
  arg2 = (Dali::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Matrix const *)arg1)->operator ==((Dali::Matrix const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Matrix_NotEqualTo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Matrix *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Matrix *)jarg1;
  arg2 = (Dali::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Matrix const *)arg1)->operator !=((Dali::Matrix const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix_SetTransformComponents(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Quaternion *arg3 = 0 ;
  Dali::Vector3 *arg4 = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  arg3 = (Dali::Quaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return ;
  }
  arg4 = (Dali::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetTransformComponents((Dali::Vector3 const &)*arg2,(Dali::Quaternion const &)*arg3,(Dali::Vector3 const &)*arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix_SetInverseTransformComponents__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Quaternion *arg3 = 0 ;
  Dali::Vector3 *arg4 = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  arg3 = (Dali::Quaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return ;
  }
  arg4 = (Dali::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetInverseTransformComponents((Dali::Vector3 const &)*arg2,(Dali::Quaternion const &)*arg3,(Dali::Vector3 const &)*arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix_SetInverseTransformComponents__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Vector3 *arg3 = 0 ;
  Dali::Vector3 *arg4 = 0 ;
  Dali::Vector3 *arg5 = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  arg3 = (Dali::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  arg4 = (Dali::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  arg5 = (Dali::Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetInverseTransformComponents((Dali::Vector3 const &)*arg2,(Dali::Vector3 const &)*arg3,(Dali::Vector3 const &)*arg4,(Dali::Vector3 const &)*arg5);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix_GetTransformComponents(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Quaternion *arg3 = 0 ;
  Dali::Vector3 *arg4 = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 & type is null", 0);
    return ;
  }
  arg3 = (Dali::Quaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion & type is null", 0);
    return ;
  }
  arg4 = (Dali::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 & type is null", 0);
    return ;
  }
  {
    try {
      ((Dali::Matrix const *)arg1)->GetTransformComponents(*arg2,*arg3,*arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Matrix(void * jarg1) {
  Dali::Matrix *arg1 = (Dali::Matrix *) 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Matrix3_IDENTITY_get() {
  void * jresult ;
  Dali::Matrix3 *result = 0 ;

  result = (Dali::Matrix3 *)&Dali::Matrix3::IDENTITY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Matrix3__SWIG_0() {
  void * jresult ;
  Dali::Matrix3 *result = 0 ;

  {
    try {
      result = (Dali::Matrix3 *)new Dali::Matrix3();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Matrix3__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Matrix3 *arg1 = 0 ;
  Dali::Matrix3 *result = 0 ;

  arg1 = (Dali::Matrix3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Matrix3 *)new Dali::Matrix3((Dali::Matrix3 const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Matrix3__SWIG_2(void * jarg1) {
  void * jresult ;
  Dali::Matrix *arg1 = 0 ;
  Dali::Matrix3 *result = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Matrix3 *)new Dali::Matrix3((Dali::Matrix const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Matrix3__SWIG_3(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  Dali::Matrix3 *result = 0 ;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (float)jarg6;
  arg7 = (float)jarg7;
  arg8 = (float)jarg8;
  arg9 = (float)jarg9;
  {
    try {
      result = (Dali::Matrix3 *)new Dali::Matrix3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Matrix3_Assign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Matrix3 *arg1 = (Dali::Matrix3 *) 0 ;
  Dali::Matrix3 *arg2 = 0 ;
  Dali::Matrix3 *result = 0 ;

  arg1 = (Dali::Matrix3 *)jarg1;
  arg2 = (Dali::Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Matrix3 *) &(arg1)->operator =((Dali::Matrix3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Matrix3_Assign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Matrix3 *arg1 = (Dali::Matrix3 *) 0 ;
  Dali::Matrix *arg2 = 0 ;
  Dali::Matrix3 *result = 0 ;

  arg1 = (Dali::Matrix3 *)jarg1;
  arg2 = (Dali::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Matrix3 *) &(arg1)->operator =((Dali::Matrix const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Matrix3_EqualTo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Matrix3 *arg1 = (Dali::Matrix3 *) 0 ;
  Dali::Matrix3 *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Matrix3 *)jarg1;
  arg2 = (Dali::Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Matrix3 const *)arg1)->operator ==((Dali::Matrix3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Matrix3_NotEqualTo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Matrix3 *arg1 = (Dali::Matrix3 *) 0 ;
  Dali::Matrix3 *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Matrix3 *)jarg1;
  arg2 = (Dali::Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Matrix3 const *)arg1)->operator !=((Dali::Matrix3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Matrix3(void * jarg1) {
  Dali::Matrix3 *arg1 = (Dali::Matrix3 *) 0 ;

  arg1 = (Dali::Matrix3 *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix3_SetIdentity(void * jarg1) {
  Dali::Matrix3 *arg1 = (Dali::Matrix3 *) 0 ;

  arg1 = (Dali::Matrix3 *)jarg1;
  {
    try {
      (arg1)->SetIdentity();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Matrix3_AsFloat__SWIG_0(void * jarg1) {
  void * jresult ;
  Dali::Matrix3 *arg1 = (Dali::Matrix3 *) 0 ;
  float *result = 0 ;

  arg1 = (Dali::Matrix3 *)jarg1;
  {
    try {
      result = (float *)((Dali::Matrix3 const *)arg1)->AsFloat();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Matrix3_Invert(void * jarg1) {
  bool jresult ;
  Dali::Matrix3 *arg1 = (Dali::Matrix3 *) 0 ;
  bool result;

  arg1 = (Dali::Matrix3 *)jarg1;
  {
    try {
      result = (bool)(arg1)->Invert();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Matrix3_Transpose(void * jarg1) {
  bool jresult ;
  Dali::Matrix3 *arg1 = (Dali::Matrix3 *) 0 ;
  bool result;

  arg1 = (Dali::Matrix3 *)jarg1;
  {
    try {
      result = (bool)(arg1)->Transpose();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix3_Scale(void * jarg1, float jarg2) {
  Dali::Matrix3 *arg1 = (Dali::Matrix3 *) 0 ;
  float arg2 ;

  arg1 = (Dali::Matrix3 *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->Scale(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Matrix3_Magnitude(void * jarg1) {
  float jresult ;
  Dali::Matrix3 *arg1 = (Dali::Matrix3 *) 0 ;
  float result;

  arg1 = (Dali::Matrix3 *)jarg1;
  {
    try {
      result = (float)((Dali::Matrix3 const *)arg1)->Magnitude();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Matrix3_ScaledInverseTranspose(void * jarg1) {
  bool jresult ;
  Dali::Matrix3 *arg1 = (Dali::Matrix3 *) 0 ;
  bool result;

  arg1 = (Dali::Matrix3 *)jarg1;
  {
    try {
      result = (bool)(arg1)->ScaledInverseTranspose();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Matrix3_Multiply(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Matrix3 *arg1 = 0 ;
  Dali::Matrix3 *arg2 = 0 ;
  Dali::Matrix3 *arg3 = 0 ;

  arg1 = (Dali::Matrix3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix3 & type is null", 0);
    return ;
  }
  arg2 = (Dali::Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix3 const & type is null", 0);
    return ;
  }
  arg3 = (Dali::Matrix3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix3 const & type is null", 0);
    return ;
  }
  {
    try {
      Dali::Matrix3::Multiply(*arg1,(Dali::Matrix3 const &)*arg2,(Dali::Matrix3 const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Range(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (float)Dali::Random::Range(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Axis() {
  void * jresult ;
  Dali::Vector4 result;

  {
    try {
      result = Dali::Random::Axis();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_AngleAxis__SWIG_0() {
  void * jresult ;
  Dali::AngleAxis *result = 0 ;

  {
    try {
      result = (Dali::AngleAxis *)new Dali::AngleAxis();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_AngleAxis__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Radian arg1 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Radian *argp1 ;
  Dali::AngleAxis *result = 0 ;

  argp1 = (Dali::Radian *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg1 = *argp1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::AngleAxis *)new Dali::AngleAxis(arg1,(Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AngleAxis_angle_set(void * jarg1, void * jarg2) {
  Dali::AngleAxis *arg1 = (Dali::AngleAxis *) 0 ;
  Dali::Radian *arg2 = (Dali::Radian *) 0 ;

  arg1 = (Dali::AngleAxis *)jarg1;
  arg2 = (Dali::Radian *)jarg2;
  if (arg1) (arg1)->angle = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AngleAxis_angle_get(void * jarg1) {
  void * jresult ;
  Dali::AngleAxis *arg1 = (Dali::AngleAxis *) 0 ;
  Dali::Radian *result = 0 ;

  arg1 = (Dali::AngleAxis *)jarg1;
  result = (Dali::Radian *)& ((arg1)->angle);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AngleAxis_axis_set(void * jarg1, void * jarg2) {
  Dali::AngleAxis *arg1 = (Dali::AngleAxis *) 0 ;
  Dali::Vector3 *arg2 = (Dali::Vector3 *) 0 ;

  arg1 = (Dali::AngleAxis *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (arg1) (arg1)->axis = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AngleAxis_axis_get(void * jarg1) {
  void * jresult ;
  Dali::AngleAxis *arg1 = (Dali::AngleAxis *) 0 ;
  Dali::Vector3 *result = 0 ;

  arg1 = (Dali::AngleAxis *)jarg1;
  result = (Dali::Vector3 *)& ((arg1)->axis);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_AngleAxis(void * jarg1) {
  Dali::AngleAxis *arg1 = (Dali::AngleAxis *) 0 ;

  arg1 = (Dali::AngleAxis *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_EqualTo__SWIG_9(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::AngleAxis *arg1 = 0 ;
  Dali::AngleAxis *arg2 = 0 ;
  bool result;

  arg1 = (Dali::AngleAxis *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::AngleAxis const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::AngleAxis *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::AngleAxis const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)Dali::operator ==((Dali::AngleAxis const &)*arg1,(Dali::AngleAxis const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_NextPowerOfTwo(unsigned int jarg1) {
  unsigned int jresult ;
  unsigned int arg1 ;
  unsigned int result;

  arg1 = (unsigned int)jarg1;
  {
    try {
      result = (unsigned int)Dali::NextPowerOfTwo(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_IsPowerOfTwo(unsigned int jarg1) {
  bool jresult ;
  unsigned int arg1 ;
  bool result;

  arg1 = (unsigned int)jarg1;
  {
    try {
      result = (bool)Dali::IsPowerOfTwo(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_GetRangedEpsilon(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (float)Dali::GetRangedEpsilon(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_EqualsZero(float jarg1) {
  bool jresult ;
  float arg1 ;
  bool result;

  arg1 = (float)jarg1;
  {
    try {
      result = (bool)Dali::EqualsZero(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Equals__SWIG_0(float jarg1, float jarg2) {
  bool jresult ;
  float arg1 ;
  float arg2 ;
  bool result;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (bool)Dali::Equals(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Equals__SWIG_1(float jarg1, float jarg2, float jarg3) {
  bool jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  bool result;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      result = (bool)Dali::Equals(arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Round(float jarg1, int jarg2) {
  float jresult ;
  float arg1 ;
  int arg2 ;
  float result;

  arg1 = (float)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      result = (float)Dali::Round(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_WrapInDomain(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      result = (float)Dali::WrapInDomain(arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ShortestDistanceInDomain(float jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  {
    try {
      result = (float)Dali::ShortestDistanceInDomain(arg1,arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Property_INVALID_INDEX_get() {
  int jresult ;
  int result;

  result = (int)(int)Dali::Property::INVALID_INDEX;
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Property_INVALID_KEY_get() {
  int jresult ;
  int result;

  result = (int)(int)Dali::Property::INVALID_KEY;
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Property_INVALID_COMPONENT_INDEX_get() {
  int jresult ;
  int result;

  result = (int)(int)Dali::Property::INVALID_COMPONENT_INDEX;
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  Dali::Handle *arg1 = 0 ;
  Dali::Property::Index arg2 ;
  Dali::Property *result = 0 ;

  arg1 = (Dali::Handle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Handle & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Property::Index)jarg2;
  {
    try {
      result = (Dali::Property *)new Dali::Property(*arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Dali::Handle *arg1 = 0 ;
  Dali::Property::Index arg2 ;
  int arg3 ;
  Dali::Property *result = 0 ;

  arg1 = (Dali::Handle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Handle & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Property::Index)jarg2;
  arg3 = (int)jarg3;
  {
    try {
      result = (Dali::Property *)new Dali::Property(*arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  Dali::Handle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Dali::Property *result = 0 ;

  arg1 = (Dali::Handle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Handle & type is null", 0);
    return 0;
  }
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      result = (Dali::Property *)new Dali::Property(*arg1,(std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property__SWIG_3(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  Dali::Handle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  Dali::Property *result = 0 ;

  arg1 = (Dali::Handle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Handle & type is null", 0);
    return 0;
  }
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (int)jarg3;
  {
    try {
      result = (Dali::Property *)new Dali::Property(*arg1,(std::string const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Property(void * jarg1) {
  Dali::Property *arg1 = (Dali::Property *) 0 ;

  arg1 = (Dali::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Property__object_set(void * jarg1, void * jarg2) {
  Dali::Property *arg1 = (Dali::Property *) 0 ;
  Dali::Handle *arg2 = 0 ;

  arg1 = (Dali::Property *)jarg1;
  arg2 = (Dali::Handle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Handle & type is null", 0);
    return ;
  }
  if (arg1) (arg1)->object = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property__object_get(void * jarg1) {
  void * jresult ;
  Dali::Property *arg1 = (Dali::Property *) 0 ;
  Dali::Handle *result = 0 ;

  arg1 = (Dali::Property *)jarg1;
  result = (Dali::Handle *) &(Dali::Handle &) ((arg1)->object);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Property_propertyIndex_set(void * jarg1, int jarg2) {
  Dali::Property *arg1 = (Dali::Property *) 0 ;
  Dali::Property::Index arg2 ;

  arg1 = (Dali::Property *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  if (arg1) (arg1)->propertyIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Property_propertyIndex_get(void * jarg1) {
  int jresult ;
  Dali::Property *arg1 = (Dali::Property *) 0 ;
  Dali::Property::Index result;

  arg1 = (Dali::Property *)jarg1;
  result = (Dali::Property::Index) ((arg1)->propertyIndex);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Property_componentIndex_set(void * jarg1, int jarg2) {
  Dali::Property *arg1 = (Dali::Property *) 0 ;
  int arg2 ;

  arg1 = (Dali::Property *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->componentIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Property_componentIndex_get(void * jarg1) {
  int jresult ;
  Dali::Property *arg1 = (Dali::Property *) 0 ;
  int result;

  arg1 = (Dali::Property *)jarg1;
  result = (int) ((arg1)->componentIndex);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Array__SWIG_0() {
  void * jresult ;
  Dali::Property::Array *result = 0 ;

  {
    try {
      result = (Dali::Property::Array *)new Dali::Property::Array();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Array__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Property::Array *arg1 = 0 ;
  Dali::Property::Array *result = 0 ;

  arg1 = (Dali::Property::Array *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Array const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Array *)new Dali::Property::Array((Dali::Property::Array const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Property_Array(void * jarg1) {
  Dali::Property::Array *arg1 = (Dali::Property::Array *) 0 ;

  arg1 = (Dali::Property::Array *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_Property_Array_Size(void * jarg1) {
  unsigned long jresult ;
  Dali::Property::Array *arg1 = (Dali::Property::Array *) 0 ;
  Dali::Property::Array::SizeType result;

  arg1 = (Dali::Property::Array *)jarg1;
  {
    try {
      result = ((Dali::Property::Array const *)arg1)->Size();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_Property_Array_Count(void * jarg1) {
  unsigned long jresult ;
  Dali::Property::Array *arg1 = (Dali::Property::Array *) 0 ;
  Dali::Property::Array::SizeType result;

  arg1 = (Dali::Property::Array *)jarg1;
  {
    try {
      result = ((Dali::Property::Array const *)arg1)->Count();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Array_Empty(void * jarg1) {
  bool jresult ;
  Dali::Property::Array *arg1 = (Dali::Property::Array *) 0 ;
  bool result;

  arg1 = (Dali::Property::Array *)jarg1;
  {
    try {
      result = (bool)((Dali::Property::Array const *)arg1)->Empty();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Property_Array_Clear(void * jarg1) {
  Dali::Property::Array *arg1 = (Dali::Property::Array *) 0 ;

  arg1 = (Dali::Property::Array *)jarg1;
  {
    try {
      (arg1)->Clear();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Property_Array_Reserve(void * jarg1, unsigned long jarg2) {
  Dali::Property::Array *arg1 = (Dali::Property::Array *) 0 ;
  Dali::Property::Array::SizeType arg2 ;

  arg1 = (Dali::Property::Array *)jarg1;
  arg2 = (Dali::Property::Array::SizeType)jarg2;
  {
    try {
      (arg1)->Reserve(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Property_Array_Resize(void * jarg1, unsigned long jarg2) {
  Dali::Property::Array *arg1 = (Dali::Property::Array *) 0 ;
  Dali::Property::Array::SizeType arg2 ;

  arg1 = (Dali::Property::Array *)jarg1;
  arg2 = (Dali::Property::Array::SizeType)jarg2;
  {
    try {
      (arg1)->Resize(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_Property_Array_Capacity(void * jarg1) {
  unsigned long jresult ;
  Dali::Property::Array *arg1 = (Dali::Property::Array *) 0 ;
  Dali::Property::Array::SizeType result;

  arg1 = (Dali::Property::Array *)jarg1;
  {
    try {
      result = (arg1)->Capacity();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Property_Array_PushBack(void * jarg1, void * jarg2) {
  Dali::Property::Array *arg1 = (Dali::Property::Array *) 0 ;
  Dali::Property::Value *arg2 = 0 ;

  arg1 = (Dali::Property::Array *)jarg1;
  arg2 = (Dali::Property::Value *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Value const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->PushBack((Dali::Property::Value const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Array_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Property::Array *arg1 = (Dali::Property::Array *) 0 ;
  Dali::Property::Value *arg2 = 0 ;
  Dali::Property::Array *result = 0 ;

  arg1 = (Dali::Property::Array *)jarg1;
  arg2 = (Dali::Property::Value *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Value const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Array *) &(arg1)->Add((Dali::Property::Value const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Array_GetElementAt__SWIG_0(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::Property::Array *arg1 = (Dali::Property::Array *) 0 ;
  Dali::Property::Array::SizeType arg2 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Property::Array *)jarg1;
  arg2 = (Dali::Property::Array::SizeType)jarg2;
  {
    try {
      result = (Dali::Property::Value *) &((Dali::Property::Array const *)arg1)->GetElementAt(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Array_ValueOfIndex__SWIG_0(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::Property::Array *arg1 = (Dali::Property::Array *) 0 ;
  Dali::Property::Array::SizeType arg2 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Property::Array *)jarg1;
  arg2 = (Dali::Property::Array::SizeType)jarg2;
  {
    try {
      result = (Dali::Property::Value *) &((Dali::Property::Array const *)arg1)->operator [](arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Array_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Property::Array *arg1 = (Dali::Property::Array *) 0 ;
  Dali::Property::Array *arg2 = 0 ;
  Dali::Property::Array *result = 0 ;

  arg1 = (Dali::Property::Array *)jarg1;
  arg2 = (Dali::Property::Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Array const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Array *) &(arg1)->operator =((Dali::Property::Array const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Property_Key_type_set(void * jarg1, int jarg2) {
  Dali::Property::Key *arg1 = (Dali::Property::Key *) 0 ;
  enum Dali::Property::Key::Type arg2 ;

  arg1 = (Dali::Property::Key *)jarg1;
  arg2 = (enum Dali::Property::Key::Type)jarg2;
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Property_Key_type_get(void * jarg1) {
  int jresult ;
  Dali::Property::Key *arg1 = (Dali::Property::Key *) 0 ;
  enum Dali::Property::Key::Type result;

  arg1 = (Dali::Property::Key *)jarg1;
  result = (enum Dali::Property::Key::Type) ((arg1)->type);
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Property_Key_indexKey_set(void * jarg1, int jarg2) {
  Dali::Property::Key *arg1 = (Dali::Property::Key *) 0 ;
  Dali::Property::Index arg2 ;

  arg1 = (Dali::Property::Key *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  if (arg1) (arg1)->indexKey = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Property_Key_indexKey_get(void * jarg1) {
  int jresult ;
  Dali::Property::Key *arg1 = (Dali::Property::Key *) 0 ;
  Dali::Property::Index result;

  arg1 = (Dali::Property::Key *)jarg1;
  result = (Dali::Property::Index) ((arg1)->indexKey);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Property_Key_stringKey_set(void * jarg1, char * jarg2) {
  Dali::Property::Key *arg1 = (Dali::Property::Key *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (Dali::Property::Key *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  if (arg1) (arg1)->stringKey = *arg2;

  //argout typemap for const std::string&

}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_Property_Key_stringKey_get(void * jarg1) {
  char * jresult ;
  Dali::Property::Key *arg1 = (Dali::Property::Key *) 0 ;
  std::string *result = 0 ;

  arg1 = (Dali::Property::Key *)jarg1;
  result = (std::string *) & ((arg1)->stringKey);
  jresult = SWIG_csharp_string_callback(result->c_str());
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Key__SWIG_0(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::Property::Key *result = 0 ;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  {
    try {
      result = (Dali::Property::Key *)new Dali::Property::Key((std::string const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Key__SWIG_1(int jarg1) {
  void * jresult ;
  Dali::Property::Index arg1 ;
  Dali::Property::Key *result = 0 ;

  arg1 = (Dali::Property::Index)jarg1;
  {
    try {
      result = (Dali::Property::Key *)new Dali::Property::Key(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Key_EqualTo__SWIG_0(void * jarg1, char * jarg2) {
  bool jresult ;
  Dali::Property::Key *arg1 = (Dali::Property::Key *) 0 ;
  std::string *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Key *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      result = (bool)(arg1)->operator ==((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Key_EqualTo__SWIG_1(void * jarg1, int jarg2) {
  bool jresult ;
  Dali::Property::Key *arg1 = (Dali::Property::Key *) 0 ;
  Dali::Property::Index arg2 ;
  bool result;

  arg1 = (Dali::Property::Key *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  {
    try {
      result = (bool)(arg1)->operator ==(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Key_EqualTo__SWIG_2(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Property::Key *arg1 = (Dali::Property::Key *) 0 ;
  Dali::Property::Key *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Key *)jarg1;
  arg2 = (Dali::Property::Key *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Key const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)(arg1)->operator ==((Dali::Property::Key const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Key_NotEqualTo__SWIG_0(void * jarg1, char * jarg2) {
  bool jresult ;
  Dali::Property::Key *arg1 = (Dali::Property::Key *) 0 ;
  std::string *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Key *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      result = (bool)(arg1)->operator !=((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Key_NotEqualTo__SWIG_1(void * jarg1, int jarg2) {
  bool jresult ;
  Dali::Property::Key *arg1 = (Dali::Property::Key *) 0 ;
  Dali::Property::Index arg2 ;
  bool result;

  arg1 = (Dali::Property::Key *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  {
    try {
      result = (bool)(arg1)->operator !=(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Key_NotEqualTo__SWIG_2(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Property::Key *arg1 = (Dali::Property::Key *) 0 ;
  Dali::Property::Key *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Key *)jarg1;
  arg2 = (Dali::Property::Key *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Key const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)(arg1)->operator !=((Dali::Property::Key const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Property_Key(void * jarg1) {
  Dali::Property::Key *arg1 = (Dali::Property::Key *) 0 ;

  arg1 = (Dali::Property::Key *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Map__SWIG_0() {
  void * jresult ;
  Dali::Property::Map *result = 0 ;

  {
    try {
      result = (Dali::Property::Map *)new Dali::Property::Map();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Map__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Property::Map *arg1 = 0 ;
  Dali::Property::Map *result = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Map *)new Dali::Property::Map((Dali::Property::Map const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Property_Map(void * jarg1) {
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_Property_Map_Count(void * jarg1) {
  unsigned long jresult ;
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  Dali::Property::Map::SizeType result;

  arg1 = (Dali::Property::Map *)jarg1;
  {
    try {
      result = ((Dali::Property::Map const *)arg1)->Count();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Map_Empty(void * jarg1) {
  bool jresult ;
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  bool result;

  arg1 = (Dali::Property::Map *)jarg1;
  {
    try {
      result = (bool)((Dali::Property::Map const *)arg1)->Empty();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Property_Map_Insert__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  char *arg2 = (char *) 0 ;
  Dali::Property::Value *arg3 = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (Dali::Property::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Value const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Insert((char const *)arg2,(Dali::Property::Value const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Property_Map_Insert__SWIG_2(void * jarg1, int jarg2, void * jarg3) {
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  Dali::Property::Index arg2 ;
  Dali::Property::Value *arg3 = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  arg3 = (Dali::Property::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Value const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Insert(arg2,(Dali::Property::Value const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Map_Add__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  char *arg2 = (char *) 0 ;
  Dali::Property::Value *arg3 = 0 ;
  Dali::Property::Map *result = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (Dali::Property::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Value const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Map *) &(arg1)->Add((char const *)arg2,(Dali::Property::Value const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Map_Add__SWIG_2(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  Dali::Property::Index arg2 ;
  Dali::Property::Value *arg3 = 0 ;
  Dali::Property::Map *result = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  arg3 = (Dali::Property::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Value const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Map *) &(arg1)->Add(arg2,(Dali::Property::Value const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Map_GetValue(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  Dali::Property::Map::SizeType arg2 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  arg2 = (Dali::Property::Map::SizeType)jarg2;
  {
    try {
      result = (Dali::Property::Value *) &((Dali::Property::Map const *)arg1)->GetValue(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_Property_Map_GetKey(void * jarg1, unsigned long jarg2) {
  char * jresult ;
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  Dali::Property::Map::SizeType arg2 ;
  std::string *result = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  arg2 = (Dali::Property::Map::SizeType)jarg2;
  {
    try {
      result = (std::string *) &((Dali::Property::Map const *)arg1)->GetKey(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = SWIG_csharp_string_callback(result->c_str());
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Map_GetKeyAt(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  Dali::Property::Map::SizeType arg2 ;
  SwigValueWrapper< Dali::Property::Key > result;

  arg1 = (Dali::Property::Map *)jarg1;
  arg2 = (Dali::Property::Map::SizeType)jarg2;
  {
    try {
      result = ((Dali::Property::Map const *)arg1)->GetKeyAt(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Property::Key((const Dali::Property::Key &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Map_GetPair(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  Dali::Property::Map::SizeType arg2 ;
  StringValuePair *result = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  arg2 = (Dali::Property::Map::SizeType)jarg2;
  {
    try {
      result = (StringValuePair *) &((Dali::Property::Map const *)arg1)->GetPair(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Map_Find__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  char *arg2 = (char *) 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  arg2 = (char *)jarg2;
  {
    try {
      result = (Dali::Property::Value *)((Dali::Property::Map const *)arg1)->Find((char const *)arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Map_Find__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  Dali::Property::Index arg2 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  {
    try {
      result = (Dali::Property::Value *)((Dali::Property::Map const *)arg1)->Find(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Map_Find__SWIG_3(void * jarg1, int jarg2, char * jarg3) {
  void * jresult ;
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  Dali::Property::Index arg2 ;
  std::string *arg3 = 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str;
  {
    try {
      result = (Dali::Property::Value *)((Dali::Property::Map const *)arg1)->Find(arg2,(std::string const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Map_Find__SWIG_4(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Type arg3 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Property::Type)jarg3;
  {
    try {
      result = (Dali::Property::Value *)((Dali::Property::Map const *)arg1)->Find((std::string const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Map_Find__SWIG_5(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  Dali::Property::Index arg2 ;
  Dali::Property::Type arg3 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  arg3 = (Dali::Property::Type)jarg3;
  {
    try {
      result = (Dali::Property::Value *)((Dali::Property::Map const *)arg1)->Find(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Property_Map_Clear(void * jarg1) {
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  {
    try {
      (arg1)->Clear();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Property_Map_Merge(void * jarg1, void * jarg2) {
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  Dali::Property::Map *arg2 = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  arg2 = (Dali::Property::Map *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Merge((Dali::Property::Map const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Map_ValueOfIndex__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      result = (Dali::Property::Value *) &((Dali::Property::Map const *)arg1)->operator []((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Map_ValueOfIndex__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  Dali::Property::Index arg2 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  {
    try {
      result = (Dali::Property::Value *) &((Dali::Property::Map const *)arg1)->operator [](arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Map_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Property::Map *arg1 = (Dali::Property::Map *) 0 ;
  Dali::Property::Map *arg2 = 0 ;
  Dali::Property::Map *result = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  arg2 = (Dali::Property::Map *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Map *) &(arg1)->operator =((Dali::Property::Map const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Property_Map_SetValue_StringKey(void* jarg1, char* jarg2, void* jarg3) {

  Dali::Property::Map* arg1 = (Dali::Property::Map*)jarg1;

  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return;
  }
  std::string arg2_str(jarg2);
  std::string* arg2 = &arg2_str;

  Dali::Property::Value* arg3 = (Dali::Property::Value*)jarg3;

  {
    try {
      arg1->operator[]((std::string const &)*arg2) = *arg3;
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Property_Map_SetValue_IntKey(void* jarg1, int jarg2, void* jarg3) {

  Dali::Property::Map* arg1 = (Dali::Property::Map*)jarg1;
  Dali::Property::Index arg2 = (Dali::Property::Index)jarg2;
  Dali::Property::Value* arg3 = (Dali::Property::Value*)jarg3;

  {
    try {
      arg1->operator[](arg2) = *arg3;
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_0() {
  void * jresult ;
  Dali::Property::Value *result = 0 ;

  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_1(bool jarg1) {
  void * jresult ;
  bool arg1 ;
  Dali::Property::Value *result = 0 ;

  arg1 = jarg1 ? true : false;
  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (int)jarg1;
  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_3(float jarg1) {
  void * jresult ;
  float arg1 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (float)jarg1;
  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_4(void * jarg1) {
  void * jresult ;
  Dali::Vector2 *arg1 = 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value((Dali::Vector2 const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_5(void * jarg1) {
  void * jresult ;
  Dali::Vector3 *arg1 = 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value((Dali::Vector3 const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_6(void * jarg1) {
  void * jresult ;
  Dali::Vector4 *arg1 = 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value((Dali::Vector4 const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_7(void * jarg1) {
  void * jresult ;
  Dali::Matrix3 *arg1 = 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Matrix3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value((Dali::Matrix3 const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_8(void * jarg1) {
  void * jresult ;
  Dali::Matrix *arg1 = 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value((Dali::Matrix const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_9(void * jarg1) {
  void * jresult ;
  Dali::Rect< int > *arg1 = 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Rect< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Rect< int > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value((Dali::Rect< int > const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_10(void * jarg1) {
  void * jresult ;
  Dali::AngleAxis *arg1 = 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::AngleAxis *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::AngleAxis const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value((Dali::AngleAxis const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_11(void * jarg1) {
  void * jresult ;
  Dali::Quaternion *arg1 = 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value((Dali::Quaternion const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_12(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::Property::Value *result = 0 ;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value((std::string const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_14(void * jarg1) {
  void * jresult ;
  Dali::Property::Array *arg1 = 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Property::Array *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Array & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value(*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_15(void * jarg1) {
  void * jresult ;
  Dali::Property::Map *arg1 = 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Property::Map *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value(*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_16(void * jarg1) {
  void * jresult ;
  Extents *arg1 = 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Extents *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Extents const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value((Extents const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void*) result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_17(int jarg1) {
  void * jresult ;
  Dali::Property::Type arg1 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Property::Type)jarg1;
  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Property_Value__SWIG_18(void * jarg1) {
  void * jresult ;
  Dali::Property::Value *arg1 = 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Property::Value *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Value const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Value *)new Dali::Property::Value((Dali::Property::Value const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Value_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  Dali::Property::Value *arg2 = 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Property::Value *)jarg1;
  arg2 = (Dali::Property::Value *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Value const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Value *) &(arg1)->operator =((Dali::Property::Value const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Property_Value(void * jarg1) {
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;

  arg1 = (Dali::Property::Value *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Property_Value_GetType(void * jarg1) {
  int jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  Dali::Property::Type result;

  arg1 = (Dali::Property::Value *)jarg1;
  {
    try {
      result = (Dali::Property::Type)((Dali::Property::Value const *)arg1)->GetType();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Value_Get__SWIG_1(void * jarg1, bool * jarg2) {
  bool jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  bool *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Value *)jarg1;
  arg2 = (bool *)jarg2;
  {
    try {
      result = (bool)((Dali::Property::Value const *)arg1)->Get(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Value_Get__SWIG_2(void * jarg1, float * jarg2) {
  bool jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  float *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Value *)jarg1;
  arg2 = (float *)jarg2;
  {
    try {
      result = (bool)((Dali::Property::Value const *)arg1)->Get(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Value_Get__SWIG_3(void * jarg1, int * jarg2) {
  bool jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  int *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Value *)jarg1;
  arg2 = (int *)jarg2;
  {
    try {
      result = (bool)((Dali::Property::Value const *)arg1)->Get(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Value_Get__SWIG_4(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  Dali::Rect< int > *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Value *)jarg1;
  arg2 = (Dali::Rect< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Rect< int > & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Property::Value const *)arg1)->Get(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Value_Get__SWIG_5(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Value *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Property::Value const *)arg1)->Get(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Value_Get__SWIG_6(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Value *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Property::Value const *)arg1)->Get(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Value_Get__SWIG_7(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  Dali::Vector4 *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Value *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Property::Value const *)arg1)->Get(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Value_Get__SWIG_8(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  Dali::Matrix3 *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Value *)jarg1;
  arg2 = (Dali::Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix3 & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Property::Value const *)arg1)->Get(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Value_Get__SWIG_9(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  Dali::Matrix *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Value *)jarg1;
  arg2 = (Dali::Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Matrix & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Property::Value const *)arg1)->Get(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Value_Get__SWIG_10(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  Dali::AngleAxis *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Value *)jarg1;
  arg2 = (Dali::AngleAxis *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::AngleAxis & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Property::Value const *)arg1)->Get(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Value_Get__SWIG_11(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  Dali::Quaternion *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Value *)jarg1;
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Property::Value const *)arg1)->Get(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Value_Get__SWIG_12(void * jarg1, char** jarg2) {
  bool jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  std::string *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Value *)jarg1;

  //typemap in
  std::string temp;
  arg2 = &temp;

  {
    try {
      result = (bool)((Dali::Property::Value const *)arg1)->Get(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;

  //Typemap argout in c++ file.
  //This will convert c++ string to c# string
  *jarg2 = SWIG_csharp_string_callback(arg2->c_str());

  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Value_Get__SWIG_13(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  Dali::Property::Array *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Value *)jarg1;
  arg2 = (Dali::Property::Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Array & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Property::Value const *)arg1)->Get(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Value_Get__SWIG_14(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  Dali::Property::Map *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Value *)jarg1;
  arg2 = (Dali::Property::Map *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Property::Value const *)arg1)->Get(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Property_Value_Get__SWIG_15(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  Extents *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Property::Value *)jarg1;
  arg2 = (Extents *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Extents & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Property::Value const *)arg1)->Get(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = result;
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Value_GetArray(void * jarg1) {
  void * jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  Dali::Property::Array *result = 0 ;

  arg1 = (Dali::Property::Value *)jarg1;
  {
    try {
      result = (Dali::Property::Array *)((Dali::Property::Value const *)arg1)->GetArray();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Property_Value_GetMap(void * jarg1) {
  void * jresult ;
  Dali::Property::Value *arg1 = (Dali::Property::Value *) 0 ;
  Dali::Property::Map *result = 0 ;

  arg1 = (Dali::Property::Value *)jarg1;
  {
    try {
      result = (Dali::Property::Map *)((Dali::Property::Value const *)arg1)->GetMap();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_GetName(int jarg1) {
  char * jresult ;
  Dali::Property::Type arg1 ;
  char *result = 0 ;

  arg1 = (Dali::Property::Type)jarg1;
  {
    try {
      result = (char *)Dali::PropertyTypes::GetName(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = SWIG_csharp_string_callback((const char *)result);
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_BaseObject_DoAction(void * jarg1, char * jarg2, void * jarg3) {
  bool jresult ;
  Dali::BaseObject *arg1 = (Dali::BaseObject *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Map *arg3 = 0 ;
  bool result;

  arg1 = (Dali::BaseObject *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Property::Map *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)(arg1)->DoAction((std::string const &)*arg2,(Dali::Property::Map const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_BaseObject_GetTypeName(void * jarg1) {
  char * jresult ;
  Dali::BaseObject *arg1 = (Dali::BaseObject *) 0 ;
  std::string *result = 0 ;

  arg1 = (Dali::BaseObject *)jarg1;
  {
    try {
      result = (std::string *) &((Dali::BaseObject const *)arg1)->GetTypeName();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = SWIG_csharp_string_callback(result->c_str());
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_BaseObject_GetTypeInfo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::BaseObject *arg1 = (Dali::BaseObject *) 0 ;
  Dali::TypeInfo *arg2 = 0 ;
  bool result;

  arg1 = (Dali::BaseObject *)jarg1;
  arg2 = (Dali::TypeInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TypeInfo & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::BaseObject const *)arg1)->GetTypeInfo(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_BaseObject_DoConnectSignal(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  bool jresult ;
  Dali::BaseObject *arg1 = (Dali::BaseObject *) 0 ;
  ConnectionTrackerInterface *arg2 = (ConnectionTrackerInterface *) 0 ;
  std::string *arg3 = 0 ;
  FunctorDelegate *arg4 = (FunctorDelegate *) 0 ;
  bool result;

  arg1 = (Dali::BaseObject *)jarg1;
  arg2 = (ConnectionTrackerInterface *)jarg2;
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str;
  arg4 = (FunctorDelegate *)jarg4;
  {
    try {
      result = (bool)(arg1)->DoConnectSignal(arg2,(std::string const &)*arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GetImplementation(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle *arg1 = 0 ;
  Dali::BaseObject *result = 0 ;

  arg1 = (Dali::BaseHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::BaseHandle const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::BaseObject *) &Dali::GetImplementation((Dali::BaseHandle const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_BaseHandle__SWIG_0(void * jarg1) {
  void * jresult ;
  Dali::BaseObject *arg1 = (Dali::BaseObject *) 0 ;
  Dali::BaseHandle *result = 0 ;

  arg1 = (Dali::BaseObject *)jarg1;
  {
    try {
      result = (Dali::BaseHandle *)new Dali::BaseHandle(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_BaseHandle__SWIG_1() {
  void * jresult ;
  Dali::BaseHandle *result = 0 ;

  {
    try {
      result = (Dali::BaseHandle *)new Dali::BaseHandle();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_BaseHandle(void * jarg1) {
  Dali::BaseHandle *arg1 = (Dali::BaseHandle *) 0 ;

  arg1 = (Dali::BaseHandle *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_BaseHandle__SWIG_2(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle *arg1 = 0 ;
  Dali::BaseHandle *result = 0 ;

  arg1 = (Dali::BaseHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::BaseHandle const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::BaseHandle *)new Dali::BaseHandle((Dali::BaseHandle const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_BaseHandle_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::BaseHandle *arg1 = (Dali::BaseHandle *) 0 ;
  Dali::BaseHandle *arg2 = 0 ;
  Dali::BaseHandle *result = 0 ;

  arg1 = (Dali::BaseHandle *)jarg1;
  arg2 = (Dali::BaseHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::BaseHandle const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::BaseHandle *) &(arg1)->operator =((Dali::BaseHandle const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_BaseHandle_DoAction(void * jarg1, char * jarg2, void * jarg3) {
  bool jresult ;
  Dali::BaseHandle *arg1 = (Dali::BaseHandle *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Map *arg3 = 0 ;
  bool result;

  arg1 = (Dali::BaseHandle *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Property::Map *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)(arg1)->DoAction((std::string const &)*arg2,(Dali::Property::Map const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_BaseHandle_GetTypeName(void * jarg1) {
  char * jresult ;
  Dali::BaseHandle *arg1 = (Dali::BaseHandle *) 0 ;
  std::string *result = 0 ;

  arg1 = (Dali::BaseHandle *)jarg1;
  {
    try {
      result = (std::string *) &((Dali::BaseHandle const *)arg1)->GetTypeName();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = SWIG_csharp_string_callback(result->c_str());
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_BaseHandle_GetTypeInfo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::BaseHandle *arg1 = (Dali::BaseHandle *) 0 ;
  Dali::TypeInfo *arg2 = 0 ;
  bool result;

  arg1 = (Dali::BaseHandle *)jarg1;
  arg2 = (Dali::TypeInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TypeInfo & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::BaseHandle const *)arg1)->GetTypeInfo(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_BaseHandle_GetBaseObject__SWIG_0(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle *arg1 = (Dali::BaseHandle *) 0 ;
  Dali::BaseObject *result = 0 ;

  arg1 = (Dali::BaseHandle *)jarg1;
  {
    try {
      result = (Dali::BaseObject *) &(arg1)->GetBaseObject();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_BaseHandle_Reset(void * jarg1) {
  Dali::BaseHandle *arg1 = (Dali::BaseHandle *) 0 ;

  arg1 = (Dali::BaseHandle *)jarg1;
  {
    try {
      (arg1)->Reset();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_BaseHandle_EqualTo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::BaseHandle *arg1 = (Dali::BaseHandle *) 0 ;
  Dali::BaseHandle *arg2 = 0 ;
  bool result;

  arg1 = (Dali::BaseHandle *)jarg1;
  arg2 = (Dali::BaseHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::BaseHandle const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::BaseHandle const *)arg1)->operator ==((Dali::BaseHandle const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_BaseHandle_NotEqualTo(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::BaseHandle *arg1 = (Dali::BaseHandle *) 0 ;
  Dali::BaseHandle *arg2 = 0 ;
  bool result;

  arg1 = (Dali::BaseHandle *)jarg1;
  arg2 = (Dali::BaseHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::BaseHandle const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::BaseHandle const *)arg1)->operator !=((Dali::BaseHandle const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_BaseHandle_GetObjectPtr(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle *arg1 = (Dali::BaseHandle *) 0 ;
  Dali::RefObject *result = 0 ;

  arg1 = (Dali::BaseHandle *)jarg1;
  {
    try {
      result = (Dali::RefObject *)((Dali::BaseHandle const *)arg1)->GetObjectPtr();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_BaseHandle_HasBody(void * jarg1) {
  bool jresult ;
  Dali::BaseHandle *arg1 = (Dali::BaseHandle *) 0 ;
  bool result;

  arg1 = (Dali::BaseHandle *)jarg1;
  {
    try {
      result = (bool)Dali_BaseHandle_HasBody((Dali::BaseHandle const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_BaseHandle_IsEqual(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::BaseHandle *arg1 = (Dali::BaseHandle *) 0 ;
  Dali::BaseHandle *arg2 = 0 ;
  bool result;

  arg1 = (Dali::BaseHandle *)jarg1;
  arg2 = (Dali::BaseHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::BaseHandle const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)Dali_BaseHandle_IsEqual((Dali::BaseHandle const *)arg1,(Dali::BaseHandle const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_LessThan__SWIG_3(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::BaseHandle *arg1 = 0 ;
  Dali::BaseHandle *arg2 = 0 ;
  bool result;

  arg1 = (Dali::BaseHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::BaseHandle const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::BaseHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::BaseHandle const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)Dali::operator <((Dali::BaseHandle const &)*arg1,(Dali::BaseHandle const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ConnectionTrackerInterface(void * jarg1) {
  Dali::ConnectionTrackerInterface *arg1 = (Dali::ConnectionTrackerInterface *) 0 ;

  arg1 = (Dali::ConnectionTrackerInterface *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ConnectionTrackerInterface_SignalConnected(void * jarg1, void * jarg2, void * jarg3) {
  Dali::ConnectionTrackerInterface *arg1 = (Dali::ConnectionTrackerInterface *) 0 ;
  SlotObserver *arg2 = (SlotObserver *) 0 ;
  CallbackBase *arg3 = (CallbackBase *) 0 ;

  arg1 = (Dali::ConnectionTrackerInterface *)jarg1;
  arg2 = (SlotObserver *)jarg2;
  arg3 = (CallbackBase *)jarg3;
  {
    try {
      (arg1)->SignalConnected(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_SignalObserver(void * jarg1) {
  Dali::SignalObserver *arg1 = (Dali::SignalObserver *) 0 ;

  arg1 = (Dali::SignalObserver *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_SignalObserver_SignalDisconnected(void * jarg1, void * jarg2, void * jarg3) {
  Dali::SignalObserver *arg1 = (Dali::SignalObserver *) 0 ;
  Dali::SlotObserver *arg2 = (Dali::SlotObserver *) 0 ;
  Dali::CallbackBase *arg3 = (Dali::CallbackBase *) 0 ;

  arg1 = (Dali::SignalObserver *)jarg1;
  arg2 = (Dali::SlotObserver *)jarg2;
  arg3 = (Dali::CallbackBase *)jarg3;
  {
    try {
      (arg1)->SignalDisconnected(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_SlotObserver(void * jarg1) {
  Dali::SlotObserver *arg1 = (Dali::SlotObserver *) 0 ;

  arg1 = (Dali::SlotObserver *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_SlotObserver_SlotDisconnected(void * jarg1, void * jarg2) {
  Dali::SlotObserver *arg1 = (Dali::SlotObserver *) 0 ;
  Dali::CallbackBase *arg2 = (Dali::CallbackBase *) 0 ;

  arg1 = (Dali::SlotObserver *)jarg1;
  arg2 = (Dali::CallbackBase *)jarg2;
  {
    try {
      (arg1)->SlotDisconnected(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ConnectionTracker(void * jarg1) {
  Dali::ConnectionTracker *arg1 = (Dali::ConnectionTracker *) 0 ;

  arg1 = (Dali::ConnectionTracker *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ConnectionTracker_DisconnectAll(void * jarg1) {
  Dali::ConnectionTracker *arg1 = (Dali::ConnectionTracker *) 0 ;

  arg1 = (Dali::ConnectionTracker *)jarg1;
  {
    try {
      (arg1)->DisconnectAll();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ConnectionTracker_SignalConnected(void * jarg1, void * jarg2, void * jarg3) {
  Dali::ConnectionTracker *arg1 = (Dali::ConnectionTracker *) 0 ;
  Dali::SlotObserver *arg2 = (Dali::SlotObserver *) 0 ;
  Dali::CallbackBase *arg3 = (Dali::CallbackBase *) 0 ;

  arg1 = (Dali::ConnectionTracker *)jarg1;
  arg2 = (Dali::SlotObserver *)jarg2;
  arg3 = (Dali::CallbackBase *)jarg3;
  {
    try {
      (arg1)->SignalConnected(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ConnectionTracker_SignalDisconnected(void * jarg1, void * jarg2, void * jarg3) {
  Dali::ConnectionTracker *arg1 = (Dali::ConnectionTracker *) 0 ;
  Dali::SlotObserver *arg2 = (Dali::SlotObserver *) 0 ;
  Dali::CallbackBase *arg3 = (Dali::CallbackBase *) 0 ;

  arg1 = (Dali::ConnectionTracker *)jarg1;
  arg2 = (Dali::SlotObserver *)jarg2;
  arg3 = (Dali::CallbackBase *)jarg3;
  {
    try {
      (arg1)->SignalDisconnected(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ConnectionTracker_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::ConnectionTracker *arg1 = (Dali::ConnectionTracker *) 0 ;
  std::size_t result;

  arg1 = (Dali::ConnectionTracker *)jarg1;
  {
    try {
      result = ((Dali::ConnectionTracker const *)arg1)->GetConnectionCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ObjectRegistry__SWIG_0() {
  void * jresult ;
  Dali::ObjectRegistry *result = 0 ;

  {
    try {
      result = (Dali::ObjectRegistry *)new Dali::ObjectRegistry();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ObjectRegistry(void * jarg1) {
  Dali::ObjectRegistry *arg1 = (Dali::ObjectRegistry *) 0 ;

  arg1 = (Dali::ObjectRegistry *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ObjectRegistry__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::ObjectRegistry *arg1 = 0 ;
  Dali::ObjectRegistry *result = 0 ;

  arg1 = (Dali::ObjectRegistry *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::ObjectRegistry const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::ObjectRegistry *)new Dali::ObjectRegistry((Dali::ObjectRegistry const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ObjectRegistry_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::ObjectRegistry *arg1 = (Dali::ObjectRegistry *) 0 ;
  Dali::ObjectRegistry *arg2 = 0 ;
  Dali::ObjectRegistry *result = 0 ;

  arg1 = (Dali::ObjectRegistry *)jarg1;
  arg2 = (Dali::ObjectRegistry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::ObjectRegistry const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::ObjectRegistry *) &(arg1)->operator =((Dali::ObjectRegistry const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ObjectRegistry_ObjectCreatedSignal(void * jarg1) {
  void * jresult ;
  Dali::ObjectRegistry *arg1 = (Dali::ObjectRegistry *) 0 ;
  Dali::ObjectRegistry::ObjectCreatedSignalType *result = 0 ;

  arg1 = (Dali::ObjectRegistry *)jarg1;
  {
    try {
      result = (Dali::ObjectRegistry::ObjectCreatedSignalType *) &(arg1)->ObjectCreatedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ObjectRegistry_ObjectDestroyedSignal(void * jarg1) {
  void * jresult ;
  Dali::ObjectRegistry *arg1 = (Dali::ObjectRegistry *) 0 ;
  Dali::ObjectRegistry::ObjectDestroyedSignalType *result = 0 ;

  arg1 = (Dali::ObjectRegistry *)jarg1;
  {
    try {
      result = (Dali::ObjectRegistry::ObjectDestroyedSignalType *) &(arg1)->ObjectDestroyedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PropertyCondition__SWIG_0() {
  void * jresult ;
  Dali::PropertyCondition *result = 0 ;

  {
    try {
      result = (Dali::PropertyCondition *)new Dali::PropertyCondition();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PropertyCondition(void * jarg1) {
  Dali::PropertyCondition *arg1 = (Dali::PropertyCondition *) 0 ;

  arg1 = (Dali::PropertyCondition *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PropertyCondition__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::PropertyCondition *arg1 = 0 ;
  Dali::PropertyCondition *result = 0 ;

  arg1 = (Dali::PropertyCondition *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PropertyCondition const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::PropertyCondition *)new Dali::PropertyCondition((Dali::PropertyCondition const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PropertyCondition_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::PropertyCondition *arg1 = (Dali::PropertyCondition *) 0 ;
  Dali::PropertyCondition *arg2 = 0 ;
  Dali::PropertyCondition *result = 0 ;

  arg1 = (Dali::PropertyCondition *)jarg1;
  arg2 = (Dali::PropertyCondition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PropertyCondition const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::PropertyCondition *) &(arg1)->operator =((Dali::PropertyCondition const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_PropertyCondition_GetArgumentCount(void * jarg1) {
  unsigned long jresult ;
  Dali::PropertyCondition *arg1 = (Dali::PropertyCondition *) 0 ;
  std::size_t result;

  arg1 = (Dali::PropertyCondition *)jarg1;
  {
    try {
      result = ((Dali::PropertyCondition const *)arg1)->GetArgumentCount();
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_PropertyCondition_GetArgument(void * jarg1, unsigned long jarg2) {
  float jresult ;
  Dali::PropertyCondition *arg1 = (Dali::PropertyCondition *) 0 ;
  std::size_t arg2 ;
  float result;

  arg1 = (Dali::PropertyCondition *)jarg1;
  arg2 = (std::size_t)jarg2;
  {
    try {
      result = (float)((Dali::PropertyCondition const *)arg1)->GetArgument(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LessThanCondition(float jarg1) {
  void * jresult ;
  float arg1 ;
  Dali::PropertyCondition result;

  arg1 = (float)jarg1;
  {
    try {
      result = Dali::LessThanCondition(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PropertyCondition((const Dali::PropertyCondition &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GreaterThanCondition(float jarg1) {
  void * jresult ;
  float arg1 ;
  Dali::PropertyCondition result;

  arg1 = (float)jarg1;
  {
    try {
      result = Dali::GreaterThanCondition(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PropertyCondition((const Dali::PropertyCondition &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_InsideCondition(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Dali::PropertyCondition result;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = Dali::InsideCondition(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PropertyCondition((const Dali::PropertyCondition &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_OutsideCondition(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Dali::PropertyCondition result;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = Dali::OutsideCondition(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PropertyCondition((const Dali::PropertyCondition &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_StepCondition__SWIG_0(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Dali::PropertyCondition result;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = Dali::StepCondition(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PropertyCondition((const Dali::PropertyCondition &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_StepCondition__SWIG_1(float jarg1) {
  void * jresult ;
  float arg1 ;
  Dali::PropertyCondition result;

  arg1 = (float)jarg1;
  {
    try {
      result = Dali::StepCondition(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PropertyCondition((const Dali::PropertyCondition &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VariableStepCondition(void * jarg1) {
  void * jresult ;
  Dali::Vector< float,TypeTraits< float >::IS_TRIVIAL_TYPE==true > *arg1 = 0 ;
  Dali::PropertyCondition result;

  arg1 = (Dali::Vector< float,TypeTraits< float >::IS_TRIVIAL_TYPE==true > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector< float,TypeTraits< float >::IS_TRIVIAL_TYPE==true > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = Dali::VariableStepCondition((Dali::Vector< float,TypeTraits< float >::IS_TRIVIAL_TYPE==true > const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PropertyCondition((const Dali::PropertyCondition &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PropertyNotification__SWIG_0() {
  void * jresult ;
  Dali::PropertyNotification *result = 0 ;

  {
    try {
      result = (Dali::PropertyNotification *)new Dali::PropertyNotification();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PropertyNotification_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::PropertyNotification result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::PropertyNotification::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PropertyNotification((const Dali::PropertyNotification &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PropertyNotification(void * jarg1) {
  Dali::PropertyNotification *arg1 = (Dali::PropertyNotification *) 0 ;

  arg1 = (Dali::PropertyNotification *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PropertyNotification__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::PropertyNotification *arg1 = 0 ;
  Dali::PropertyNotification *result = 0 ;

  arg1 = (Dali::PropertyNotification *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PropertyNotification const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::PropertyNotification *)new Dali::PropertyNotification((Dali::PropertyNotification const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PropertyNotification_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::PropertyNotification *arg1 = (Dali::PropertyNotification *) 0 ;
  Dali::PropertyNotification *arg2 = 0 ;
  Dali::PropertyNotification *result = 0 ;

  arg1 = (Dali::PropertyNotification *)jarg1;
  arg2 = (Dali::PropertyNotification *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PropertyNotification const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::PropertyNotification *) &(arg1)->operator =((Dali::PropertyNotification const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PropertyNotification_GetCondition__SWIG_0(void * jarg1) {
  void * jresult ;
  Dali::PropertyNotification *arg1 = (Dali::PropertyNotification *) 0 ;
  Dali::PropertyCondition result;

  arg1 = (Dali::PropertyNotification *)jarg1;
  {
    try {
      result = (arg1)->GetCondition();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PropertyCondition((const Dali::PropertyCondition &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PropertyNotification_GetTarget(void * jarg1) {
  void * jresult ;
  Dali::PropertyNotification *arg1 = (Dali::PropertyNotification *) 0 ;
  Dali::Handle result;

  arg1 = (Dali::PropertyNotification *)jarg1;
  {
    try {
      result = ((Dali::PropertyNotification const *)arg1)->GetTarget();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Handle((const Dali::Handle &)result);
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PropertyNotification_GetTargetProperty(void * jarg1) {
  int jresult ;
  Dali::PropertyNotification *arg1 = (Dali::PropertyNotification *) 0 ;
  Dali::Property::Index result;

  arg1 = (Dali::PropertyNotification *)jarg1;
  {
    try {
      result = (Dali::Property::Index)((Dali::PropertyNotification const *)arg1)->GetTargetProperty();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PropertyNotification_SetNotifyMode(void * jarg1, int jarg2) {
  Dali::PropertyNotification *arg1 = (Dali::PropertyNotification *) 0 ;
  Dali::PropertyNotification::NotifyMode arg2 ;

  arg1 = (Dali::PropertyNotification *)jarg1;
  arg2 = (Dali::PropertyNotification::NotifyMode)jarg2;
  {
    try {
      (arg1)->SetNotifyMode(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PropertyNotification_GetNotifyMode(void * jarg1) {
  int jresult ;
  Dali::PropertyNotification *arg1 = (Dali::PropertyNotification *) 0 ;
  Dali::PropertyNotification::NotifyMode result;

  arg1 = (Dali::PropertyNotification *)jarg1;
  {
    try {
      result = (Dali::PropertyNotification::NotifyMode)(arg1)->GetNotifyMode();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_PropertyNotification_GetNotifyResult(void * jarg1) {
  bool jresult ;
  Dali::PropertyNotification *arg1 = (Dali::PropertyNotification *) 0 ;
  bool result;

  arg1 = (Dali::PropertyNotification *)jarg1;
  {
    try {
      result = (bool)((Dali::PropertyNotification const *)arg1)->GetNotifyResult();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PropertyNotification_NotifySignal(void * jarg1) {
  void * jresult ;
  Dali::PropertyNotification *arg1 = (Dali::PropertyNotification *) 0 ;
  Dali::PropertyNotifySignalType *result = 0 ;

  arg1 = (Dali::PropertyNotification *)jarg1;
  {
    try {
      result = (Dali::PropertyNotifySignalType *) &(arg1)->NotifySignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Handle__SWIG_0() {
  void * jresult ;
  Dali::Handle *result = 0 ;

  {
    try {
      result = (Dali::Handle *)new Dali::Handle();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Handle_New() {
  void * jresult ;
  Dali::Handle result;

  {
    try {
      result = Dali::Handle::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Handle((const Dali::Handle &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Handle(void * jarg1) {
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;

  arg1 = (Dali::Handle *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Handle__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Handle *arg1 = 0 ;
  Dali::Handle *result = 0 ;

  arg1 = (Dali::Handle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Handle const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Handle *)new Dali::Handle((Dali::Handle const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Handle_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  Dali::Handle *arg2 = 0 ;
  Dali::Handle *result = 0 ;

  arg1 = (Dali::Handle *)jarg1;
  arg2 = (Dali::Handle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Handle const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Handle *) &(arg1)->operator =((Dali::Handle const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Handle_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Handle result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Handle::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Handle((const Dali::Handle &)result);
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Handle_Supports(void * jarg1, int jarg2) {
  bool jresult ;
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  Dali::Handle::Capability arg2 ;
  bool result;

  arg1 = (Dali::Handle *)jarg1;
  arg2 = (Dali::Handle::Capability)jarg2;
  {
    try {
      result = (bool)((Dali::Handle const *)arg1)->Supports(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_Handle_GetPropertyCount(void * jarg1) {
  unsigned int jresult ;
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  unsigned int result;

  arg1 = (Dali::Handle *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::Handle const *)arg1)->GetPropertyCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_Handle_GetPropertyName(void * jarg1, int jarg2) {
  char * jresult ;
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  Dali::Property::Index arg2 ;
  std::string result;

  arg1 = (Dali::Handle *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  {
    try {
      result = ((Dali::Handle const *)arg1)->GetPropertyName(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = SWIG_csharp_string_callback((&result)->c_str());
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Handle_GetPropertyIndex(void * jarg1, char * jarg2) {
  int jresult ;
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Index result;

  arg1 = (Dali::Handle *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      result = (Dali::Property::Index)((Dali::Handle const *)arg1)->GetPropertyIndex((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Handle_IsPropertyWritable(void * jarg1, int jarg2) {
  bool jresult ;
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  Dali::Property::Index arg2 ;
  bool result;

  arg1 = (Dali::Handle *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  {
    try {
      result = (bool)((Dali::Handle const *)arg1)->IsPropertyWritable(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Handle_IsPropertyAnimatable(void * jarg1, int jarg2) {
  bool jresult ;
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  Dali::Property::Index arg2 ;
  bool result;

  arg1 = (Dali::Handle *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  {
    try {
      result = (bool)((Dali::Handle const *)arg1)->IsPropertyAnimatable(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Handle_IsPropertyAConstraintInput(void * jarg1, int jarg2) {
  bool jresult ;
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  Dali::Property::Index arg2 ;
  bool result;

  arg1 = (Dali::Handle *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  {
    try {
      result = (bool)((Dali::Handle const *)arg1)->IsPropertyAConstraintInput(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Handle_GetPropertyType(void * jarg1, int jarg2) {
  int jresult ;
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  Dali::Property::Index arg2 ;
  Dali::Property::Type result;

  arg1 = (Dali::Handle *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  {
    try {
      result = (Dali::Property::Type)((Dali::Handle const *)arg1)->GetPropertyType(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Handle_SetProperty(void * jarg1, int jarg2, void * jarg3) {
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  Dali::Property::Index arg2 ;
  Dali::Property::Value *arg3 = 0 ;

  arg1 = (Dali::Handle *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  arg3 = (Dali::Property::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Value const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetProperty(arg2,(Dali::Property::Value const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Handle_RegisterProperty__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Value *arg3 = 0 ;
  Dali::Property::Index result;

  arg1 = (Dali::Handle *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Property::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Value const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Property::Index)(arg1)->RegisterProperty((std::string const &)*arg2,(Dali::Property::Value const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Handle_RegisterProperty__SWIG_1(void * jarg1, char * jarg2, void * jarg3, int jarg4) {
  int jresult ;
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Value *arg3 = 0 ;
  Dali::Property::AccessMode arg4 ;
  Dali::Property::Index result;

  arg1 = (Dali::Handle *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Property::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Value const & type is null", 0);
    return 0;
  }
  arg4 = (Dali::Property::AccessMode)jarg4;
  {
    try {
      result = (Dali::Property::Index)(arg1)->RegisterProperty((std::string const &)*arg2,(Dali::Property::Value const &)*arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Handle_GetProperty(void * jarg1, int jarg2) {
  void * jresult ;
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  Dali::Property::Index arg2 ;
  Dali::Property::Value result;

  arg1 = (Dali::Handle *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  {
    try {
      result = ((Dali::Handle const *)arg1)->GetProperty(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Property::Value((const Dali::Property::Value &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Handle_GetPropertyIndices(void * jarg1, void * jarg2) {
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  Dali::Property::IndexContainer *arg2 = 0 ;

  arg1 = (Dali::Handle *)jarg1;
  arg2 = (Dali::Property::IndexContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::IndexContainer & type is null", 0);
    return ;
  }
  {
    try {
      ((Dali::Handle const *)arg1)->GetPropertyIndices(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Handle_AddPropertyNotification__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  Dali::Property::Index arg2 ;
  Dali::PropertyCondition *arg3 = 0 ;
  Dali::PropertyNotification result;

  arg1 = (Dali::Handle *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  arg3 = (Dali::PropertyCondition *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PropertyCondition const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (arg1)->AddPropertyNotification(arg2,(Dali::PropertyCondition const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PropertyNotification((const Dali::PropertyNotification &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Handle_AddPropertyNotification__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  Dali::Property::Index arg2 ;
  int arg3 ;
  Dali::PropertyCondition *arg4 = 0 ;
  Dali::PropertyNotification result;

  arg1 = (Dali::Handle *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  arg3 = (int)jarg3;
  arg4 = (Dali::PropertyCondition *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PropertyCondition const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (arg1)->AddPropertyNotification(arg2,arg3,(Dali::PropertyCondition const &)*arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PropertyNotification((const Dali::PropertyNotification &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Handle_RemovePropertyNotification(void * jarg1, void * jarg2) {
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  Dali::PropertyNotification arg2 ;
  Dali::PropertyNotification *argp2 ;

  arg1 = (Dali::Handle *)jarg1;
  argp2 = (Dali::PropertyNotification *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::PropertyNotification", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->RemovePropertyNotification(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Handle_RemovePropertyNotifications(void * jarg1) {
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;

  arg1 = (Dali::Handle *)jarg1;
  {
    try {
      (arg1)->RemovePropertyNotifications();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Handle_RemoveConstraints__SWIG_0(void * jarg1) {
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;

  arg1 = (Dali::Handle *)jarg1;
  {
    try {
      (arg1)->RemoveConstraints();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Handle_RemoveConstraints__SWIG_1(void * jarg1, unsigned int jarg2) {
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::Handle *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      (arg1)->RemoveConstraints(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_WEIGHT_get() {
  int jresult ;
  Dali::Property::Index result;

  result = (Dali::Property::Index)(Dali::Property::Index)Dali::WeightObject::WEIGHT;
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_New() {
  void * jresult ;
  Dali::Handle result;

  {
    try {
      result = Dali::WeightObject::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Handle((const Dali::Handle &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TypeInfo__SWIG_0() {
  void * jresult ;
  Dali::TypeInfo *result = 0 ;

  {
    try {
      result = (Dali::TypeInfo *)new Dali::TypeInfo();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TypeInfo(void * jarg1) {
  Dali::TypeInfo *arg1 = (Dali::TypeInfo *) 0 ;

  arg1 = (Dali::TypeInfo *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TypeInfo__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::TypeInfo *arg1 = 0 ;
  Dali::TypeInfo *result = 0 ;

  arg1 = (Dali::TypeInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TypeInfo const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::TypeInfo *)new Dali::TypeInfo((Dali::TypeInfo const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TypeInfo_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::TypeInfo *arg1 = (Dali::TypeInfo *) 0 ;
  Dali::TypeInfo *arg2 = 0 ;
  Dali::TypeInfo *result = 0 ;

  arg1 = (Dali::TypeInfo *)jarg1;
  arg2 = (Dali::TypeInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TypeInfo const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::TypeInfo *) &(arg1)->operator =((Dali::TypeInfo const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_TypeInfo_GetName(void * jarg1) {
  char * jresult ;
  Dali::TypeInfo *arg1 = (Dali::TypeInfo *) 0 ;
  std::string *result = 0 ;

  arg1 = (Dali::TypeInfo *)jarg1;
  {
    try {
      result = (std::string *) &((Dali::TypeInfo const *)arg1)->GetName();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = SWIG_csharp_string_callback(result->c_str());
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_TypeInfo_GetBaseName(void * jarg1) {
  char * jresult ;
  Dali::TypeInfo *arg1 = (Dali::TypeInfo *) 0 ;
  std::string *result = 0 ;

  arg1 = (Dali::TypeInfo *)jarg1;
  {
    try {
      result = (std::string *) &((Dali::TypeInfo const *)arg1)->GetBaseName();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = SWIG_csharp_string_callback(result->c_str());
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TypeInfo_CreateInstance(void * jarg1) {
  void * jresult ;
  Dali::TypeInfo *arg1 = (Dali::TypeInfo *) 0 ;
  Dali::BaseHandle result;

  arg1 = (Dali::TypeInfo *)jarg1;
  {
    try {
      result = ((Dali::TypeInfo const *)arg1)->CreateInstance();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::BaseHandle((const Dali::BaseHandle &)result);
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_TypeInfo_GetActionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::TypeInfo *arg1 = (Dali::TypeInfo *) 0 ;
  size_t result;

  arg1 = (Dali::TypeInfo *)jarg1;
  {
    try {
      result = ((Dali::TypeInfo const *)arg1)->GetActionCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_TypeInfo_GetActionName(void * jarg1, unsigned long jarg2) {
  char * jresult ;
  Dali::TypeInfo *arg1 = (Dali::TypeInfo *) 0 ;
  size_t arg2 ;
  std::string result;

  arg1 = (Dali::TypeInfo *)jarg1;
  arg2 = (size_t)jarg2;
  {
    try {
      result = (arg1)->GetActionName(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = SWIG_csharp_string_callback((&result)->c_str());
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_TypeInfo_GetSignalCount(void * jarg1) {
  unsigned long jresult ;
  Dali::TypeInfo *arg1 = (Dali::TypeInfo *) 0 ;
  size_t result;

  arg1 = (Dali::TypeInfo *)jarg1;
  {
    try {
      result = ((Dali::TypeInfo const *)arg1)->GetSignalCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_TypeInfo_GetSignalName(void * jarg1, unsigned long jarg2) {
  char * jresult ;
  Dali::TypeInfo *arg1 = (Dali::TypeInfo *) 0 ;
  size_t arg2 ;
  std::string result;

  arg1 = (Dali::TypeInfo *)jarg1;
  arg2 = (size_t)jarg2;
  {
    try {
      result = (arg1)->GetSignalName(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = SWIG_csharp_string_callback((&result)->c_str());
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_TypeInfo_GetPropertyCount(void * jarg1) {
  unsigned long jresult ;
  Dali::TypeInfo *arg1 = (Dali::TypeInfo *) 0 ;
  size_t result;

  arg1 = (Dali::TypeInfo *)jarg1;
  {
    try {
      result = ((Dali::TypeInfo const *)arg1)->GetPropertyCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TypeInfo_GetPropertyIndices(void * jarg1, void * jarg2) {
  Dali::TypeInfo *arg1 = (Dali::TypeInfo *) 0 ;
  Dali::Property::IndexContainer *arg2 = 0 ;

  arg1 = (Dali::TypeInfo *)jarg1;
  arg2 = (Dali::Property::IndexContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::IndexContainer & type is null", 0);
    return ;
  }
  {
    try {
      ((Dali::TypeInfo const *)arg1)->GetPropertyIndices(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_TypeInfo_GetPropertyName(void * jarg1, int jarg2) {
  char * jresult ;
  Dali::TypeInfo *arg1 = (Dali::TypeInfo *) 0 ;
  Dali::Property::Index arg2 ;
  std::string_view result;

  arg1 = (Dali::TypeInfo *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  {
    try {
      result = ((Dali::TypeInfo const *)arg1)->GetPropertyName(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = SWIG_csharp_string_callback(result.data());
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TypeRegistry_Get() {
  void * jresult ;
  Dali::TypeRegistry result;

  {
    try {
      result = Dali::TypeRegistry::Get();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::TypeRegistry((const Dali::TypeRegistry &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TypeRegistry__SWIG_0() {
  void * jresult ;
  Dali::TypeRegistry *result = 0 ;

  {
    try {
      result = (Dali::TypeRegistry *)new Dali::TypeRegistry();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TypeRegistry(void * jarg1) {
  Dali::TypeRegistry *arg1 = (Dali::TypeRegistry *) 0 ;

  arg1 = (Dali::TypeRegistry *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TypeRegistry__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::TypeRegistry *arg1 = 0 ;
  Dali::TypeRegistry *result = 0 ;

  arg1 = (Dali::TypeRegistry *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TypeRegistry const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::TypeRegistry *)new Dali::TypeRegistry((Dali::TypeRegistry const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TypeRegistry_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::TypeRegistry *arg1 = (Dali::TypeRegistry *) 0 ;
  Dali::TypeRegistry *arg2 = 0 ;
  Dali::TypeRegistry *result = 0 ;

  arg1 = (Dali::TypeRegistry *)jarg1;
  arg2 = (Dali::TypeRegistry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TypeRegistry const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::TypeRegistry *) &(arg1)->operator =((Dali::TypeRegistry const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TypeRegistry_GetTypeInfo__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  Dali::TypeRegistry *arg1 = (Dali::TypeRegistry *) 0 ;
  std::string *arg2 = 0 ;
  Dali::TypeInfo result;

  arg1 = (Dali::TypeRegistry *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      result = (arg1)->GetTypeInfo((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::TypeInfo((const Dali::TypeInfo &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TypeRegistry_GetTypeInfo__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::TypeRegistry *arg1 = (Dali::TypeRegistry *) 0 ;
  std::type_info *arg2 = 0 ;
  Dali::TypeInfo result;

  arg1 = (Dali::TypeRegistry *)jarg1;
  arg2 = (std::type_info *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::type_info const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (arg1)->GetTypeInfo((std::type_info const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::TypeInfo((const Dali::TypeInfo &)result);
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_TypeRegistry_GetTypeNameCount(void * jarg1) {
  unsigned long jresult ;
  Dali::TypeRegistry *arg1 = (Dali::TypeRegistry *) 0 ;
  size_t result;

  arg1 = (Dali::TypeRegistry *)jarg1;
  {
    try {
      result = ((Dali::TypeRegistry const *)arg1)->GetTypeNameCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_TypeRegistry_GetTypeName(void * jarg1, unsigned long jarg2) {
  char * jresult ;
  Dali::TypeRegistry *arg1 = (Dali::TypeRegistry *) 0 ;
  size_t arg2 ;
  std::string result;

  arg1 = (Dali::TypeRegistry *)jarg1;
  arg2 = (size_t)jarg2;
  {
    try {
      result = ((Dali::TypeRegistry const *)arg1)->GetTypeName(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = SWIG_csharp_string_callback((&result)->c_str());
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TypeRegistration__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::type_info *arg1 = 0 ;
  std::type_info *arg2 = 0 ;
  Dali::TypeInfo::CreateFunction arg3 = (Dali::TypeInfo::CreateFunction) 0 ;
  Dali::TypeRegistration *result = 0 ;

  arg1 = (std::type_info *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::type_info const & type is null", 0);
    return 0;
  }
  arg2 = (std::type_info *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::type_info const & type is null", 0);
    return 0;
  }
  arg3 = (Dali::TypeInfo::CreateFunction)jarg3;
  {
    try {
      result = (Dali::TypeRegistration *)new Dali::TypeRegistration((std::type_info const &)*arg1,(std::type_info const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TypeRegistration__SWIG_1(void * jarg1, void * jarg2, void * jarg3, bool jarg4) {
  void * jresult ;
  std::type_info *arg1 = 0 ;
  std::type_info *arg2 = 0 ;
  Dali::TypeInfo::CreateFunction arg3 = (Dali::TypeInfo::CreateFunction) 0 ;
  bool arg4 ;
  Dali::TypeRegistration *result = 0 ;

  arg1 = (std::type_info *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::type_info const & type is null", 0);
    return 0;
  }
  arg2 = (std::type_info *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::type_info const & type is null", 0);
    return 0;
  }
  arg3 = (Dali::TypeInfo::CreateFunction)jarg3;
  arg4 = jarg4 ? true : false;
  {
    try {
      result = (Dali::TypeRegistration *)new Dali::TypeRegistration((std::type_info const &)*arg1,(std::type_info const &)*arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TypeRegistration__SWIG_2(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::type_info *arg2 = 0 ;
  Dali::TypeInfo::CreateFunction arg3 = (Dali::TypeInfo::CreateFunction) 0 ;
  Dali::TypeRegistration *result = 0 ;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  arg2 = (std::type_info *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::type_info const & type is null", 0);
    return 0;
  }
  arg3 = (Dali::TypeInfo::CreateFunction)jarg3;
  {
    try {
      result = (Dali::TypeRegistration *)new Dali::TypeRegistration((std::string const &)*arg1,(std::type_info const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_TypeRegistration_RegisteredName(void * jarg1) {
  char * jresult ;
  Dali::TypeRegistration *arg1 = (Dali::TypeRegistration *) 0 ;
  std::string result;

  arg1 = (Dali::TypeRegistration *)jarg1;
  {
    try {
      result = ((Dali::TypeRegistration const *)arg1)->RegisteredName();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = SWIG_csharp_string_callback((&result)->c_str());
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TypeRegistration_RegisterControl(char * jarg1, void * jarg2) {
  std::string *arg1 = 0 ;
  Dali::CSharpTypeInfo::CreateFunction arg2 = (Dali::CSharpTypeInfo::CreateFunction) 0 ;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  arg2 = (Dali::CSharpTypeInfo::CreateFunction)jarg2;
  {
    try {
      Dali_TypeRegistration_RegisterControl((std::string const &)*arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }


  //argout typemap for const std::string&

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TypeRegistration_RegisterProperty(char * jarg1, char * jarg2, int jarg3, int jarg4, void * jarg5, void * jarg6) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  Dali::Property::Type arg4 ;
  Dali::CSharpTypeInfo::SetPropertyFunction arg5 = (Dali::CSharpTypeInfo::SetPropertyFunction) 0 ;
  Dali::CSharpTypeInfo::GetPropertyFunction arg6 = (Dali::CSharpTypeInfo::GetPropertyFunction) 0 ;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (int)jarg3;
  arg4 = (Dali::Property::Type)jarg4;
  arg5 = (Dali::CSharpTypeInfo::SetPropertyFunction)jarg5;
  arg6 = (Dali::CSharpTypeInfo::GetPropertyFunction)jarg6;
  {
    try {
      Dali_TypeRegistration_RegisterProperty((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5,arg6);
    } CALL_CATCH_EXCEPTION();
  }


  //argout typemap for const std::string&


  //argout typemap for const std::string&

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TypeRegistration(void * jarg1) {
  Dali::TypeRegistration *arg1 = (Dali::TypeRegistration *) 0 ;

  arg1 = (Dali::TypeRegistration *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_SignalConnectorType(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Dali::TypeRegistration *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Dali::TypeInfo::SignalConnectorFunction arg3 = (Dali::TypeInfo::SignalConnectorFunction) 0 ;
  Dali::SignalConnectorType *result = 0 ;

  arg1 = (Dali::TypeRegistration *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TypeRegistration & type is null", 0);
    return 0;
  }
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::TypeInfo::SignalConnectorFunction)jarg3;
  {
    try {
      result = (Dali::SignalConnectorType *)new Dali::SignalConnectorType(*arg1,(std::string const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_SignalConnectorType(void * jarg1) {
  Dali::SignalConnectorType *arg1 = (Dali::SignalConnectorType *) 0 ;

  arg1 = (Dali::SignalConnectorType *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TypeAction(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Dali::TypeRegistration *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Dali::TypeInfo::ActionFunction arg3 = (Dali::TypeInfo::ActionFunction) 0 ;
  Dali::TypeAction *result = 0 ;

  arg1 = (Dali::TypeRegistration *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TypeRegistration & type is null", 0);
    return 0;
  }
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::TypeInfo::ActionFunction)jarg3;
  {
    try {
      result = (Dali::TypeAction *)new Dali::TypeAction(*arg1,(std::string const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TypeAction(void * jarg1) {
  Dali::TypeAction *arg1 = (Dali::TypeAction *) 0 ;

  arg1 = (Dali::TypeAction *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PropertyRegistration(void * jarg1, char * jarg2, int jarg3, int jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  Dali::TypeRegistration *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Index arg3 ;
  Dali::Property::Type arg4 ;
  Dali::TypeInfo::SetPropertyFunction arg5 = (Dali::TypeInfo::SetPropertyFunction) 0 ;
  Dali::TypeInfo::GetPropertyFunction arg6 = (Dali::TypeInfo::GetPropertyFunction) 0 ;
  Dali::PropertyRegistration *result = 0 ;

  arg1 = (Dali::TypeRegistration *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TypeRegistration & type is null", 0);
    return 0;
  }
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Property::Index)jarg3;
  arg4 = (Dali::Property::Type)jarg4;
  arg5 = (Dali::TypeInfo::SetPropertyFunction)jarg5;
  arg6 = (Dali::TypeInfo::GetPropertyFunction)jarg6;
  {
    try {
      result = (Dali::PropertyRegistration *)new Dali::PropertyRegistration(*arg1,(std::string const &)*arg2,arg3,arg4,arg5,arg6);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PropertyRegistration(void * jarg1) {
  Dali::PropertyRegistration *arg1 = (Dali::PropertyRegistration *) 0 ;

  arg1 = (Dali::PropertyRegistration *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_AnimatablePropertyRegistration__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  Dali::TypeRegistration *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Index arg3 ;
  Dali::Property::Type arg4 ;
  Dali::AnimatablePropertyRegistration *result = 0 ;

  arg1 = (Dali::TypeRegistration *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TypeRegistration & type is null", 0);
    return 0;
  }
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Property::Index)jarg3;
  arg4 = (Dali::Property::Type)jarg4;
  {
    try {
      result = (Dali::AnimatablePropertyRegistration *)new Dali::AnimatablePropertyRegistration(*arg1,(std::string const &)*arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_AnimatablePropertyRegistration__SWIG_1(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  Dali::TypeRegistration *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Index arg3 ;
  Dali::Property::Value *arg4 = 0 ;
  Dali::AnimatablePropertyRegistration *result = 0 ;

  arg1 = (Dali::TypeRegistration *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TypeRegistration & type is null", 0);
    return 0;
  }
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Property::Index)jarg3;
  arg4 = (Dali::Property::Value *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Value const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::AnimatablePropertyRegistration *)new Dali::AnimatablePropertyRegistration(*arg1,(std::string const &)*arg2,arg3,(Dali::Property::Value const &)*arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_AnimatablePropertyRegistration(void * jarg1) {
  Dali::AnimatablePropertyRegistration *arg1 = (Dali::AnimatablePropertyRegistration *) 0 ;

  arg1 = (Dali::AnimatablePropertyRegistration *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_AnimatablePropertyComponentRegistration(void * jarg1, char * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  void * jresult ;
  Dali::TypeRegistration *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Index arg3 ;
  Dali::Property::Index arg4 ;
  unsigned int arg5 ;
  Dali::AnimatablePropertyComponentRegistration *result = 0 ;

  arg1 = (Dali::TypeRegistration *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TypeRegistration & type is null", 0);
    return 0;
  }
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Property::Index)jarg3;
  arg4 = (Dali::Property::Index)jarg4;
  arg5 = (unsigned int)jarg5;
  {
    try {
      result = (Dali::AnimatablePropertyComponentRegistration *)new Dali::AnimatablePropertyComponentRegistration(*arg1,(std::string const &)*arg2,arg3,arg4,arg5);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_AnimatablePropertyComponentRegistration(void * jarg1) {
  Dali::AnimatablePropertyComponentRegistration *arg1 = (Dali::AnimatablePropertyComponentRegistration *) 0 ;

  arg1 = (Dali::AnimatablePropertyComponentRegistration *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ChildPropertyRegistration(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  Dali::TypeRegistration *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Index arg3 ;
  Dali::Property::Type arg4 ;
  Dali::ChildPropertyRegistration *result = 0 ;

  arg1 = (Dali::TypeRegistration *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TypeRegistration & type is null", 0);
    return 0;
  }
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Property::Index)jarg3;
  arg4 = (Dali::Property::Type)jarg4;
  {
    try {
      result = (Dali::ChildPropertyRegistration *)new Dali::ChildPropertyRegistration(*arg1,(std::string const &)*arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ChildPropertyRegistration(void * jarg1) {
  Dali::ChildPropertyRegistration *arg1 = (Dali::ChildPropertyRegistration *) 0 ;

  arg1 = (Dali::ChildPropertyRegistration *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_RegisterType(char * jarg1, void * jarg2, void * jarg3) {
  bool jresult ;
  std::string *arg1 = 0 ;
  std::type_info *arg2 = 0 ;
  Dali::CSharpTypeInfo::CreateFunction arg3 = (Dali::CSharpTypeInfo::CreateFunction) 0 ;
  bool result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  arg2 = (std::type_info *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::type_info const & type is null", 0);
    return 0;
  }
  arg3 = (Dali::CSharpTypeInfo::CreateFunction)jarg3;
  {
    try {
      result = (bool)Dali::CSharpTypeRegistry::RegisterType((std::string const &)*arg1,(std::type_info const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_RegisterProperty(char * jarg1, char * jarg2, int jarg3, int jarg4, void * jarg5, void * jarg6) {
  bool jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Index arg3 ;
  Dali::Property::Type arg4 ;
  Dali::CSharpTypeInfo::SetPropertyFunction arg5 = (Dali::CSharpTypeInfo::SetPropertyFunction) 0 ;
  Dali::CSharpTypeInfo::GetPropertyFunction arg6 = (Dali::CSharpTypeInfo::GetPropertyFunction) 0 ;
  bool result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Property::Index)jarg3;
  arg4 = (Dali::Property::Type)jarg4;
  arg5 = (Dali::CSharpTypeInfo::SetPropertyFunction)jarg5;
  arg6 = (Dali::CSharpTypeInfo::GetPropertyFunction)jarg6;
  {
    try {
      result = (bool)Dali::CSharpTypeRegistry::RegisterProperty((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5,arg6);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;

  //argout typemap for const std::string&


  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ParentOriginTop_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::ParentOrigin::TOP;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ParentOriginBottom_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::ParentOrigin::BOTTOM;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ParentOriginLeft_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::ParentOrigin::LEFT;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ParentOriginRight_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::ParentOrigin::RIGHT;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ParentOriginMiddle_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::ParentOrigin::MIDDLE;
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ParentOriginTopLeft_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::ParentOrigin::TOP_LEFT;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ParentOriginTopCenter_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::ParentOrigin::TOP_CENTER;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ParentOriginTopRight_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::ParentOrigin::TOP_RIGHT;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ParentOriginCenterLeft_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::ParentOrigin::CENTER_LEFT;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ParentOriginCenter_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::ParentOrigin::CENTER;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ParentOriginCenterRight_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::ParentOrigin::CENTER_RIGHT;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ParentOriginBottomLeft_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::ParentOrigin::BOTTOM_LEFT;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ParentOriginBottomCenter_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::ParentOrigin::BOTTOM_CENTER;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ParentOriginBottomRight_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::ParentOrigin::BOTTOM_RIGHT;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_AnchorPointTop_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::AnchorPoint::TOP;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_AnchorPointBottom_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::AnchorPoint::BOTTOM;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_AnchorPointLeft_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::AnchorPoint::LEFT;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_AnchorPointRight_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::AnchorPoint::RIGHT;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_AnchorPointMiddle_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::AnchorPoint::MIDDLE;
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AnchorPointTopLeft_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::AnchorPoint::TOP_LEFT;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AnchorPointTopCenter_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::AnchorPoint::TOP_CENTER;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AnchorPointTopRight_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::AnchorPoint::TOP_RIGHT;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AnchorPointCenterLeft_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::AnchorPoint::CENTER_LEFT;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AnchorPointCenter_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::AnchorPoint::CENTER;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AnchorPointCenterRight_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::AnchorPoint::CENTER_RIGHT;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AnchorPointBottomLeft_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::AnchorPoint::BOTTOM_LEFT;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AnchorPointBottomCenter_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::AnchorPoint::BOTTOM_CENTER;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AnchorPointBottomRight_get() {
  void * jresult ;
  Dali::Vector3 *result = 0 ;

  result = (Dali::Vector3 *)&Dali::AnchorPoint::BOTTOM_RIGHT;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ALICE_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::ALICE_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ANTIQUE_WHITE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::ANTIQUE_WHITE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AQUA_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::AQUA;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AQUA_MARINE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::AQUA_MARINE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AZURE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::AZURE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_BEIGE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::BEIGE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_BISQUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::BISQUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_BLACK_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::BLACK;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_BLANCHE_DALMOND_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::BLANCHE_DALMOND;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_BLUE_VIOLET_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::BLUE_VIOLET;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_BROWN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::BROWN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_BURLY_WOOD_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::BURLY_WOOD;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CADET_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::CADET_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CHARTREUSE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::CHARTREUSE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CHOCOLATE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::CHOCOLATE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CORAL_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::CORAL;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CORNFLOWER_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::CORNFLOWER_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CORNSILK_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::CORNSILK;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CRIMSON_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::CRIMSON;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CYAN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::CYAN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_CYAN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_CYAN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_GOLDENROD_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_GOLDENROD;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_GRAY_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_GRAY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_GREEN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_GREEN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_GREY_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_GREY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_KHAKI_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_KHAKI;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_MAGENTA_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_MAGENTA;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_OLIVE_GREEN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_OLIVE_GREEN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_ORANGE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_ORANGE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_ORCHID_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_ORCHID;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_RED_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_RED;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_SALMON_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_SALMON;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_SEA_GREEN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_SEA_GREEN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_SLATE_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_SLATE_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_SLATE_GRAY_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_SLATE_GRAY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_SLATE_GREY_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_SLATE_GREY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_TURQUOISE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_TURQUOISE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DARK_VIOLET_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DARK_VIOLET;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DEEP_PINK_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DEEP_PINK;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DEEP_SKY_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DEEP_SKY_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DIM_GRAY_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DIM_GRAY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DIM_GREY_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DIM_GREY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DODGER_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::DODGER_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_FIRE_BRICK_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::FIRE_BRICK;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_FLORAL_WHITE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::FLORAL_WHITE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_FOREST_GREEN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::FOREST_GREEN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_FUCHSIA_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::FUCHSIA;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GAINSBORO_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::GAINSBORO;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GHOST_WHITE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::GHOST_WHITE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GOLD_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::GOLD;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GOLDEN_ROD_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::GOLDEN_ROD;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GRAY_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::GRAY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GREEN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::GREEN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GREEN_YELLOW_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::GREEN_YELLOW;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GREY_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::GREY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_HONEYDEW_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::HONEYDEW;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_HOT_PINK_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::HOT_PINK;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_INDIANRED_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::INDIANRED;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_INDIGO_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::INDIGO;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_IVORY_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::IVORY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_KHAKI_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::KHAKI;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LAVENDER_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LAVENDER;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LAVENDER_BLUSH_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LAVENDER_BLUSH;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LAWN_GREEN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LAWN_GREEN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LEMON_CHIFFON_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LEMON_CHIFFON;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LIGHT_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LIGHT_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LIGHT_CORAL_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LIGHT_CORAL;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LIGHT_CYAN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LIGHT_CYAN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LIGHT_GOLDEN_ROD_YELLOW_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LIGHT_GOLDEN_ROD_YELLOW;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LIGHT_GRAY_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LIGHT_GRAY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LIGHT_GREEN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LIGHT_GREEN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LIGHT_GREY_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LIGHT_GREY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LIGHT_PINK_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LIGHT_PINK;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LIGHT_SALMON_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LIGHT_SALMON;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LIGHT_SEA_GREEN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LIGHT_SEA_GREEN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LIGHT_SKY_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LIGHT_SKY_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LIGHT_SLATE_GRAY_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LIGHT_SLATE_GRAY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LIGHT_SLATE_GREY_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LIGHT_SLATE_GREY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LIGHT_STEEL_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LIGHT_STEEL_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LIGHT_YELLOW_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LIGHT_YELLOW;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LIME_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LIME;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LIME_GREEN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LIME_GREEN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LINEN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::LINEN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_MAGENTA_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::MAGENTA;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_MAROON_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::MAROON;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_MEDIUM_AQUA_MARINE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::MEDIUM_AQUA_MARINE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_MEDIUM_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::MEDIUM_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_MEDIUM_ORCHID_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::MEDIUM_ORCHID;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_MEDIUM_PURPLE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::MEDIUM_PURPLE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_MEDIUM_SEA_GREEN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::MEDIUM_SEA_GREEN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_MEDIUM_SLATE_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::MEDIUM_SLATE_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_MEDIUM_SPRING_GREEN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::MEDIUM_SPRING_GREEN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_MEDIUM_TURQUOISE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::MEDIUM_TURQUOISE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_MEDIUM_VIOLETRED_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::MEDIUM_VIOLETRED;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_MIDNIGHT_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::MIDNIGHT_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_MINT_CREAM_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::MINT_CREAM;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_MISTY_ROSE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::MISTY_ROSE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_MOCCASIN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::MOCCASIN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_NAVAJO_WHITE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::NAVAJO_WHITE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_NAVY_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::NAVY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_OLD_LACE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::OLD_LACE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_OLIVE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::OLIVE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_OLIVE_DRAB_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::OLIVE_DRAB;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ORANGE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::ORANGE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ORANGE_RED_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::ORANGE_RED;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ORCHID_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::ORCHID;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PALE_GOLDEN_ROD_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::PALE_GOLDEN_ROD;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PALE_GREEN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::PALE_GREEN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PALE_TURQUOISE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::PALE_TURQUOISE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PALE_VIOLET_RED_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::PALE_VIOLET_RED;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PAPAYA_WHIP_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::PAPAYA_WHIP;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PEACH_PUFF_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::PEACH_PUFF;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PERU_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::PERU;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PINK_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::PINK;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PLUM_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::PLUM;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_POWDER_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::POWDER_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PURPLE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::PURPLE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RED_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::RED;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ROSY_BROWN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::ROSY_BROWN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ROYAL_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::ROYAL_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_SADDLE_BROWN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::SADDLE_BROWN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_SALMON_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::SALMON;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_SANDY_BROWN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::SANDY_BROWN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_SEA_GREEN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::SEA_GREEN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_SEA_SHELL_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::SEA_SHELL;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_SIENNA_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::SIENNA;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_SILVER_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::SILVER;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_SKY_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::SKY_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_SLATE_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::SLATE_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_SLATE_GRAY_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::SLATE_GRAY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_SLATE_GREY_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::SLATE_GREY;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_SNOW_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::SNOW;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_SPRING_GREEN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::SPRING_GREEN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_STEEL_BLUE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::STEEL_BLUE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TAN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::TAN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TEAL_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::TEAL;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_THISTLE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::THISTLE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TOMATO_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::TOMATO;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TRANSPARENT_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::TRANSPARENT;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TURQUOISE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::TURQUOISE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VIOLET_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::VIOLET;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_WHEAT_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::WHEAT;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_WHITE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::WHITE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_WHITE_SMOKE_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::WHITE_SMOKE;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_YELLOW_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::YELLOW;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_YELLOW_GREEN_get() {
  void * jresult;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::Color::YELLOW_GREEN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_MACHINE_EPSILON_0_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::Math::MACHINE_EPSILON_0;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_MACHINE_EPSILON_1_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::Math::MACHINE_EPSILON_1;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_MACHINE_EPSILON_10_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::Math::MACHINE_EPSILON_10;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_MACHINE_EPSILON_100_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::Math::MACHINE_EPSILON_100;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_MACHINE_EPSILON_1000_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::Math::MACHINE_EPSILON_1000;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_MACHINE_EPSILON_10000_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::Math::MACHINE_EPSILON_10000;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_PI_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::Math::PI;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_PI_2_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::Math::PI_2;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_PI_4_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::Math::PI_4;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_PI_OVER_180_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::Math::PI_OVER_180;
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ONE80_OVER_PI_get() {
  float jresult ;
  float result;

  result = (float)(float)Dali::Math::ONE80_OVER_PI;
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ResizePolicyDefault_get() {
  int jresult ;
  Dali::ResizePolicy::Type result;

  result = (Dali::ResizePolicy::Type)(Dali::ResizePolicy::Type)Dali::ResizePolicy::DEFAULT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_VectorBase_Count(void * jarg1) {
  unsigned long jresult ;
  Dali::VectorBase *arg1 = (Dali::VectorBase *) 0 ;
  Dali::VectorBase::SizeType result;

  arg1 = (Dali::VectorBase *)jarg1;
  {
    try {
      result = ((Dali::VectorBase const *)arg1)->Count();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_VectorBase_Size(void * jarg1) {
  unsigned long jresult ;
  Dali::VectorBase *arg1 = (Dali::VectorBase *) 0 ;
  Dali::VectorBase::SizeType result;

  arg1 = (Dali::VectorBase *)jarg1;
  {
    try {
      result = ((Dali::VectorBase const *)arg1)->Size();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_VectorBase_Empty(void * jarg1) {
  bool jresult ;
  Dali::VectorBase *arg1 = (Dali::VectorBase *) 0 ;
  bool result;

  arg1 = (Dali::VectorBase *)jarg1;
  {
    try {
      result = (bool)((Dali::VectorBase const *)arg1)->Empty();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_VectorBase_Capacity(void * jarg1) {
  unsigned long jresult ;
  Dali::VectorBase *arg1 = (Dali::VectorBase *) 0 ;
  Dali::VectorBase::SizeType result;

  arg1 = (Dali::VectorBase *)jarg1;
  {
    try {
      result = ((Dali::VectorBase const *)arg1)->Capacity();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorBase_Release(void * jarg1) {
  Dali::VectorBase *arg1 = (Dali::VectorBase *) 0 ;

  arg1 = (Dali::VectorBase *)jarg1;
  {
    try {
      (arg1)->Release();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_FIRST_VALID_PIXEL_FORMAT_get() {
  int jresult ;
  Dali::Pixel::Format result;

  result = (Dali::Pixel::Format)(Dali::Pixel::Format)Dali::Pixel::FIRST_VALID_PIXEL_FORMAT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_LAST_VALID_PIXEL_FORMAT_get() {
  int jresult ;
  Dali::Pixel::Format result;

  result = (Dali::Pixel::Format)(Dali::Pixel::Format)Dali::Pixel::LAST_VALID_PIXEL_FORMAT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_HasAlpha(int jarg1) {
  bool jresult ;
  Dali::Pixel::Format arg1 ;
  bool result;

  arg1 = (Dali::Pixel::Format)jarg1;
  {
    try {
      result = (bool)Dali::Pixel::HasAlpha(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_GetBytesPerPixel(int jarg1) {
  unsigned int jresult ;
  Dali::Pixel::Format arg1 ;
  unsigned int result;

  arg1 = (Dali::Pixel::Format)jarg1;
  {
    try {
      result = (unsigned int)Dali::Pixel::GetBytesPerPixel(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_GetAlphaOffsetAndMask(int jarg1, void * jarg2, void * jarg3) {
  Dali::Pixel::Format arg1 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;

  arg1 = (Dali::Pixel::Format)jarg1;
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  }
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  }
  {
    try {
      Dali::Pixel::GetAlphaOffsetAndMask(arg1,*arg2,*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PixelData_New(unsigned char* jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6) {
  void * jresult ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  Dali::Pixel::Format arg5 ;
  Dali::PixelData::ReleaseFunction arg6 ;
  Dali::PixelData result;

  arg1 = jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (unsigned int)jarg3;
  arg4 = (unsigned int)jarg4;
  arg5 = (Dali::Pixel::Format)jarg5;
  arg6 = (Dali::PixelData::ReleaseFunction)jarg6;
  {
    try {
      auto pixelBuffer = new unsigned char[jarg2];
      memcpy( pixelBuffer, arg1, arg2);
      result = Dali::PixelData::New(pixelBuffer,arg2,arg3,arg4,arg5,arg6);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PixelData((const Dali::PixelData &)result);


  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PixelData__SWIG_0() {
  void * jresult ;
  Dali::PixelData *result = 0 ;

  {
    try {
      result = (Dali::PixelData *)new Dali::PixelData();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PixelData(void * jarg1) {
  Dali::PixelData *arg1 = (Dali::PixelData *) 0 ;

  arg1 = (Dali::PixelData *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PixelData__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::PixelData *arg1 = 0 ;
  Dali::PixelData *result = 0 ;

  arg1 = (Dali::PixelData *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PixelData const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::PixelData *)new Dali::PixelData((Dali::PixelData const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PixelData_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::PixelData *arg1 = (Dali::PixelData *) 0 ;
  Dali::PixelData *arg2 = 0 ;
  Dali::PixelData *result = 0 ;

  arg1 = (Dali::PixelData *)jarg1;
  arg2 = (Dali::PixelData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PixelData const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::PixelData *) &(arg1)->operator =((Dali::PixelData const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_PixelData_GetWidth(void * jarg1) {
  unsigned int jresult ;
  Dali::PixelData *arg1 = (Dali::PixelData *) 0 ;
  unsigned int result;

  arg1 = (Dali::PixelData *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::PixelData const *)arg1)->GetWidth();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_PixelData_GetHeight(void * jarg1) {
  unsigned int jresult ;
  Dali::PixelData *arg1 = (Dali::PixelData *) 0 ;
  unsigned int result;

  arg1 = (Dali::PixelData *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::PixelData const *)arg1)->GetHeight();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PixelData_GetPixelFormat(void * jarg1) {
  int jresult ;
  Dali::PixelData *arg1 = (Dali::PixelData *) 0 ;
  Dali::Pixel::Format result;

  arg1 = (Dali::PixelData *)jarg1;
  {
    try {
      result = (Dali::Pixel::Format)((Dali::PixelData const *)arg1)->GetPixelFormat();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}

SWIGEXPORT void* SWIGSTDCALL CSharp_Dali_PixelData_GenerateUrl(void* handle)
{
  Dali::PixelData* pixelData = (Dali::PixelData*)handle;
  Dali::Toolkit::ImageUrl result;
  void *jresult;

  if (!pixelData)
  {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "some argument is null", 0);
    return 0;
  }
  {
    try
    {
      result = Dali::Toolkit::Image::GenerateUrl(*pixelData);
    }
    catch (std::out_of_range& e)
    {
      SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what()));
      return 0;
    }
    catch (std::exception& e)
    {
      SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what()));
      return 0;
    }
    catch (Dali::DaliException e)
    {
      SWIG_CSharpException(SWIG_UnknownError, e.condition);
      return 0;
    }
    catch (...)
    {
      SWIG_CSharpException(SWIG_UnknownError, "unknown error");
      return 0;
    }
  }

  jresult = new Dali::Toolkit::ImageUrl((const Dali::Toolkit::ImageUrl&)result);
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_POSITIVE_X_get() {
  unsigned int jresult ;
  unsigned int result;

  result = (unsigned int)(unsigned int)Dali::CubeMapLayer::POSITIVE_X;
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_NEGATIVE_X_get() {
  unsigned int jresult ;
  unsigned int result;

  result = (unsigned int)(unsigned int)Dali::CubeMapLayer::NEGATIVE_X;
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_POSITIVE_Y_get() {
  unsigned int jresult ;
  unsigned int result;

  result = (unsigned int)(unsigned int)Dali::CubeMapLayer::POSITIVE_Y;
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_NEGATIVE_Y_get() {
  unsigned int jresult ;
  unsigned int result;

  result = (unsigned int)(unsigned int)Dali::CubeMapLayer::NEGATIVE_Y;
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_POSITIVE_Z_get() {
  unsigned int jresult ;
  unsigned int result;

  result = (unsigned int)(unsigned int)Dali::CubeMapLayer::POSITIVE_Z;
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_NEGATIVE_Z_get() {
  unsigned int jresult ;
  unsigned int result;

  result = (unsigned int)(unsigned int)Dali::CubeMapLayer::NEGATIVE_Z;
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Texture_New__SWIG_0(int jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  Dali::TextureType::Type arg1 ;
  Dali::Pixel::Format arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  Dali::Texture result;

  arg1 = (Dali::TextureType::Type)jarg1;
  arg2 = (Dali::Pixel::Format)jarg2;
  arg3 = (unsigned int)jarg3;
  arg4 = (unsigned int)jarg4;
  {
    try {
      result = Dali::Texture::New(arg1,arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Texture((const Dali::Texture &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Texture_New__SWIG_1(void * jarg1) {
  void * jresult ;
  NativeImageInterface *arg1 = 0 ;
  Dali::Texture result;

  arg1 = (NativeImageInterface *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NativeImageInterface & type is null", 0);
    return 0;
  }
  {
    try {
      result = Dali::Texture::New(*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Texture((const Dali::Texture &)result);
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Texture__SWIG_0() {
  void * jresult ;
  Dali::Texture *result = 0 ;

  {
    try {
      result = (Dali::Texture *)new Dali::Texture();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Texture(void * jarg1) {
  Dali::Texture *arg1 = (Dali::Texture *) 0 ;

  arg1 = (Dali::Texture *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Texture__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Texture *arg1 = 0 ;
  Dali::Texture *result = 0 ;

  arg1 = (Dali::Texture *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Texture const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Texture *)new Dali::Texture((Dali::Texture const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Texture_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Texture result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Texture::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Texture((const Dali::Texture &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Texture_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Texture *arg1 = (Dali::Texture *) 0 ;
  Dali::Texture *arg2 = 0 ;
  Dali::Texture *result = 0 ;

  arg1 = (Dali::Texture *)jarg1;
  arg2 = (Dali::Texture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Texture const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Texture *) &(arg1)->operator =((Dali::Texture const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Texture_Upload__SWIG_0(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Texture *arg1 = (Dali::Texture *) 0 ;
  Dali::PixelData arg2 ;
  Dali::PixelData *argp2 ;
  bool result;

  arg1 = (Dali::Texture *)jarg1;
  argp2 = (Dali::PixelData *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::PixelData", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)(arg1)->Upload(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Texture_Upload__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  bool jresult ;
  Dali::Texture *arg1 = (Dali::Texture *) 0 ;
  Dali::PixelData arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  Dali::PixelData *argp2 ;
  bool result;

  arg1 = (Dali::Texture *)jarg1;
  argp2 = (Dali::PixelData *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::PixelData", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (unsigned int)jarg3;
  arg4 = (unsigned int)jarg4;
  arg5 = (unsigned int)jarg5;
  arg6 = (unsigned int)jarg6;
  arg7 = (unsigned int)jarg7;
  arg8 = (unsigned int)jarg8;
  {
    try {
      result = (bool)(arg1)->Upload(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Texture_GenerateMipmaps(void * jarg1) {
  Dali::Texture *arg1 = (Dali::Texture *) 0 ;

  arg1 = (Dali::Texture *)jarg1;
  {
    try {
      (arg1)->GenerateMipmaps();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_Texture_GetWidth(void * jarg1) {
  unsigned int jresult ;
  Dali::Texture *arg1 = (Dali::Texture *) 0 ;
  unsigned int result;

  arg1 = (Dali::Texture *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::Texture const *)arg1)->GetWidth();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_Texture_GetHeight(void * jarg1) {
  unsigned int jresult ;
  Dali::Texture *arg1 = (Dali::Texture *) 0 ;
  unsigned int result;

  arg1 = (Dali::Texture *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::Texture const *)arg1)->GetHeight();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Sampler_New() {
  void * jresult ;
  Dali::Sampler result;

  {
    try {
      result = Dali::Sampler::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Sampler((const Dali::Sampler &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Sampler__SWIG_0() {
  void * jresult ;
  Dali::Sampler *result = 0 ;

  {
    try {
      result = (Dali::Sampler *)new Dali::Sampler();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Sampler(void * jarg1) {
  Dali::Sampler *arg1 = (Dali::Sampler *) 0 ;

  arg1 = (Dali::Sampler *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Sampler__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Sampler *arg1 = 0 ;
  Dali::Sampler *result = 0 ;

  arg1 = (Dali::Sampler *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Sampler const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Sampler *)new Dali::Sampler((Dali::Sampler const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Sampler_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Sampler result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Sampler::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Sampler((const Dali::Sampler &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Sampler_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Sampler *arg1 = (Dali::Sampler *) 0 ;
  Dali::Sampler *arg2 = 0 ;
  Dali::Sampler *result = 0 ;

  arg1 = (Dali::Sampler *)jarg1;
  arg2 = (Dali::Sampler *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Sampler const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Sampler *) &(arg1)->operator =((Dali::Sampler const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Sampler_SetFilterMode(void * jarg1, int jarg2, int jarg3) {
  Dali::Sampler *arg1 = (Dali::Sampler *) 0 ;
  Dali::FilterMode::Type arg2 ;
  Dali::FilterMode::Type arg3 ;

  arg1 = (Dali::Sampler *)jarg1;
  arg2 = (Dali::FilterMode::Type)jarg2;
  arg3 = (Dali::FilterMode::Type)jarg3;
  {
    try {
      (arg1)->SetFilterMode(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Sampler_SetWrapMode__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  Dali::Sampler *arg1 = (Dali::Sampler *) 0 ;
  Dali::WrapMode::Type arg2 ;
  Dali::WrapMode::Type arg3 ;

  arg1 = (Dali::Sampler *)jarg1;
  arg2 = (Dali::WrapMode::Type)jarg2;
  arg3 = (Dali::WrapMode::Type)jarg3;
  {
    try {
      (arg1)->SetWrapMode(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Sampler_SetWrapMode__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Dali::Sampler *arg1 = (Dali::Sampler *) 0 ;
  Dali::WrapMode::Type arg2 ;
  Dali::WrapMode::Type arg3 ;
  Dali::WrapMode::Type arg4 ;

  arg1 = (Dali::Sampler *)jarg1;
  arg2 = (Dali::WrapMode::Type)jarg2;
  arg3 = (Dali::WrapMode::Type)jarg3;
  arg4 = (Dali::WrapMode::Type)jarg4;
  {
    try {
      (arg1)->SetWrapMode(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TextureSet_New() {
  void * jresult ;
  Dali::TextureSet result;

  {
    try {
      result = Dali::TextureSet::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::TextureSet((const Dali::TextureSet &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TextureSet__SWIG_0() {
  void * jresult ;
  Dali::TextureSet *result = 0 ;

  {
    try {
      result = (Dali::TextureSet *)new Dali::TextureSet();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TextureSet(void * jarg1) {
  Dali::TextureSet *arg1 = (Dali::TextureSet *) 0 ;

  arg1 = (Dali::TextureSet *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TextureSet__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::TextureSet *arg1 = 0 ;
  Dali::TextureSet *result = 0 ;

  arg1 = (Dali::TextureSet *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TextureSet const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::TextureSet *)new Dali::TextureSet((Dali::TextureSet const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TextureSet_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::TextureSet result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::TextureSet::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::TextureSet((const Dali::TextureSet &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TextureSet_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::TextureSet *arg1 = (Dali::TextureSet *) 0 ;
  Dali::TextureSet *arg2 = 0 ;
  Dali::TextureSet *result = 0 ;

  arg1 = (Dali::TextureSet *)jarg1;
  arg2 = (Dali::TextureSet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TextureSet const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::TextureSet *) &(arg1)->operator =((Dali::TextureSet const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TextureSet_SetTexture(void * jarg1, unsigned long jarg2, void * jarg3) {
  Dali::TextureSet *arg1 = (Dali::TextureSet *) 0 ;
  size_t arg2 ;
  Dali::Texture arg3 ;
  Dali::Texture *argp3 ;

  arg1 = (Dali::TextureSet *)jarg1;
  arg2 = (size_t)jarg2;
  argp3 = (Dali::Texture *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Texture", 0);
    return ;
  }
  arg3 = *argp3;
  {
    try {
      (arg1)->SetTexture(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TextureSet_GetTexture(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::TextureSet *arg1 = (Dali::TextureSet *) 0 ;
  size_t arg2 ;
  Dali::Texture result;

  arg1 = (Dali::TextureSet *)jarg1;
  arg2 = (size_t)jarg2;
  {
    try {
      result = ((Dali::TextureSet const *)arg1)->GetTexture(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Texture((const Dali::Texture &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TextureSet_SetSampler(void * jarg1, unsigned long jarg2, void * jarg3) {
  Dali::TextureSet *arg1 = (Dali::TextureSet *) 0 ;
  size_t arg2 ;
  Dali::Sampler arg3 ;
  Dali::Sampler *argp3 ;

  arg1 = (Dali::TextureSet *)jarg1;
  arg2 = (size_t)jarg2;
  argp3 = (Dali::Sampler *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Sampler", 0);
    return ;
  }
  arg3 = *argp3;
  {
    try {
      (arg1)->SetSampler(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TextureSet_GetSampler(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::TextureSet *arg1 = (Dali::TextureSet *) 0 ;
  size_t arg2 ;
  Dali::Sampler result;

  arg1 = (Dali::TextureSet *)jarg1;
  arg2 = (size_t)jarg2;
  {
    try {
      result = ((Dali::TextureSet const *)arg1)->GetSampler(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Sampler((const Dali::Sampler &)result);
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_TextureSet_GetTextureCount(void * jarg1) {
  unsigned long jresult ;
  Dali::TextureSet *arg1 = (Dali::TextureSet *) 0 ;
  size_t result;

  arg1 = (Dali::TextureSet *)jarg1;
  {
    try {
      result = ((Dali::TextureSet const *)arg1)->GetTextureCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VertexBuffer_New(void * jarg1) {
  void * jresult ;
  Dali::Property::Map *arg1 = 0 ;
  Dali::VertexBuffer result;

  arg1 = (Dali::Property::Map *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map & type is null", 0);
    return 0;
  }
  {
    try {
      result = Dali::VertexBuffer::New(*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::VertexBuffer((const Dali::VertexBuffer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VertexBuffer__SWIG_0() {
  void * jresult ;
  Dali::VertexBuffer *result = 0 ;

  {
    try {
      result = (Dali::VertexBuffer *)new Dali::VertexBuffer();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_VertexBuffer(void * jarg1) {
  Dali::VertexBuffer *arg1 = (Dali::VertexBuffer *) 0 ;

  arg1 = (Dali::VertexBuffer *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VertexBuffer__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::VertexBuffer *arg1 = 0 ;
  Dali::VertexBuffer *result = 0 ;

  arg1 = (Dali::VertexBuffer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::VertexBuffer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::VertexBuffer *)new Dali::VertexBuffer((Dali::VertexBuffer const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VertexBuffer_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::VertexBuffer result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::VertexBuffer::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::VertexBuffer((const Dali::VertexBuffer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VertexBuffer_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::VertexBuffer *arg1 = (Dali::VertexBuffer *) 0 ;
  Dali::VertexBuffer *arg2 = 0 ;
  Dali::VertexBuffer *result = 0 ;

  arg1 = (Dali::VertexBuffer *)jarg1;
  arg2 = (Dali::VertexBuffer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::VertexBuffer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::VertexBuffer *) &(arg1)->operator =((Dali::VertexBuffer const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VertexBuffer_SetData(void * jarg1, void * jarg2, unsigned long jarg3) {
  Dali::VertexBuffer *arg1 = (Dali::VertexBuffer *) 0 ;
  void *arg2 = (void *) 0 ;
  std::size_t arg3 ;

  arg1 = (Dali::VertexBuffer *)jarg1;
  arg2 = jarg2;
  arg3 = (std::size_t)jarg3;
  {
    try {
      (arg1)->SetData((void const *)arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_VertexBuffer_GetSize(void * jarg1) {
  unsigned long jresult ;
  Dali::VertexBuffer *arg1 = (Dali::VertexBuffer *) 0 ;
  std::size_t result;

  arg1 = (Dali::VertexBuffer *)jarg1;
  {
    try {
      result = ((Dali::VertexBuffer const *)arg1)->GetSize();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Geometry_New() {
  void * jresult ;
  Dali::Geometry result;

  {
    try {
      result = Dali::Geometry::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Geometry((const Dali::Geometry &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Geometry__SWIG_0() {
  void * jresult ;
  Dali::Geometry *result = 0 ;

  {
    try {
      result = (Dali::Geometry *)new Dali::Geometry();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Geometry(void * jarg1) {
  Dali::Geometry *arg1 = (Dali::Geometry *) 0 ;

  arg1 = (Dali::Geometry *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Geometry__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Geometry *arg1 = 0 ;
  Dali::Geometry *result = 0 ;

  arg1 = (Dali::Geometry *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Geometry const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Geometry *)new Dali::Geometry((Dali::Geometry const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Geometry_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Geometry result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Geometry::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Geometry((const Dali::Geometry &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Geometry_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Geometry *arg1 = (Dali::Geometry *) 0 ;
  Dali::Geometry *arg2 = 0 ;
  Dali::Geometry *result = 0 ;

  arg1 = (Dali::Geometry *)jarg1;
  arg2 = (Dali::Geometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Geometry const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Geometry *) &(arg1)->operator =((Dali::Geometry const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_Geometry_AddVertexBuffer(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  Dali::Geometry *arg1 = (Dali::Geometry *) 0 ;
  Dali::VertexBuffer *arg2 = 0 ;
  std::size_t result;

  arg1 = (Dali::Geometry *)jarg1;
  arg2 = (Dali::VertexBuffer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::VertexBuffer & type is null", 0);
    return 0;
  }
  {
    try {
      result = (arg1)->AddVertexBuffer(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_Geometry_GetNumberOfVertexBuffers(void * jarg1) {
  unsigned long jresult ;
  Dali::Geometry *arg1 = (Dali::Geometry *) 0 ;
  std::size_t result;

  arg1 = (Dali::Geometry *)jarg1;
  {
    try {
      result = ((Dali::Geometry const *)arg1)->GetNumberOfVertexBuffers();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Geometry_RemoveVertexBuffer(void * jarg1, unsigned long jarg2) {
  Dali::Geometry *arg1 = (Dali::Geometry *) 0 ;
  std::size_t arg2 ;

  arg1 = (Dali::Geometry *)jarg1;
  arg2 = (std::size_t)jarg2;
  {
    try {
      (arg1)->RemoveVertexBuffer(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Geometry_SetIndexBuffer(void * jarg1, unsigned short* jarg2, unsigned long jarg3) {
  Dali::Geometry *arg1 = (Dali::Geometry *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  size_t arg3 ;

  arg1 = (Dali::Geometry *)jarg1;
  arg2 = jarg2;
  arg3 = (size_t)jarg3;
  {
    try {
      (arg1)->SetIndexBuffer((unsigned short const *)arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }



}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Geometry_SetType(void * jarg1, int jarg2) {
  Dali::Geometry *arg1 = (Dali::Geometry *) 0 ;
  Dali::Geometry::Type arg2 ;

  arg1 = (Dali::Geometry *)jarg1;
  arg2 = (Dali::Geometry::Type)jarg2;
  {
    try {
      (arg1)->SetType(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Geometry_GetType(void * jarg1) {
  int jresult ;
  Dali::Geometry *arg1 = (Dali::Geometry *) 0 ;
  Dali::Geometry::Type result;

  arg1 = (Dali::Geometry *)jarg1;
  {
    try {
      result = (Dali::Geometry::Type)((Dali::Geometry const *)arg1)->GetType();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Shader_Hint() {
  void * jresult ;
  Dali::Shader::Hint *result = 0 ;

  {
    try {
      result = (Dali::Shader::Hint *)new Dali::Shader::Hint();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Shader_Hint(void * jarg1) {
  Dali::Shader::Hint *arg1 = (Dali::Shader::Hint *) 0 ;

  arg1 = (Dali::Shader::Hint *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Shader_Property_PROGRAM_get() {
  int jresult ;
  int result;

  result = (int)Dali::Shader::Property::PROGRAM;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Shader_Property() {
  void * jresult ;
  Dali::Shader::Property *result = 0 ;

  {
    try {
      result = (Dali::Shader::Property *)new Dali::Shader::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Shader_Property(void * jarg1) {
  Dali::Shader::Property *arg1 = (Dali::Shader::Property *) 0 ;

  arg1 = (Dali::Shader::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Shader_New__SWIG_0(char * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Dali::Shader::Hint::Value arg3 ;
  Dali::Shader result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Shader::Hint::Value)jarg3;
  {
    try {
      result = Dali::Shader::New((std::string const &)*arg1,(std::string const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Shader((const Dali::Shader &)result);

  //argout typemap for const std::string&


  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Shader_New__SWIG_1(char * jarg1, char * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Dali::Shader result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      result = Dali::Shader::New((std::string const &)*arg1,(std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Shader((const Dali::Shader &)result);

  //argout typemap for const std::string&


  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Shader__SWIG_0() {
  void * jresult ;
  Dali::Shader *result = 0 ;

  {
    try {
      result = (Dali::Shader *)new Dali::Shader();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Shader(void * jarg1) {
  Dali::Shader *arg1 = (Dali::Shader *) 0 ;

  arg1 = (Dali::Shader *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Shader__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Shader *arg1 = 0 ;
  Dali::Shader *result = 0 ;

  arg1 = (Dali::Shader *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Shader const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Shader *)new Dali::Shader((Dali::Shader const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Shader_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Shader result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Shader::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Shader((const Dali::Shader &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Shader_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Shader *arg1 = (Dali::Shader *) 0 ;
  Dali::Shader *arg2 = 0 ;
  Dali::Shader *result = 0 ;

  arg1 = (Dali::Shader *)jarg1;
  arg2 = (Dali::Shader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Shader const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Shader *) &(arg1)->operator =((Dali::Shader const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Range_BACKGROUND_EFFECT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::DepthIndex::Ranges::BACKGROUND_EFFECT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Range_BACKGROUND_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::DepthIndex::Ranges::BACKGROUND;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Range_CONTENT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::DepthIndex::Ranges::CONTENT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Range_DECORATION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::DepthIndex::Ranges::DECORATION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Range_FOREGROUND_EFFECT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::DepthIndex::FOREGROUND_EFFECT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_DEPTH_INDEX_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::DEPTH_INDEX;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_FACE_CULLING_MODE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::FACE_CULLING_MODE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_BLEND_MODE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::BLEND_MODE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_BLEND_EQUATION_RGB_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::BLEND_EQUATION_RGB;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_BLEND_EQUATION_ALPHA_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::BLEND_EQUATION_ALPHA;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_BLEND_FACTOR_SRC_RGB_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::BLEND_FACTOR_SRC_RGB;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_BLEND_FACTOR_DEST_RGB_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::BLEND_FACTOR_DEST_RGB;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_BLEND_FACTOR_SRC_ALPHA_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::BLEND_FACTOR_SRC_ALPHA;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_BLEND_FACTOR_DEST_ALPHA_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::BLEND_FACTOR_DEST_ALPHA;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_BLEND_COLOR_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::BLEND_COLOR;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_BLEND_PRE_MULTIPLIED_ALPHA_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::BLEND_PRE_MULTIPLIED_ALPHA;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_INDEX_RANGE_FIRST_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::INDEX_RANGE_FIRST;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_INDEX_RANGE_COUNT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::INDEX_RANGE_COUNT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_DEPTH_WRITE_MODE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::DEPTH_WRITE_MODE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_DEPTH_FUNCTION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::DEPTH_FUNCTION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_DEPTH_TEST_MODE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::DEPTH_TEST_MODE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_RENDER_MODE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::RENDER_MODE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_STENCIL_FUNCTION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::STENCIL_FUNCTION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_STENCIL_FUNCTION_MASK_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::STENCIL_FUNCTION_MASK;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_STENCIL_FUNCTION_REFERENCE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::STENCIL_FUNCTION_REFERENCE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_STENCIL_MASK_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::STENCIL_MASK;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_STENCIL_OPERATION_ON_FAIL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::STENCIL_OPERATION_ON_FAIL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_STENCIL_OPERATION_ON_Z_FAIL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::STENCIL_OPERATION_ON_Z_FAIL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Renderer_Property_STENCIL_OPERATION_ON_Z_PASS_get() {
  int jresult ;
  int result;

  result = (int)Dali::Renderer::Property::STENCIL_OPERATION_ON_Z_PASS;
  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_CULLED_get() {
  return Dali::Actor::Property::CULLED;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Renderer_Property() {
  void * jresult ;
  Dali::Renderer::Property *result = 0 ;

  {
    try {
      result = (Dali::Renderer::Property *)new Dali::Renderer::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Renderer_Property(void * jarg1) {
  Dali::Renderer::Property *arg1 = (Dali::Renderer::Property *) 0 ;

  arg1 = (Dali::Renderer::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Renderer_New(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Geometry *arg1 = 0 ;
  Dali::Shader *arg2 = 0 ;
  Dali::Renderer result;

  arg1 = (Dali::Geometry *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Geometry & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Shader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Shader & type is null", 0);
    return 0;
  }
  {
    try {
      result = Dali::Renderer::New(*arg1,*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Renderer((const Dali::Renderer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Renderer__SWIG_0() {
  void * jresult ;
  Dali::Renderer *result = 0 ;

  {
    try {
      result = (Dali::Renderer *)new Dali::Renderer();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Renderer(void * jarg1) {
  Dali::Renderer *arg1 = (Dali::Renderer *) 0 ;

  arg1 = (Dali::Renderer *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Renderer__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Renderer *arg1 = 0 ;
  Dali::Renderer *result = 0 ;

  arg1 = (Dali::Renderer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Renderer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Renderer *)new Dali::Renderer((Dali::Renderer const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Renderer_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Renderer result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Renderer::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Renderer((const Dali::Renderer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Renderer_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Renderer *arg1 = (Dali::Renderer *) 0 ;
  Dali::Renderer *arg2 = 0 ;
  Dali::Renderer *result = 0 ;

  arg1 = (Dali::Renderer *)jarg1;
  arg2 = (Dali::Renderer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Renderer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Renderer *) &(arg1)->operator =((Dali::Renderer const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Renderer_SetGeometry(void * jarg1, void * jarg2) {
  Dali::Renderer *arg1 = (Dali::Renderer *) 0 ;
  Dali::Geometry *arg2 = 0 ;

  arg1 = (Dali::Renderer *)jarg1;
  arg2 = (Dali::Geometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Geometry & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetGeometry(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Renderer_GetGeometry(void * jarg1) {
  void * jresult ;
  Dali::Renderer *arg1 = (Dali::Renderer *) 0 ;
  Dali::Geometry result;

  arg1 = (Dali::Renderer *)jarg1;
  {
    try {
      result = ((Dali::Renderer const *)arg1)->GetGeometry();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Geometry((const Dali::Geometry &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Renderer_SetIndexRange(void * jarg1, int jarg2, int jarg3) {
  Dali::Renderer *arg1 = (Dali::Renderer *) 0 ;
  int arg2 ;
  int arg3 ;

  arg1 = (Dali::Renderer *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  {
    try {
      (arg1)->SetIndexRange(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Renderer_SetTextures(void * jarg1, void * jarg2) {
  Dali::Renderer *arg1 = (Dali::Renderer *) 0 ;
  Dali::TextureSet *arg2 = 0 ;

  arg1 = (Dali::Renderer *)jarg1;
  arg2 = (Dali::TextureSet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TextureSet & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetTextures(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Renderer_GetTextures(void * jarg1) {
  void * jresult ;
  Dali::Renderer *arg1 = (Dali::Renderer *) 0 ;
  Dali::TextureSet result;

  arg1 = (Dali::Renderer *)jarg1;
  {
    try {
      result = ((Dali::Renderer const *)arg1)->GetTextures();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::TextureSet((const Dali::TextureSet &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Renderer_SetShader(void * jarg1, void * jarg2) {
  Dali::Renderer *arg1 = (Dali::Renderer *) 0 ;
  Dali::Shader *arg2 = 0 ;

  arg1 = (Dali::Renderer *)jarg1;
  arg2 = (Dali::Shader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Shader & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetShader(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Renderer_GetShader(void * jarg1) {
  void * jresult ;
  Dali::Renderer *arg1 = (Dali::Renderer *) 0 ;
  Dali::Shader result;

  arg1 = (Dali::Renderer *)jarg1;
  {
    try {
      result = ((Dali::Renderer const *)arg1)->GetShader();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Shader((const Dali::Shader &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_FrameBuffer_Attachment() {
  void * jresult ;
  Dali::FrameBuffer::Attachment *result = 0 ;

  {
    try {
      result = (Dali::FrameBuffer::Attachment *)new Dali::FrameBuffer::Attachment();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_FrameBuffer_Attachment(void * jarg1) {
  Dali::FrameBuffer::Attachment *arg1 = (Dali::FrameBuffer::Attachment *) 0 ;

  arg1 = (Dali::FrameBuffer::Attachment *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_FrameBuffer_New(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Dali::FrameBuffer result;

  arg1 = (unsigned int)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (unsigned int)jarg3;
  {
    try {
      result = Dali::FrameBuffer::New(arg1,arg2,static_cast<Dali::FrameBuffer::Attachment::Mask>(arg3));
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::FrameBuffer((const Dali::FrameBuffer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_FrameBuffer__SWIG_0() {
  void * jresult ;
  Dali::FrameBuffer *result = 0 ;

  {
    try {
      result = (Dali::FrameBuffer *)new Dali::FrameBuffer();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_FrameBuffer(void * jarg1) {
  Dali::FrameBuffer *arg1 = (Dali::FrameBuffer *) 0 ;

  arg1 = (Dali::FrameBuffer *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_FrameBuffer__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::FrameBuffer *arg1 = 0 ;
  Dali::FrameBuffer *result = 0 ;

  arg1 = (Dali::FrameBuffer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::FrameBuffer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::FrameBuffer *)new Dali::FrameBuffer((Dali::FrameBuffer const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_FrameBuffer_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::FrameBuffer result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::FrameBuffer::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::FrameBuffer((const Dali::FrameBuffer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_FrameBuffer_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::FrameBuffer *arg1 = (Dali::FrameBuffer *) 0 ;
  Dali::FrameBuffer *arg2 = 0 ;
  Dali::FrameBuffer *result = 0 ;

  arg1 = (Dali::FrameBuffer *)jarg1;
  arg2 = (Dali::FrameBuffer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::FrameBuffer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::FrameBuffer *) &(arg1)->operator =((Dali::FrameBuffer const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_FrameBuffer_AttachColorTexture__SWIG_0(void * jarg1, void * jarg2) {
  Dali::FrameBuffer *arg1 = (Dali::FrameBuffer *) 0 ;
  Dali::Texture *arg2 = 0 ;

  arg1 = (Dali::FrameBuffer *)jarg1;
  arg2 = (Dali::Texture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Texture & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->AttachColorTexture(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_FrameBuffer_AttachColorTexture__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  Dali::FrameBuffer *arg1 = (Dali::FrameBuffer *) 0 ;
  Dali::Texture *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;

  arg1 = (Dali::FrameBuffer *)jarg1;
  arg2 = (Dali::Texture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Texture & type is null", 0);
    return ;
  }
  arg3 = (unsigned int)jarg3;
  arg4 = (unsigned int)jarg4;
  {
    try {
      (arg1)->AttachColorTexture(*arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_FrameBuffer_GetColorTexture(void * jarg1) {
  void * jresult ;
  Dali::FrameBuffer *arg1 = (Dali::FrameBuffer *) 0 ;
  Dali::Texture result;

  arg1 = (Dali::FrameBuffer *)jarg1;
  {
    try {
      result = (arg1)->GetColorTexture();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Texture((const Dali::Texture &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_RenderTaskList__SWIG_0() {
  void * jresult ;
  Dali::RenderTaskList *result = 0 ;

  {
    try {
      result = (Dali::RenderTaskList *)new Dali::RenderTaskList();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTaskList_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::RenderTaskList result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::RenderTaskList::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::RenderTaskList((const Dali::RenderTaskList &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_RenderTaskList(void * jarg1) {
  Dali::RenderTaskList *arg1 = (Dali::RenderTaskList *) 0 ;

  arg1 = (Dali::RenderTaskList *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_RenderTaskList__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::RenderTaskList *arg1 = 0 ;
  Dali::RenderTaskList *result = 0 ;

  arg1 = (Dali::RenderTaskList *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::RenderTaskList const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::RenderTaskList *)new Dali::RenderTaskList((Dali::RenderTaskList const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTaskList_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::RenderTaskList *arg1 = (Dali::RenderTaskList *) 0 ;
  Dali::RenderTaskList *arg2 = 0 ;
  Dali::RenderTaskList *result = 0 ;

  arg1 = (Dali::RenderTaskList *)jarg1;
  arg2 = (Dali::RenderTaskList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::RenderTaskList const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::RenderTaskList *) &(arg1)->operator =((Dali::RenderTaskList const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTaskList_CreateTask(void * jarg1) {
  void * jresult ;
  Dali::RenderTaskList *arg1 = (Dali::RenderTaskList *) 0 ;
  Dali::RenderTask result;

  arg1 = (Dali::RenderTaskList *)jarg1;
  {
    try {
      result = (arg1)->CreateTask();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::RenderTask((const Dali::RenderTask &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RenderTaskList_RemoveTask(void * jarg1, void * jarg2) {
  Dali::RenderTaskList *arg1 = (Dali::RenderTaskList *) 0 ;
  Dali::RenderTask arg2 ;
  Dali::RenderTask *argp2 ;

  arg1 = (Dali::RenderTaskList *)jarg1;
  argp2 = (Dali::RenderTask *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::RenderTask", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->RemoveTask(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


//// ===============================================end part 1 =================

//// ========================= part 2 ===============================

SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_RenderTaskList_GetTaskCount(void * jarg1) {
  unsigned int jresult ;
  Dali::RenderTaskList *arg1 = (Dali::RenderTaskList *) 0 ;
  unsigned int result;

  arg1 = (Dali::RenderTaskList *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::RenderTaskList const *)arg1)->GetTaskCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTaskList_GetTask(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Dali::RenderTaskList *arg1 = (Dali::RenderTaskList *) 0 ;
  unsigned int arg2 ;
  Dali::RenderTask result;

  arg1 = (Dali::RenderTaskList *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = ((Dali::RenderTaskList const *)arg1)->GetTask(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::RenderTask((const Dali::RenderTask &)result);
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_RenderTask_Property_VIEWPORT_POSITION_get() {
  int jresult ;
  int result;

  result = (int)Dali::RenderTask::Property::VIEWPORT_POSITION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_RenderTask_Property_VIEWPORT_SIZE_get() {
  int jresult ;
  int result;

  result = (int)Dali::RenderTask::Property::VIEWPORT_SIZE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_RenderTask_Property_CLEAR_COLOR_get() {
  int jresult ;
  int result;

  result = (int)Dali::RenderTask::Property::CLEAR_COLOR;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_RenderTask_Property_REQUIRES_SYNC_get() {
  int jresult ;
  int result;

  result = (int)Dali::RenderTask::Property::REQUIRES_SYNC;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_RenderTask_Property() {
  void * jresult ;
  Dali::RenderTask::Property *result = 0 ;

  {
    try {
      result = (Dali::RenderTask::Property *)new Dali::RenderTask::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_RenderTask_Property(void * jarg1) {
  Dali::RenderTask::Property *arg1 = (Dali::RenderTask::Property *) 0 ;

  arg1 = (Dali::RenderTask::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTask_DEFAULT_SCREEN_TO_FRAMEBUFFER_FUNCTION_get() {
  void * jresult ;
  bool (*result)(Dali::Vector2 &) = 0 ;

  result = (bool (*)(Dali::Vector2 &))Dali::RenderTask::DEFAULT_SCREEN_TO_FRAMEBUFFER_FUNCTION;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTask_FULLSCREEN_FRAMEBUFFER_FUNCTION_get() {
  void * jresult ;
  bool (*result)(Dali::Vector2 &) = 0 ;

  result = (bool (*)(Dali::Vector2 &))Dali::RenderTask::FULLSCREEN_FRAMEBUFFER_FUNCTION;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_RenderTask_DEFAULT_EXCLUSIVE_get() {
  bool jresult ;
  bool result;

  result = (bool)Dali::RenderTask::DEFAULT_EXCLUSIVE;
  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_RenderTask_DEFAULT_INPUT_ENABLED_get() {
  bool jresult ;
  bool result;

  result = (bool)Dali::RenderTask::DEFAULT_INPUT_ENABLED;
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTask_DEFAULT_CLEAR_COLOR_get() {
  void * jresult ;
  Dali::Vector4 *result = 0 ;

  result = (Dali::Vector4 *)&Dali::RenderTask::DEFAULT_CLEAR_COLOR;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_RenderTask_DEFAULT_CLEAR_ENABLED_get() {
  bool jresult ;
  bool result;

  result = (bool)Dali::RenderTask::DEFAULT_CLEAR_ENABLED;
  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_RenderTask_DEFAULT_CULL_MODE_get() {
  bool jresult ;
  bool result;

  result = (bool)Dali::RenderTask::DEFAULT_CULL_MODE;
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_RenderTask_DEFAULT_REFRESH_RATE_get() {
  unsigned int jresult ;
  unsigned int result;

  result = (unsigned int)(unsigned int)Dali::RenderTask::DEFAULT_REFRESH_RATE;
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_RenderTask__SWIG_0() {
  void * jresult ;
  Dali::RenderTask *result = 0 ;

  {
    try {
      result = (Dali::RenderTask *)new Dali::RenderTask();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTask_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::RenderTask result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::RenderTask::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::RenderTask((const Dali::RenderTask &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_RenderTask(void * jarg1) {
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;

  arg1 = (Dali::RenderTask *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_RenderTask__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::RenderTask *arg1 = 0 ;
  Dali::RenderTask *result = 0 ;

  arg1 = (Dali::RenderTask *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::RenderTask const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::RenderTask *)new Dali::RenderTask((Dali::RenderTask const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTask_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::RenderTask *arg2 = 0 ;
  Dali::RenderTask *result = 0 ;

  arg1 = (Dali::RenderTask *)jarg1;
  arg2 = (Dali::RenderTask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::RenderTask const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::RenderTask *) &(arg1)->operator =((Dali::RenderTask const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RenderTask_SetSourceActor(void * jarg1, void * jarg2) {
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::RenderTask *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetSourceActor(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTask_GetSourceActor(void * jarg1) {
  void * jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::Actor result;

  arg1 = (Dali::RenderTask *)jarg1;
  {
    try {
      result = ((Dali::RenderTask const *)arg1)->GetSourceActor();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RenderTask_SetExclusive(void * jarg1, bool jarg2) {
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  bool arg2 ;

  arg1 = (Dali::RenderTask *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetExclusive(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_RenderTask_IsExclusive(void * jarg1) {
  bool jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  bool result;

  arg1 = (Dali::RenderTask *)jarg1;
  {
    try {
      result = (bool)((Dali::RenderTask const *)arg1)->IsExclusive();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RenderTask_SetInputEnabled(void * jarg1, bool jarg2) {
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  bool arg2 ;

  arg1 = (Dali::RenderTask *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetInputEnabled(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_RenderTask_GetInputEnabled(void * jarg1) {
  bool jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  bool result;

  arg1 = (Dali::RenderTask *)jarg1;
  {
    try {
      result = (bool)((Dali::RenderTask const *)arg1)->GetInputEnabled();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RenderTask_SetCameraActor(void * jarg1, void * jarg2) {
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::CameraActor arg2 ;
  Dali::CameraActor *argp2 ;

  arg1 = (Dali::RenderTask *)jarg1;
  argp2 = (Dali::CameraActor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::CameraActor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetCameraActor(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTask_GetCameraActor(void * jarg1) {
  void * jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::CameraActor result;

  arg1 = (Dali::RenderTask *)jarg1;
  {
    try {
      result = ((Dali::RenderTask const *)arg1)->GetCameraActor();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::CameraActor((const Dali::CameraActor &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RenderTask_SetFrameBuffer(void * jarg1, void * jarg2) {
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::FrameBuffer arg2 ;
  Dali::FrameBuffer *argp2 ;

  arg1 = (Dali::RenderTask *)jarg1;
  argp2 = (Dali::FrameBuffer *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::FrameBuffer", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetFrameBuffer(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTask_GetFrameBuffer(void * jarg1) {
  void * jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::FrameBuffer result;

  arg1 = (Dali::RenderTask *)jarg1;
  {
    try {
      result = ((Dali::RenderTask const *)arg1)->GetFrameBuffer();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::FrameBuffer((const Dali::FrameBuffer &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RenderTask_SetScreenToFrameBufferFunction(void * jarg1, void * jarg2) {
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::RenderTask::ScreenToFrameBufferFunction arg2 = (Dali::RenderTask::ScreenToFrameBufferFunction) 0 ;

  arg1 = (Dali::RenderTask *)jarg1;
  arg2 = (Dali::RenderTask::ScreenToFrameBufferFunction)jarg2;
  {
    try {
      (arg1)->SetScreenToFrameBufferFunction(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTask_GetScreenToFrameBufferFunction(void * jarg1) {
  void * jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::RenderTask::ScreenToFrameBufferFunction result;

  arg1 = (Dali::RenderTask *)jarg1;
  {
    try {
      result = (Dali::RenderTask::ScreenToFrameBufferFunction)((Dali::RenderTask const *)arg1)->GetScreenToFrameBufferFunction();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RenderTask_SetScreenToFrameBufferMappingActor(void * jarg1, void * jarg2) {
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::RenderTask *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetScreenToFrameBufferMappingActor(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTask_GetScreenToFrameBufferMappingActor(void * jarg1) {
  void * jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::Actor result;

  arg1 = (Dali::RenderTask *)jarg1;
  {
    try {
      result = ((Dali::RenderTask const *)arg1)->GetScreenToFrameBufferMappingActor();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RenderTask_SetViewportPosition(void * jarg1, void * jarg2) {
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::Vector2 arg2 ;
  Dali::Vector2 *argp2 ;

  arg1 = (Dali::RenderTask *)jarg1;
  argp2 = (Dali::Vector2 *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Vector2", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetViewportPosition(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTask_GetCurrentViewportPosition(void * jarg1) {
  void * jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::RenderTask *)jarg1;
  {
    try {
      result = ((Dali::RenderTask const *)arg1)->GetCurrentViewportPosition();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RenderTask_SetViewportSize(void * jarg1, void * jarg2) {
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::Vector2 arg2 ;
  Dali::Vector2 *argp2 ;

  arg1 = (Dali::RenderTask *)jarg1;
  argp2 = (Dali::Vector2 *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Vector2", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetViewportSize(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTask_GetCurrentViewportSize(void * jarg1) {
  void * jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::RenderTask *)jarg1;
  {
    try {
      result = ((Dali::RenderTask const *)arg1)->GetCurrentViewportSize();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RenderTask_SetViewport(void * jarg1, void * jarg2) {
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::Viewport arg2 ;
  Dali::Viewport *argp2 ;

  arg1 = (Dali::RenderTask *)jarg1;
  argp2 = (Dali::Viewport *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Viewport", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetViewport(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTask_GetViewport(void * jarg1) {
  void * jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::Viewport result;

  arg1 = (Dali::RenderTask *)jarg1;
  {
    try {
      result = ((Dali::RenderTask const *)arg1)->GetViewport();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Viewport((const Dali::Viewport &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RenderTask_SetClearColor(void * jarg1, void * jarg2) {
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::Vector4 *arg2 = 0 ;

  arg1 = (Dali::RenderTask *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetClearColor((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTask_GetClearColor(void * jarg1) {
  void * jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::Vector4 result;

  arg1 = (Dali::RenderTask *)jarg1;
  {
    try {
      result = ((Dali::RenderTask const *)arg1)->GetClearColor();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RenderTask_SetClearEnabled(void * jarg1, bool jarg2) {
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  bool arg2 ;

  arg1 = (Dali::RenderTask *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetClearEnabled(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_RenderTask_GetClearEnabled(void * jarg1) {
  bool jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  bool result;

  arg1 = (Dali::RenderTask *)jarg1;
  {
    try {
      result = (bool)((Dali::RenderTask const *)arg1)->GetClearEnabled();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RenderTask_SetCullMode(void * jarg1, bool jarg2) {
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  bool arg2 ;

  arg1 = (Dali::RenderTask *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetCullMode(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_RenderTask_GetCullMode(void * jarg1) {
  bool jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  bool result;

  arg1 = (Dali::RenderTask *)jarg1;
  {
    try {
      result = (bool)((Dali::RenderTask const *)arg1)->GetCullMode();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RenderTask_SetRefreshRate(void * jarg1, unsigned int jarg2) {
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::RenderTask *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      (arg1)->SetRefreshRate(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_RenderTask_GetRefreshRate(void * jarg1) {
  unsigned int jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  unsigned int result;

  arg1 = (Dali::RenderTask *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::RenderTask const *)arg1)->GetRefreshRate();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_RenderTask_WorldToViewport(void * jarg1, void * jarg2, float * jarg3, float * jarg4) {
  bool jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  bool result;

  arg1 = (Dali::RenderTask *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  arg3 = (float *)jarg3;
  arg4 = (float *)jarg4;
  {
    try {
      result = (bool)((Dali::RenderTask const *)arg1)->WorldToViewport((Dali::Vector3 const &)*arg2,*arg3,*arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_RenderTask_ViewportToLocal(void * jarg1, void * jarg2, float jarg3, float jarg4, float * jarg5, float * jarg6) {
  bool jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::Actor arg2 ;
  float arg3 ;
  float arg4 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  Dali::Actor *argp2 ;
  bool result;

  arg1 = (Dali::RenderTask *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float *)jarg5;
  arg6 = (float *)jarg6;
  {
    try {
      result = (bool)((Dali::RenderTask const *)arg1)->ViewportToLocal(arg2,arg3,arg4,*arg5,*arg6);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RenderTask_FinishedSignal(void * jarg1) {
  void * jresult ;
  Dali::RenderTask *arg1 = (Dali::RenderTask *) 0 ;
  Dali::RenderTask::RenderTaskSignalType *result = 0 ;

  arg1 = (Dali::RenderTask *)jarg1;
  {
    try {
      result = (Dali::RenderTask::RenderTaskSignalType *) &(arg1)->FinishedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TouchPoint__SWIG_0(int jarg1, int jarg2, float jarg3, float jarg4) {
  void * jresult ;
  int arg1 ;
  Dali::PointState::Type arg2 ;
  float arg3 ;
  float arg4 ;
  Dali::TouchPoint *result = 0 ;

  arg1 = (int)jarg1;
  arg2 = (Dali::PointState::Type)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  {
    try {
      result = (Dali::TouchPoint *)new Dali::TouchPoint(arg1,arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TouchPoint__SWIG_1(int jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  void * jresult ;
  int arg1 ;
  Dali::PointState::Type arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  Dali::TouchPoint *result = 0 ;

  arg1 = (int)jarg1;
  arg2 = (Dali::PointState::Type)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (float)jarg6;
  {
    try {
      result = (Dali::TouchPoint *)new Dali::TouchPoint(arg1,arg2,arg3,arg4,arg5,arg6);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TouchPoint(void * jarg1) {
  Dali::TouchPoint *arg1 = (Dali::TouchPoint *) 0 ;

  arg1 = (Dali::TouchPoint *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchPoint_deviceId_set(void * jarg1, int jarg2) {
  Dali::TouchPoint *arg1 = (Dali::TouchPoint *) 0 ;
  int arg2 ;

  arg1 = (Dali::TouchPoint *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->deviceId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TouchPoint_deviceId_get(void * jarg1) {
  int jresult ;
  Dali::TouchPoint *arg1 = (Dali::TouchPoint *) 0 ;
  int result;

  arg1 = (Dali::TouchPoint *)jarg1;
  result = (int) ((arg1)->deviceId);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchPoint_state_set(void * jarg1, int jarg2) {
  Dali::TouchPoint *arg1 = (Dali::TouchPoint *) 0 ;
  Dali::PointState::Type arg2 ;

  arg1 = (Dali::TouchPoint *)jarg1;
  arg2 = (Dali::PointState::Type)jarg2;
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TouchPoint_state_get(void * jarg1) {
  int jresult ;
  Dali::TouchPoint *arg1 = (Dali::TouchPoint *) 0 ;
  Dali::PointState::Type result;

  arg1 = (Dali::TouchPoint *)jarg1;
  result = (Dali::PointState::Type) ((arg1)->state);
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchPoint_hitActor_set(void * jarg1, void * jarg2) {
  Dali::TouchPoint *arg1 = (Dali::TouchPoint *) 0 ;
  Dali::Actor *arg2 = (Dali::Actor *) 0 ;

  arg1 = (Dali::TouchPoint *)jarg1;
  arg2 = (Dali::Actor *)jarg2;
  if (arg1) (arg1)->hitActor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TouchPoint_hitActor_get(void * jarg1) {
  void * jresult ;
  Dali::TouchPoint *arg1 = (Dali::TouchPoint *) 0 ;
  Dali::Actor *result = 0 ;

  arg1 = (Dali::TouchPoint *)jarg1;
  result = (Dali::Actor *)& ((arg1)->hitActor);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchPoint_local_set(void * jarg1, void * jarg2) {
  Dali::TouchPoint *arg1 = (Dali::TouchPoint *) 0 ;
  Dali::Vector2 *arg2 = (Dali::Vector2 *) 0 ;

  arg1 = (Dali::TouchPoint *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (arg1) (arg1)->local = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TouchPoint_local_get(void * jarg1) {
  void * jresult ;
  Dali::TouchPoint *arg1 = (Dali::TouchPoint *) 0 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::TouchPoint *)jarg1;
  result = (Dali::Vector2 *)& ((arg1)->local);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchPoint_screen_set(void * jarg1, void * jarg2) {
  Dali::TouchPoint *arg1 = (Dali::TouchPoint *) 0 ;
  Dali::Vector2 *arg2 = (Dali::Vector2 *) 0 ;

  arg1 = (Dali::TouchPoint *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (arg1) (arg1)->screen = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TouchPoint_screen_get(void * jarg1) {
  void * jresult ;
  Dali::TouchPoint *arg1 = (Dali::TouchPoint *) 0 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::TouchPoint *)jarg1;
  result = (Dali::Vector2 *)& ((arg1)->screen);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Touch__SWIG_0() {
  void * jresult ;
  Dali::TouchEvent *result = 0 ;

  {
    try {
      result = (Dali::TouchEvent *)new Dali::TouchEvent();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Touch__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::TouchEvent *arg1 = 0 ;
  Dali::TouchEvent *result = 0 ;

  arg1 = (Dali::TouchEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TouchEvent const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::TouchEvent *)new Dali::TouchEvent((Dali::TouchEvent const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Touch(void * jarg1) {
  Dali::TouchEvent *arg1 = (Dali::TouchEvent *) 0 ;

  arg1 = (Dali::TouchEvent *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Touch_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::TouchEvent *arg1 = (Dali::TouchEvent *) 0 ;
  Dali::TouchEvent *arg2 = 0 ;
  Dali::TouchEvent *result = 0 ;

  arg1 = (Dali::TouchEvent *)jarg1;
  arg2 = (Dali::TouchEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TouchEvent const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::TouchEvent *) &(arg1)->operator =((Dali::TouchEvent const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_Touch_GetTime(void * jarg1) {
  unsigned long jresult ;
  Dali::TouchEvent *arg1 = (Dali::TouchEvent *) 0 ;
  unsigned long result;

  arg1 = (Dali::TouchEvent *)jarg1;
  {
    try {
      result = (unsigned long)((Dali::TouchEvent const *)arg1)->GetTime();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_Touch_GetPointCount(void * jarg1) {
  unsigned long jresult ;
  Dali::TouchEvent *arg1 = (Dali::TouchEvent *) 0 ;
  std::size_t result;

  arg1 = (Dali::TouchEvent *)jarg1;
  {
    try {
      result = ((Dali::TouchEvent const *)arg1)->GetPointCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Touch_GetDeviceId(void * jarg1, unsigned long jarg2) {
  int jresult ;
  Dali::TouchEvent *arg1 = (Dali::TouchEvent *) 0 ;
  std::size_t arg2 ;
  int32_t result;

  arg1 = (Dali::TouchEvent *)jarg1;
  arg2 = (std::size_t)jarg2;
  {
    try {
      result = ((Dali::TouchEvent const *)arg1)->GetDeviceId(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Touch_GetState(void * jarg1, unsigned long jarg2) {
  int jresult ;
  Dali::TouchEvent *arg1 = (Dali::TouchEvent *) 0 ;
  std::size_t arg2 ;
  Dali::PointState::Type result;

  arg1 = (Dali::TouchEvent *)jarg1;
  arg2 = (std::size_t)jarg2;
  {
    try {
      result = (Dali::PointState::Type)((Dali::TouchEvent const *)arg1)->GetState(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Touch_GetHitActor(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::TouchEvent *arg1 = (Dali::TouchEvent *) 0 ;
  std::size_t arg2 ;
  Dali::Actor result;

  arg1 = (Dali::TouchEvent *)jarg1;
  arg2 = (std::size_t)jarg2;
  {
    try {
      result = ((Dali::TouchEvent const *)arg1)->GetHitActor(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Touch_GetLocalPosition(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::TouchEvent *arg1 = (Dali::TouchEvent *) 0 ;
  std::size_t arg2 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::TouchEvent *)jarg1;
  arg2 = (std::size_t)jarg2;
  {
    try {
      result = (Dali::Vector2 *) &((Dali::TouchEvent const *)arg1)->GetLocalPosition(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Touch_GetScreenPosition(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::TouchEvent *arg1 = (Dali::TouchEvent *) 0 ;
  std::size_t arg2 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::TouchEvent *)jarg1;
  arg2 = (std::size_t)jarg2;
  {
    try {
      result = (Dali::Vector2 *) &((Dali::TouchEvent const *)arg1)->GetScreenPosition(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Touch_GetRadius(void * jarg1, unsigned long jarg2) {
  float jresult ;
  Dali::TouchEvent *arg1 = (Dali::TouchEvent *) 0 ;
  std::size_t arg2 ;
  float result;

  arg1 = (Dali::TouchEvent *)jarg1;
  arg2 = (std::size_t)jarg2;
  {
    try {
      result = (float)((Dali::TouchEvent const *)arg1)->GetRadius(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Touch_GetEllipseRadius(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::TouchEvent *arg1 = (Dali::TouchEvent *) 0 ;
  std::size_t arg2 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::TouchEvent *)jarg1;
  arg2 = (std::size_t)jarg2;
  {
    try {
      result = (Dali::Vector2 *) &((Dali::TouchEvent const *)arg1)->GetEllipseRadius(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Touch_GetPressure(void * jarg1, unsigned long jarg2) {
  float jresult ;
  Dali::TouchEvent *arg1 = (Dali::TouchEvent *) 0 ;
  std::size_t arg2 ;
  float result;

  arg1 = (Dali::TouchEvent *)jarg1;
  arg2 = (std::size_t)jarg2;
  {
    try {
      result = (float)((Dali::TouchEvent const *)arg1)->GetPressure(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Touch_GetAngle(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::TouchEvent *arg1 = (Dali::TouchEvent *) 0 ;
  std::size_t arg2 ;
  Dali::Degree result;

  arg1 = (Dali::TouchEvent *)jarg1;
  arg2 = (std::size_t)jarg2;
  {
    try {
      result = ((Dali::TouchEvent const *)arg1)->GetAngle(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Degree((const Dali::Degree &)result);
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Touch_GetMouseButton(void * jarg1, unsigned long jarg2) {
  int jresult ;
  Dali::TouchEvent *arg1 = (Dali::TouchEvent *) 0 ;
  std::size_t arg2 ;
  Dali::MouseButton::Type result;

  arg1 = (Dali::TouchEvent *)jarg1;
  arg2 = (std::size_t)jarg2;
  {
    try {
      result = ((Dali::TouchEvent const *)arg1)->GetMouseButton(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = static_cast< int >(result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_GestureDetector__SWIG_0() {
  void * jresult ;
  Dali::GestureDetector *result = 0 ;

  {
    try {
      result = (Dali::GestureDetector *)new Dali::GestureDetector();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GestureDetector_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::GestureDetector result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::GestureDetector::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::GestureDetector((const Dali::GestureDetector &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_GestureDetector(void * jarg1) {
  Dali::GestureDetector *arg1 = (Dali::GestureDetector *) 0 ;

  arg1 = (Dali::GestureDetector *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_GestureDetector__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::GestureDetector *arg1 = 0 ;
  Dali::GestureDetector *result = 0 ;

  arg1 = (Dali::GestureDetector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::GestureDetector const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::GestureDetector *)new Dali::GestureDetector((Dali::GestureDetector const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GestureDetector_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::GestureDetector *arg1 = (Dali::GestureDetector *) 0 ;
  Dali::GestureDetector *arg2 = 0 ;
  Dali::GestureDetector *result = 0 ;

  arg1 = (Dali::GestureDetector *)jarg1;
  arg2 = (Dali::GestureDetector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::GestureDetector const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::GestureDetector *) &(arg1)->operator =((Dali::GestureDetector const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_GestureDetector_Attach(void * jarg1, void * jarg2) {
  Dali::GestureDetector *arg1 = (Dali::GestureDetector *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::GestureDetector *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->Attach(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_GestureDetector_Detach(void * jarg1, void * jarg2) {
  Dali::GestureDetector *arg1 = (Dali::GestureDetector *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::GestureDetector *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->Detach(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_GestureDetector_DetachAll(void * jarg1) {
  Dali::GestureDetector *arg1 = (Dali::GestureDetector *) 0 ;

  arg1 = (Dali::GestureDetector *)jarg1;
  {
    try {
      (arg1)->DetachAll();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_GestureDetector_GetAttachedActorCount(void * jarg1) {
  unsigned long jresult ;
  Dali::GestureDetector *arg1 = (Dali::GestureDetector *) 0 ;
  size_t result;

  arg1 = (Dali::GestureDetector *)jarg1;
  {
    try {
      result = ((Dali::GestureDetector const *)arg1)->GetAttachedActorCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GestureDetector_GetAttachedActor(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::GestureDetector *arg1 = (Dali::GestureDetector *) 0 ;
  size_t arg2 ;
  Dali::Actor result;

  arg1 = (Dali::GestureDetector *)jarg1;
  arg2 = (size_t)jarg2;
  {
    try {
      result = ((Dali::GestureDetector const *)arg1)->GetAttachedActor(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Gesture(void * jarg1) {
  void * jresult ;
  Dali::Gesture *arg1 = 0 ;
  Dali::Gesture *result = 0 ;

  arg1 = (Dali::Gesture *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Gesture const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Gesture *)new Dali::Gesture((Dali::Gesture const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Gesture_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Gesture *arg1 = (Dali::Gesture *) 0 ;
  Dali::Gesture *arg2 = 0 ;
  Dali::Gesture *result = 0 ;

  arg1 = (Dali::Gesture *)jarg1;
  arg2 = (Dali::Gesture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Gesture const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Gesture *) &(arg1)->operator =((Dali::Gesture const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Gesture(void * jarg1) {
  Dali::Gesture *arg1 = (Dali::Gesture *) 0 ;

  arg1 = (Dali::Gesture *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Gesture_type_get(void * jarg1) {
  int jresult ;
  Dali::Gesture *arg1 = (Dali::Gesture *) 0 ;
  Dali::GestureType::Value result;

  arg1 = (Dali::Gesture *)jarg1;
  result = (Dali::GestureType::Value) ((arg1)->GetType());
  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Gesture_state_get(void * jarg1) {
  int jresult ;
  Dali::Gesture *arg1 = (Dali::Gesture *) 0 ;
  Dali::GestureState result;

  arg1 = (Dali::Gesture *)jarg1;
  result = (Dali::GestureState) ((arg1)->GetState());
  jresult = (int)result;
  return jresult;
}

SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_Gesture_time_get(void * jarg1) {
  unsigned int jresult ;
  Dali::Gesture *arg1 = (Dali::Gesture *) 0 ;
  unsigned int result;

  arg1 = (Dali::Gesture *)jarg1;
  result = (unsigned int) ((arg1)->GetTime());
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Hover__SWIG_0() {
  void * jresult ;
  Dali::HoverEvent *result = 0 ;

  {
    try {
      result = (Dali::HoverEvent *)new Dali::HoverEvent();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Hover__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::HoverEvent *arg1 = 0 ;
  Dali::HoverEvent *result = 0 ;

  arg1 = (Dali::HoverEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::HoverEvent const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::HoverEvent *)new Dali::HoverEvent((Dali::HoverEvent const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Hover(void * jarg1) {
  Dali::HoverEvent *arg1 = (Dali::HoverEvent *) 0 ;

  arg1 = (Dali::HoverEvent *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Hover_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::HoverEvent *arg1 = (Dali::HoverEvent *) 0 ;
  Dali::HoverEvent *arg2 = 0 ;
  Dali::HoverEvent *result = 0 ;

  arg1 = (Dali::HoverEvent *)jarg1;
  arg2 = (Dali::HoverEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::HoverEvent const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::HoverEvent *) &(arg1)->operator =((Dali::HoverEvent const &)*arg2);
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Hover_New(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  Dali::HoverEvent result;

  arg1 = (unsigned int)jarg1;
  {
    try {
      result = DevelHoverEvent::New(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::HoverEvent((const Dali::HoverEvent &)result);
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_Hover_GetTime(void * jarg1) {
  unsigned long jresult ;
  Dali::HoverEvent *arg1 = (Dali::HoverEvent *) 0 ;
  unsigned long result;

  arg1 = (Dali::HoverEvent *)jarg1;
  {
    try {
      result = (unsigned long)((Dali::HoverEvent const *)arg1)->GetTime();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_Hover_GetPointCount(void * jarg1) {
  unsigned long jresult ;
  Dali::HoverEvent *arg1 = (Dali::HoverEvent *) 0 ;
  std::size_t result;

  arg1 = (Dali::HoverEvent *)jarg1;
  {
    try {
      result = ((Dali::HoverEvent const *)arg1)->GetPointCount();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Hover_GetDeviceId(void * jarg1, unsigned long jarg2) {
  int jresult ;
  Dali::HoverEvent *arg1 = (Dali::HoverEvent *) 0 ;
  std::size_t arg2 ;
  int32_t result;

  arg1 = (Dali::HoverEvent *)jarg1;
  arg2 = (std::size_t)jarg2;
  {
    try {
      result = ((Dali::HoverEvent const *)arg1)->GetDeviceId(arg2);
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Hover_GetState(void * jarg1, unsigned long jarg2) {
  int jresult ;
  Dali::HoverEvent *arg1 = (Dali::HoverEvent *) 0 ;
  std::size_t arg2 ;
  Dali::PointState::Type result;

  arg1 = (Dali::HoverEvent *)jarg1;
  arg2 = (std::size_t)jarg2;
  {
    try {
      result = (Dali::PointState::Type)((Dali::HoverEvent const *)arg1)->GetState(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Hover_GetHitActor(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::HoverEvent *arg1 = (Dali::HoverEvent *) 0 ;
  std::size_t arg2 ;
  Dali::Actor result;

  arg1 = (Dali::HoverEvent *)jarg1;
  arg2 = (std::size_t)jarg2;
  {
    try {
      result = ((Dali::HoverEvent const *)arg1)->GetHitActor(arg2);
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Hover_GetLocalPosition(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::HoverEvent *arg1 = (Dali::HoverEvent *) 0 ;
  std::size_t arg2 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::HoverEvent *)jarg1;
  arg2 = (std::size_t)jarg2;
  {
    try {
      result = (Dali::Vector2 *) &((Dali::HoverEvent const *)arg1)->GetLocalPosition(arg2);
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Hover_GetScreenPosition(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::HoverEvent *arg1 = (Dali::HoverEvent *) 0 ;
  std::size_t arg2 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::HoverEvent *)jarg1;
  arg2 = (std::size_t)jarg2;
  {
    try {
      result = (Dali::Vector2 *) &((Dali::HoverEvent const *)arg1)->GetScreenPosition(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Key__SWIG_0() {
  void * jresult ;
  Dali::KeyEvent *result = 0 ;

  {
    try {
      result = (Dali::KeyEvent *)new Dali::KeyEvent();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Key__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::KeyEvent *arg1 = 0 ;
  Dali::KeyEvent *result = 0 ;

  arg1 = (Dali::KeyEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::KeyEvent const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::KeyEvent *)new Dali::KeyEvent((Dali::KeyEvent const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Key_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::KeyEvent *arg1 = (Dali::KeyEvent *) 0 ;
  Dali::KeyEvent *arg2 = 0 ;
  Dali::KeyEvent *result = 0 ;

  arg1 = (Dali::KeyEvent *)jarg1;
  arg2 = (Dali::KeyEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::KeyEvent const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::KeyEvent *) &(arg1)->operator =((Dali::KeyEvent const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Key_New(char * jarg1, char * jarg2, int jarg3, int jarg4, unsigned long jarg5, int jarg6) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  unsigned long arg5 ;
  Dali::KeyEvent::State *arg6 = 0 ;
  Dali::KeyEvent::State temp6 ;
  Dali::KeyEvent result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  arg5 = (unsigned long)jarg5;
  temp6 = (Dali::KeyEvent::State)jarg6;
  arg6 = &temp6;
  {
    try {
      result = DevelKeyEvent::New((std::string const &)*arg1, "", (std::string const &)*arg2, arg3, arg4, arg5, (Dali::KeyEvent::State const &)*arg6, "", "", Device::Class::NONE, Device::Subclass::NONE);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::KeyEvent((const Dali::KeyEvent &)result);

  //argout typemap for const std::string&


  //argout typemap for const std::string&

  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Key(void * jarg1) {
  Dali::KeyEvent *arg1 = (Dali::KeyEvent *) 0 ;

  arg1 = (Dali::KeyEvent *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Key_IsShiftModifier(void * jarg1) {
  bool jresult ;
  Dali::KeyEvent *arg1 = (Dali::KeyEvent *) 0 ;
  bool result;

  arg1 = (Dali::KeyEvent *)jarg1;
  {
    try {
      result = (bool)((Dali::KeyEvent const *)arg1)->IsShiftModifier();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Key_IsCtrlModifier(void * jarg1) {
  bool jresult ;
  Dali::KeyEvent *arg1 = (Dali::KeyEvent *) 0 ;
  bool result;

  arg1 = (Dali::KeyEvent *)jarg1;
  {
    try {
      result = (bool)((Dali::KeyEvent const *)arg1)->IsCtrlModifier();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Key_IsAltModifier(void * jarg1) {
  bool jresult ;
  Dali::KeyEvent *arg1 = (Dali::KeyEvent *) 0 ;
  bool result;

  arg1 = (Dali::KeyEvent *)jarg1;
  {
    try {
      result = (bool)((Dali::KeyEvent const *)arg1)->IsAltModifier();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Key_keyPressedName_set(void * jarg1, char * jarg2) {
  Dali::KeyEvent *argp1 = (Dali::KeyEvent *) 0 ;
  std::string *arg2 = 0 ;

  argp1 = (Dali::KeyEvent *) jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "KeyEvent is null", 0);
    return ;
  }

  Dali::KeyEvent arg1 = *argp1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;

  {
    try {
      Dali::DevelKeyEvent::SetKeyName(arg1, (std::string const &)*arg2);
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return ;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return ;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return ;
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_Key_keyPressedName_get(void * jarg1) {
  char * jresult ;

  if( jarg1 == NULL )
  {
    jresult = SWIG_csharp_string_callback( "" );
  }
  else
  {
    Dali::KeyEvent *arg1 = ( Dali::KeyEvent * ) 0;
    std::string *result = 0;
    std::string str = "";

    arg1 = ( Dali::KeyEvent * )jarg1;
    {
      try {
        str = ((Dali::KeyEvent const *)arg1)->GetKeyName();
        result = (std::string *) &str;
        jresult = SWIG_csharp_string_callback(result->c_str());
      } catch (std::out_of_range& e) {
        {
          SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
        };
      } catch (std::exception& e) {
        {
          SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
        };
      } catch (Dali::DaliException e) {
        {
          SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
        };
      } catch (...) {
        {
          SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
        };
      }
    }

  }

  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Key_keyPressed_set(void * jarg1, char * jarg2) {
  Dali::KeyEvent *argp1 = (Dali::KeyEvent *) 0 ;
  std::string *arg2 = 0 ;

  argp1 = (Dali::KeyEvent *) jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "KeyEvent is null", 0);
    return ;
  }

  Dali::KeyEvent arg1 = *argp1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;

  {
    try {
      Dali::DevelKeyEvent::SetKeyString(arg1, (std::string const &)*arg2);
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return ;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return ;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return ;
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_Key_keyPressed_get(void * jarg1) {
  char * jresult ;

  Dali::KeyEvent *arg1 = ( Dali::KeyEvent * ) 0;
  std::string *result = 0;
  std::string str = "";
  arg1 = ( Dali::KeyEvent * )jarg1;
  {
    try {
      str = ((Dali::KeyEvent const *)arg1)->GetKeyString();
      result = (std::string *) &str;
      jresult = SWIG_csharp_string_callback(result->c_str());
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Key_keyCode_set(void * jarg1, int jarg2) {
  Dali::KeyEvent *argp1 = (Dali::KeyEvent *) 0 ;
  int arg2 ;

  argp1 = (Dali::KeyEvent *) jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "KeyEvent is null", 0);
    return ;
  }

  Dali::KeyEvent arg1 = *argp1;
  arg2 = (int)jarg2;
  {
    try {
      Dali::DevelKeyEvent::SetKeyCode(arg1, arg2);
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return ;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return ;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return ;
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Key_keyCode_get(void * jarg1) {
  int jresult ;
  Dali::KeyEvent *arg1 = ( Dali::KeyEvent * ) 0;
  int result;

  arg1 = (Dali::KeyEvent *)jarg1;
  {
    try {
      result = (int)((Dali::KeyEvent const *)arg1)->GetKeyCode();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Key_keyModifier_set(void * jarg1, int jarg2) {
  Dali::KeyEvent *argp1 = (Dali::KeyEvent *) 0 ;
  int arg2 ;

  argp1 = (Dali::KeyEvent *) jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "KeyEvent is null", 0);
    return ;
  }

  Dali::KeyEvent arg1 = *argp1;
  arg2 = (int)jarg2;
  {
    try {
      Dali::DevelKeyEvent::SetKeyModifier(arg1, arg2);
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return ;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return ;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return ;
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Key_keyModifier_get(void * jarg1) {
  int jresult ;
  Dali::KeyEvent *arg1 = ( Dali::KeyEvent * ) 0;
  int result;

  arg1 = (Dali::KeyEvent *)jarg1;
  {
    try {
      result = (int)((Dali::KeyEvent const *)arg1)->GetKeyModifier();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Key_time_set(void * jarg1, unsigned long jarg2) {
  Dali::KeyEvent *argp1 = (Dali::KeyEvent *) 0 ;
  unsigned long arg2 ;

  argp1 = (Dali::KeyEvent *) jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "KeyEvent is null", 0);
    return ;
  }

  Dali::KeyEvent arg1 = *argp1;
  arg2 = (int)jarg2;
  {
    try {
      Dali::DevelKeyEvent::SetTime(arg1, arg2);
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return ;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return ;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return ;
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_Key_time_get(void * jarg1) {
  unsigned long jresult ;
  Dali::KeyEvent *arg1 = ( Dali::KeyEvent * ) 0;
  unsigned long result;

  arg1 = (Dali::KeyEvent *)jarg1;
  {
    try {
      result = (int)((Dali::KeyEvent const *)arg1)->GetTime();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Key_state_set(void * jarg1, int jarg2) {
  Dali::KeyEvent *argp1 = (Dali::KeyEvent *) 0;
  Dali::KeyEvent::State arg2;

  argp1 = (Dali::KeyEvent *) jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "KeyEvent is null", 0);
    return ;
  }

  Dali::KeyEvent arg1 = *argp1;
  arg2 = (Dali::KeyEvent::State)jarg2;
  {
    try {
      Dali::DevelKeyEvent::SetState(arg1, arg2);
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return ;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return ;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return ;
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Key_state_get(void * jarg1) {
  int jresult ;
  Dali::KeyEvent *arg1 = ( Dali::KeyEvent * ) 0;
  Dali::KeyEvent::State result;

  arg1 = (Dali::KeyEvent *)jarg1;
  {
    try {
      result = (Dali::KeyEvent::State)((Dali::KeyEvent const *)arg1)->GetState();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = (int)result;
  return jresult;

}

SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_Key_logicalKey_get(void * jarg1) {
  char * jresult ;

  Dali::KeyEvent *arg1 = ( Dali::KeyEvent * ) 0;
  std::string *result = 0;
  std::string str = "";

  arg1 = ( Dali::KeyEvent * )jarg1;
  {
    try {
      str = ((Dali::KeyEvent const *)arg1)->GetLogicalKey();
      result = (std::string *) &str;
      jresult = SWIG_csharp_string_callback(result->c_str());
    } CALL_CATCH_EXCEPTION(0);
  }

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_LongPressGestureDetector__SWIG_0() {
  void * jresult ;
  Dali::LongPressGestureDetector *result = 0 ;

  {
    try {
      result = (Dali::LongPressGestureDetector *)new Dali::LongPressGestureDetector();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LongPressGestureDetector_New__SWIG_0() {
  void * jresult ;
  Dali::LongPressGestureDetector result;

  {
    try {
      result = Dali::LongPressGestureDetector::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::LongPressGestureDetector((const Dali::LongPressGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LongPressGestureDetector_New__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  Dali::LongPressGestureDetector result;

  arg1 = (unsigned int)jarg1;
  {
    try {
      result = Dali::LongPressGestureDetector::New(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::LongPressGestureDetector((const Dali::LongPressGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LongPressGestureDetector_New__SWIG_2(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Dali::LongPressGestureDetector result;

  arg1 = (unsigned int)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = Dali::LongPressGestureDetector::New(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::LongPressGestureDetector((const Dali::LongPressGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LongPressGestureDetector_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::LongPressGestureDetector result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::LongPressGestureDetector::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::LongPressGestureDetector((const Dali::LongPressGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_LongPressGestureDetector(void * jarg1) {
  Dali::LongPressGestureDetector *arg1 = (Dali::LongPressGestureDetector *) 0 ;

  arg1 = (Dali::LongPressGestureDetector *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_LongPressGestureDetector__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::LongPressGestureDetector *arg1 = 0 ;
  Dali::LongPressGestureDetector *result = 0 ;

  arg1 = (Dali::LongPressGestureDetector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::LongPressGestureDetector const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::LongPressGestureDetector *)new Dali::LongPressGestureDetector((Dali::LongPressGestureDetector const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LongPressGestureDetector_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::LongPressGestureDetector *arg1 = (Dali::LongPressGestureDetector *) 0 ;
  Dali::LongPressGestureDetector *arg2 = 0 ;
  Dali::LongPressGestureDetector *result = 0 ;

  arg1 = (Dali::LongPressGestureDetector *)jarg1;
  arg2 = (Dali::LongPressGestureDetector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::LongPressGestureDetector const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::LongPressGestureDetector *) &(arg1)->operator =((Dali::LongPressGestureDetector const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_LongPressGestureDetector_SetTouchesRequired__SWIG_0(void * jarg1, unsigned int jarg2) {
  Dali::LongPressGestureDetector *arg1 = (Dali::LongPressGestureDetector *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::LongPressGestureDetector *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      (arg1)->SetTouchesRequired(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_LongPressGestureDetector_SetTouchesRequired__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Dali::LongPressGestureDetector *arg1 = (Dali::LongPressGestureDetector *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;

  arg1 = (Dali::LongPressGestureDetector *)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (unsigned int)jarg3;
  {
    try {
      (arg1)->SetTouchesRequired(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_LongPressGestureDetector_GetMinimumTouchesRequired(void * jarg1) {
  unsigned int jresult ;
  Dali::LongPressGestureDetector *arg1 = (Dali::LongPressGestureDetector *) 0 ;
  unsigned int result;

  arg1 = (Dali::LongPressGestureDetector *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::LongPressGestureDetector const *)arg1)->GetMinimumTouchesRequired();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_LongPressGestureDetector_GetMaximumTouchesRequired(void * jarg1) {
  unsigned int jresult ;
  Dali::LongPressGestureDetector *arg1 = (Dali::LongPressGestureDetector *) 0 ;
  unsigned int result;

  arg1 = (Dali::LongPressGestureDetector *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::LongPressGestureDetector const *)arg1)->GetMaximumTouchesRequired();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LongPressGestureDetector_DetectedSignal(void * jarg1) {
  void * jresult ;
  Dali::LongPressGestureDetector *arg1 = (Dali::LongPressGestureDetector *) 0 ;
  Dali::LongPressGestureDetector::DetectedSignalType *result = 0 ;

  arg1 = (Dali::LongPressGestureDetector *)jarg1;
  {
    try {
      result = (Dali::LongPressGestureDetector::DetectedSignalType *) &(arg1)->DetectedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_LongPressGesture__SWIG_0() {
  void * jresult ;
  Dali::LongPressGesture *result = 0 ;

  {
    try {
      result = (Dali::LongPressGesture *)new Dali::LongPressGesture();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LongPressGesture_New(int jarg1) {
  void * jresult ;
  Dali::GestureState arg1 ;
  Dali::LongPressGesture result;

  arg1 = (Dali::GestureState)jarg1;
  {
    try {
      result = DevelLongPressGesture::New(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::LongPressGesture((const Dali::LongPressGesture &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_LongPressGesture__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::LongPressGesture *arg1 = 0 ;
  Dali::LongPressGesture *result = 0 ;

  arg1 = (Dali::LongPressGesture *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::LongPressGesture const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::LongPressGesture *)new Dali::LongPressGesture((Dali::LongPressGesture const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LongPressGesture_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::LongPressGesture *arg1 = (Dali::LongPressGesture *) 0 ;
  Dali::LongPressGesture *arg2 = 0 ;
  Dali::LongPressGesture *result = 0 ;

  arg1 = (Dali::LongPressGesture *)jarg1;
  arg2 = (Dali::LongPressGesture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::LongPressGesture const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::LongPressGesture *) &(arg1)->operator =((Dali::LongPressGesture const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_LongPressGesture(void * jarg1) {
  Dali::LongPressGesture *arg1 = (Dali::LongPressGesture *) 0 ;

  arg1 = (Dali::LongPressGesture *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_LongPressGesture_numberOfTouches_get(void * jarg1) {
  unsigned int jresult ;
  Dali::LongPressGesture *arg1 = (Dali::LongPressGesture *) 0 ;
  unsigned int result;

  arg1 = (Dali::LongPressGesture *)jarg1;
  result = (unsigned int) ((arg1)->GetNumberOfTouches());
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LongPressGesture_screenPoint_get(void * jarg1) {
  void * jresult ;
  Dali::LongPressGesture *arg1 = (Dali::LongPressGesture *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::LongPressGesture *)jarg1;
  {
    try {
      result = ((Dali::LongPressGesture const *)arg1)->GetScreenPoint();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }
  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LongPressGesture_localPoint_get(void * jarg1) {
  void * jresult ;
  Dali::LongPressGesture *arg1 = (Dali::LongPressGesture *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::LongPressGesture *)jarg1;
  {
    try {
      result = ((Dali::LongPressGesture const *)arg1)->GetLocalPoint();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }
  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Wheel__SWIG_0() {
  void * jresult ;
  Dali::WheelEvent *result = 0 ;

  {
    try {
      result = (Dali::WheelEvent *)new Dali::WheelEvent();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Wheel__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::WheelEvent *arg1 = 0 ;
  Dali::WheelEvent *result = 0 ;

  arg1 = (Dali::WheelEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::WheelEvent const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::WheelEvent *)new Dali::WheelEvent((Dali::WheelEvent const &)*arg1);
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Wheel_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::WheelEvent *arg1 = (Dali::WheelEvent *) 0 ;
  Dali::WheelEvent *arg2 = 0 ;
  Dali::WheelEvent *result = 0 ;

  arg1 = (Dali::WheelEvent *)jarg1;
  arg2 = (Dali::WheelEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::WheelEvent const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::WheelEvent *) &(arg1)->operator =((Dali::WheelEvent const &)*arg2);
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = (void *)result;
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Wheel_New(int jarg1, int jarg2, unsigned int jarg3, void * jarg4, int jarg5, unsigned int jarg6) {
  void * jresult ;
  Dali::WheelEvent::Type arg1 ;
  int arg2 ;
  unsigned int arg3 ;
  Dali::Vector2 arg4 ;
  int arg5 ;
  unsigned int arg6 ;
  Dali::Vector2 *argp4 ;
  Dali::WheelEvent result;

  arg1 = (Dali::WheelEvent::Type)jarg1;
  arg2 = (int)jarg2;
  arg3 = (unsigned int)jarg3;
  argp4 = (Dali::Vector2 *)jarg4;
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Vector2", 0);
    return 0;
  }
  arg4 = *argp4;
  arg5 = (int)jarg5;
  arg6 = (unsigned int)jarg6;
  {
    try {
      result = DevelWheelEvent::New(arg1,arg2,arg3,arg4,arg5,arg6);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::WheelEvent((const Dali::WheelEvent &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Wheel(void * jarg1) {
  Dali::WheelEvent *arg1 = (Dali::WheelEvent *) 0 ;

  arg1 = (Dali::WheelEvent *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Wheel_IsShiftModifier(void * jarg1) {
  bool jresult ;
  Dali::WheelEvent *arg1 = (Dali::WheelEvent *) 0 ;
  bool result;

  arg1 = (Dali::WheelEvent *)jarg1;
  {
    try {
      result = (bool)((Dali::WheelEvent const *)arg1)->IsShiftModifier();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Wheel_IsCtrlModifier(void * jarg1) {
  bool jresult ;
  Dali::WheelEvent *arg1 = (Dali::WheelEvent *) 0 ;
  bool result;

  arg1 = (Dali::WheelEvent *)jarg1;
  {
    try {
      result = (bool)((Dali::WheelEvent const *)arg1)->IsCtrlModifier();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Wheel_IsAltModifier(void * jarg1) {
  bool jresult ;
  Dali::WheelEvent *arg1 = (Dali::WheelEvent *) 0 ;
  bool result;

  arg1 = (Dali::WheelEvent *)jarg1;
  {
    try {
      result = (bool)((Dali::WheelEvent const *)arg1)->IsAltModifier();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Wheel_type_get(void * jarg1) {
  int jresult ;
  Dali::WheelEvent *arg1 = (Dali::WheelEvent *) 0 ;
  Dali::WheelEvent::Type result;

  arg1 = (Dali::WheelEvent *)jarg1;
  {
    try {
      result = ((Dali::WheelEvent const *)arg1)->GetType();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Wheel_direction_get(void * jarg1) {
  int jresult ;
  Dali::WheelEvent *arg1 = (Dali::WheelEvent *) 0 ;
  int result;

  arg1 = (Dali::WheelEvent *)jarg1;
  {
    try {
      result = ((Dali::WheelEvent const *)arg1)->GetDirection();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_Wheel_modifiers_get(void * jarg1) {
  unsigned int jresult ;
  Dali::WheelEvent *arg1 = (Dali::WheelEvent *) 0 ;
  unsigned int result;

  arg1 = (Dali::WheelEvent *)jarg1;
  {
    try {
      result = ((Dali::WheelEvent const *)arg1)->GetModifiers();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Wheel_point_get(void * jarg1) {
  void * jresult ;
  Dali::WheelEvent *arg1 = (Dali::WheelEvent *) 0 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::WheelEvent *)jarg1;
  {
    try {
      result = (Dali::Vector2 *) &((Dali::WheelEvent const *)arg1)->GetPoint();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Wheel_delta_get(void * jarg1) {
  int jresult ;
  Dali::WheelEvent *arg1 = (Dali::WheelEvent *) 0 ;
  int result;

  arg1 = (Dali::WheelEvent *)jarg1;
  {
    try {
      result = ((Dali::WheelEvent const *)arg1)->GetDelta();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_Wheel_timeStamp_get(void * jarg1) {
  unsigned int jresult ;
  Dali::WheelEvent *arg1 = (Dali::WheelEvent *) 0 ;
  unsigned int result;

  arg1 = (Dali::WheelEvent *)jarg1;
  {
    try {
      result = ((Dali::WheelEvent const *)arg1)->GetTime();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }

  jresult = result;
  return jresult;
}

SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_GetDeviceName(void * jarg1) {
  char * jresult ;
  Dali::KeyEvent *arg1 = 0 ;
  std::string result;

  arg1 = (Dali::KeyEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::KeyEvent const & type is null", 0);
    return 0;
  }
  {
    try {
      result = arg1->GetDeviceName();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = SWIG_csharp_string_callback((&result)->c_str());
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_GetDeviceClass(void * jarg1) {
  int jresult ;
  Dali::KeyEvent *arg1 = 0 ;
  Dali::Device::Class::Type result;

  arg1 = (Dali::KeyEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::KeyEvent const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Device::Class::Type)arg1->GetDeviceClass();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_GetDeviceSubClass(void * jarg1) {
  int jresult ;
  Dali::KeyEvent *arg1 = 0 ;
  Dali::Device::Subclass::Type result;

  arg1 = (Dali::KeyEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::KeyEvent const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Device::Subclass::Type)arg1->GetDeviceSubclass();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Raise(void * jarg1) {
  Dali::Actor arg1 ;
  Dali::Actor *argp1 ;

  argp1 = (Dali::Actor *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg1 = *argp1;
  {
    try {
      arg1.Raise();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Lower(void * jarg1) {
  Dali::Actor arg1 ;
  Dali::Actor *argp1 ;

  argp1 = (Dali::Actor *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg1 = *argp1;
  {
    try {
      arg1.Lower();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RaiseToTop(void * jarg1) {
  Dali::Actor arg1 ;
  Dali::Actor *argp1 ;

  argp1 = (Dali::Actor *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg1 = *argp1;
  {
    try {
      arg1.RaiseToTop();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_LowerToBottom(void * jarg1) {
  Dali::Actor arg1 ;
  Dali::Actor *argp1 ;

  argp1 = (Dali::Actor *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg1 = *argp1;
  {
    try {
      arg1.LowerToBottom();
    } CALL_CATCH_EXCEPTION();
  }

}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RaiseAbove(void * jarg1, void * jarg2) {
  Dali::Actor arg1 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp1 ;
  Dali::Actor *argp2 ;

  argp1 = (Dali::Actor *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg1 = *argp1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      arg1.RaiseAbove(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_LowerBelow(void * jarg1, void * jarg2) {
  Dali::Actor arg1 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp1 ;
  Dali::Actor *argp2 ;

  argp1 = (Dali::Actor *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg1 = *argp1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      arg1.LowerBelow(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VisibilityChangedSignal(void * jarg1) {
  void * jresult ;
  Dali::Actor arg1 ;
  Dali::Actor *argp1 ;
  Dali::DevelActor::VisibilityChangedSignalType *result = 0 ;

  argp1 = (Dali::Actor *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = (Dali::DevelActor::VisibilityChangedSignalType *) &Dali::DevelActor::VisibilityChangedSignal(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LayoutDirectionChangedSignal(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 ;
  Dali::Actor::LayoutDirectionChangedSignalType *result = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (Dali::Actor::LayoutDirectionChangedSignalType *) &(arg1)->LayoutDirectionChangedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_PARENT_ORIGIN_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::PARENT_ORIGIN;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_PARENT_ORIGIN_X_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::PARENT_ORIGIN_X;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_PARENT_ORIGIN_Y_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::PARENT_ORIGIN_Y;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_PARENT_ORIGIN_Z_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::PARENT_ORIGIN_Z;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_ANCHOR_POINT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::ANCHOR_POINT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_ANCHOR_POINT_X_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::ANCHOR_POINT_X;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_ANCHOR_POINT_Y_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::ANCHOR_POINT_Y;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_ANCHOR_POINT_Z_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::ANCHOR_POINT_Z;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_SIZE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::SIZE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_SIZE_WIDTH_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::SIZE_WIDTH;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_SIZE_HEIGHT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::SIZE_HEIGHT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_SIZE_DEPTH_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::SIZE_DEPTH;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_POSITION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::POSITION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_POSITION_X_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::POSITION_X;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_POSITION_Y_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::POSITION_Y;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_POSITION_Z_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::POSITION_Z;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_WORLD_POSITION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::WORLD_POSITION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_WORLD_POSITION_X_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::WORLD_POSITION_X;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_WORLD_POSITION_Y_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::WORLD_POSITION_Y;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_WORLD_POSITION_Z_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::WORLD_POSITION_Z;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_ORIENTATION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::ORIENTATION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_WORLD_ORIENTATION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::WORLD_ORIENTATION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_SCALE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::SCALE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_SCALE_X_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::SCALE_X;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_SCALE_Y_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::SCALE_Y;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_SCALE_Z_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::SCALE_Z;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_WORLD_SCALE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::WORLD_SCALE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_VISIBLE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::VISIBLE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_COLOR_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::COLOR;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_COLOR_RED_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::COLOR_RED;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_COLOR_GREEN_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::COLOR_GREEN;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_COLOR_BLUE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::COLOR_BLUE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_COLOR_ALPHA_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::COLOR_ALPHA;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_WORLD_COLOR_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::WORLD_COLOR;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_WORLD_MATRIX_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::WORLD_MATRIX;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_NAME_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::NAME;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_SENSITIVE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::SENSITIVE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_LEAVE_REQUIRED_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::LEAVE_REQUIRED;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_INHERIT_ORIENTATION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::INHERIT_ORIENTATION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_INHERIT_SCALE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::INHERIT_SCALE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_COLOR_MODE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::COLOR_MODE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_DRAW_MODE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::DRAW_MODE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_SIZE_MODE_FACTOR_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::SIZE_MODE_FACTOR;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_WIDTH_RESIZE_POLICY_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::WIDTH_RESIZE_POLICY;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_HEIGHT_RESIZE_POLICY_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::HEIGHT_RESIZE_POLICY;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_SIZE_SCALE_POLICY_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::SIZE_SCALE_POLICY;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_WIDTH_FOR_HEIGHT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::WIDTH_FOR_HEIGHT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_HEIGHT_FOR_WIDTH_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::HEIGHT_FOR_WIDTH;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_PADDING_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::PADDING;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_MINIMUM_SIZE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::MINIMUM_SIZE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_MAXIMUM_SIZE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::MAXIMUM_SIZE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_INHERIT_POSITION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::INHERIT_POSITION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_Property_CLIPPING_MODE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Actor::Property::CLIPPING_MODE;
  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Actor_Property_OPACITY_get() {

  return Dali::Actor::Property::OPACITY;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Actor_Property_SCREEN_POSITION_get() {

  return Dali::Actor::Property::SCREEN_POSITION;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Actor_Property_POSITION_USES_ANCHOR_POINT_get() {

  return Dali::Actor::Property::POSITION_USES_ANCHOR_POINT;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Actor_Property_INHERIT_LAYOUT_DIRECTION_get() {
  return Dali::Actor::Property::INHERIT_LAYOUT_DIRECTION;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Actor_Property_LAYOUT_DIRECTION_get() {
  return Dali::Actor::Property::LAYOUT_DIRECTION;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Actor_Property() {
  void * jresult ;
  Dali::Actor::Property *result = 0 ;

  {
    try {
      result = (Dali::Actor::Property *)new Dali::Actor::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Actor_Property(void * jarg1) {
  Dali::Actor::Property *arg1 = (Dali::Actor::Property *) 0 ;

  arg1 = (Dali::Actor::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Actor__SWIG_0() {
  void * jresult ;
  Dali::Actor *result = 0 ;

  {
    try {
      result = (Dali::Actor *)new Dali::Actor();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_New() {
  void * jresult ;
  Dali::Actor result;

  {
    try {
      result = Dali::Actor::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Actor result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Actor::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Actor(void * jarg1) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Actor__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = 0 ;
  Dali::Actor *result = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Actor *)new Dali::Actor((Dali::Actor const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Actor *arg2 = 0 ;
  Dali::Actor *result = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Actor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Actor *) &(arg1)->operator =((Dali::Actor const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_Actor_GetName(void * jarg1) {
  char * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  std::string *result = 0 ;
  std::string name = "";

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      name = ((Dali::Actor const *)arg1)->GetProperty< std::string >( Dali::Actor::Property::NAME );
      result = (std::string *) &name;
      jresult = SWIG_csharp_string_callback(result->c_str());
    } CALL_CATCH_EXCEPTION(0);
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetName(void * jarg1, char * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      (arg1)->SetProperty( Dali::Actor::Property::NAME, (std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }


  //argout typemap for const std::string&

}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_Actor_GetId(void * jarg1) {
  unsigned int jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  unsigned int result;

  arg1 = (Dali::Actor *)jarg1;

  if(!arg1) {
    DALI_LOG_ERROR("[ERROR] actor is null! return -1");
    return -1;
  }

  {
    try {
      result = (unsigned int)((Dali::Actor const *)arg1)->GetProperty< int >( Actor::Property::ID );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Actor_IsRoot(void * jarg1) {
  bool jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (bool)((Dali::Actor const *)arg1)->GetProperty< bool >( Actor::Property::IS_ROOT );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Actor_OnStage(void * jarg1) {
  bool jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (bool)((Dali::Actor const *)arg1)->GetProperty< bool >( Actor::Property::CONNECTED_TO_SCENE );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Actor_IsLayer(void * jarg1) {
  bool jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (bool)((Dali::Actor const *)arg1)->GetProperty< bool >( Actor::Property::IS_LAYER );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetLayer(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Layer result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (arg1)->GetLayer();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Layer((const Dali::Layer &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_Add(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Actor *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->Add(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_Remove(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Actor *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->Remove(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_Unparent(void * jarg1) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      (arg1)->Unparent();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_Actor_GetChildCount(void * jarg1) {
  unsigned int jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  unsigned int result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::Actor const *)arg1)->GetChildCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetChildAt(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  unsigned int arg2 ;
  Dali::Actor result;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = ((Dali::Actor const *)arg1)->GetChildAt(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_FindChildByName(void * jarg1, char * jarg2) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Actor result;

  arg1 = (Dali::Actor *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      result = (arg1)->FindChildByName((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_FindChildById(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  unsigned int arg2 ;
  Dali::Actor result;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (arg1)->FindChildById(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetParent(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Actor result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = ((Dali::Actor const *)arg1)->GetParent();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetParentOrigin(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetProperty( Actor::Property::PARENT_ORIGIN,(Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetCurrentParentOrigin(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = ((Dali::Actor const *)arg1)->GetCurrentProperty< Vector3 >( Actor::Property::PARENT_ORIGIN );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetAnchorPoint(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetProperty( Actor::Property::ANCHOR_POINT,(Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetCurrentAnchorPoint(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = ((Dali::Actor const *)arg1)->GetCurrentProperty< Vector3 >( Actor::Property::ANCHOR_POINT );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetSize__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  float arg2 ;
  float arg3 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->SetProperty( Actor::Property::SIZE, Dali::Vector2(arg2,arg3) );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetSize__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  {
    try {
      (arg1)->SetProperty( Actor::Property::SIZE, Dali::Vector3(arg2,arg3,arg4) );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetSize__SWIG_2(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector2 *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetProperty( Actor::Property::SIZE, (Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetSize__SWIG_3(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetProperty( Actor::Property::SIZE, (Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetTargetSize(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = ((Dali::Actor const *)arg1)->GetTargetSize();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetCurrentSize(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = ((Dali::Actor const *)arg1)->GetCurrentProperty< Vector3 >( Actor::Property::SIZE );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetNaturalSize(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = ((Dali::Actor const *)arg1)->GetNaturalSize();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetPosition__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  float arg2 ;
  float arg3 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->SetProperty( Actor::Property::POSITION, Dali::Vector2( arg2, arg3 ) );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetPosition__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  {
    try {
      (arg1)->SetProperty( Actor::Property::POSITION, Dali::Vector3( arg2, arg3, arg4 ) );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetPosition__SWIG_2(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetProperty( Actor::Property::POSITION, (Dali::Vector3 const &)*arg2 );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetX(void * jarg1, float jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  float arg2 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetProperty( Actor::Property::POSITION_X, (arg2) );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetY(void * jarg1, float jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  float arg2 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetProperty( Actor::Property::POSITION_Y, arg2 );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetZ(void * jarg1, float jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  float arg2 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetProperty( Actor::Property::POSITION_Z, arg2 );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_TranslateBy(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->TranslateBy((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetCurrentPosition(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = ((Dali::Actor const *)arg1)->GetCurrentProperty< Vector3 >( Actor::Property::POSITION );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetCurrentWorldPosition(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = ((Dali::Actor const *)arg1)->GetCurrentProperty< Vector3 >( Actor::Property::WORLD_POSITION );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetInheritPosition(void * jarg1, bool jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetProperty(Dali::Actor::Property::INHERIT_POSITION, arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Actor_IsPositionInherited(void * jarg1) {
  bool jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (bool)((Dali::Actor const *)arg1)->GetProperty<bool>(Dali::Actor::Property::INHERIT_POSITION);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetOrientation__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Degree *arg2 = 0 ;
  Dali::Vector3 *arg3 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Degree *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Degree const & type is null", 0);
    return ;
  }
  arg3 = (Dali::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetProperty( Actor::Property::ORIENTATION, Quaternion( (Dali::Degree const &)*arg2,(Dali::Vector3 const &)*arg3 ) );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetOrientation__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Radian *arg2 = 0 ;
  Dali::Vector3 *arg3 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Radian const & type is null", 0);
    return ;
  }
  arg3 = (Dali::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetProperty( Actor::Property::ORIENTATION, Quaternion( (Dali::Radian const &)*arg2,(Dali::Vector3 const &)*arg3 ) );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetOrientation__SWIG_2(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Quaternion *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetProperty( Actor::Property::ORIENTATION, (Dali::Quaternion const &)*arg2 );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_RotateBy__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Degree *arg2 = 0 ;
  Dali::Vector3 *arg3 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Degree *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Degree const & type is null", 0);
    return ;
  }
  arg3 = (Dali::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->RotateBy((Dali::Degree const &)*arg2,(Dali::Vector3 const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_RotateBy__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Radian *arg2 = 0 ;
  Dali::Vector3 *arg3 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Radian const & type is null", 0);
    return ;
  }
  arg3 = (Dali::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->RotateBy((Dali::Radian const &)*arg2,(Dali::Vector3 const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_RotateBy__SWIG_2(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Quaternion *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Quaternion const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->RotateBy((Dali::Quaternion const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetCurrentOrientation(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Quaternion result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = ((Dali::Actor const *)arg1)->GetCurrentProperty< Quaternion >( Actor::Property::ORIENTATION );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Quaternion((const Dali::Quaternion &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetInheritOrientation(void * jarg1, bool jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetProperty( Actor::Property::INHERIT_ORIENTATION,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Actor_IsOrientationInherited(void * jarg1) {
  bool jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (bool)((Dali::Actor const *)arg1)->GetProperty< bool >( Actor::Property::INHERIT_ORIENTATION );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetCurrentWorldOrientation(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Quaternion result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = ((Dali::Actor const *)arg1)->GetCurrentProperty< Quaternion >( Actor::Property::WORLD_ORIENTATION );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Quaternion((const Dali::Quaternion &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetScale__SWIG_0(void * jarg1, float jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  float arg2 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetProperty( Actor::Property::SCALE, arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetScale__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  {
    try {
      (arg1)->SetProperty( Actor::Property::SCALE, Vector3( arg2, arg3, arg4 ) );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetScale__SWIG_2(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetProperty( Actor::Property::SCALE, (Dali::Vector3 const &)*arg2 );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_ScaleBy(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->ScaleBy((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetCurrentScale(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = ((Dali::Actor const *)arg1)->GetCurrentProperty< Vector3 >( Actor::Property::SCALE );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetCurrentWorldScale(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = ((Dali::Actor const *)arg1)->GetCurrentProperty< Vector3 >( Actor::Property::WORLD_SCALE );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetInheritScale(void * jarg1, bool jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetProperty( Actor::Property::INHERIT_SCALE,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Actor_IsScaleInherited(void * jarg1) {
  bool jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (bool)((Dali::Actor const *)arg1)->GetProperty< bool >( Actor::Property::INHERIT_SCALE );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetCurrentWorldMatrix(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Matrix result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = ((Dali::Actor const *)arg1)->GetCurrentProperty< Matrix >( Actor::Property::WORLD_MATRIX );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Matrix((const Dali::Matrix &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetVisible(void * jarg1, bool jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetProperty( Actor::Property::VISIBLE,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Actor_IsVisible(void * jarg1) {
  bool jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (bool)((Dali::Actor const *)arg1)->GetCurrentProperty< bool >( Actor::Property::VISIBLE );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetOpacity(void * jarg1, float jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  float arg2 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetProperty( Actor::Property::OPACITY,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Actor_GetCurrentOpacity(void * jarg1) {
  float jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  float result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (float)((Dali::Actor const *)arg1)->GetCurrentProperty< float >( Actor::Property::OPACITY );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetColor(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector4 *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetProperty( Actor::Property::COLOR,(Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetCurrentColor(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector4 result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = ((Dali::Actor const *)arg1)->GetCurrentProperty< Vector4 >( Actor::Property::COLOR );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetColorMode(void * jarg1, int jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::ColorMode arg2 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::ColorMode)jarg2;
  {
    try {
      (arg1)->SetProperty( Actor::Property::COLOR_MODE,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_GetColorMode(void * jarg1) {
  int jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::ColorMode result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (Dali::ColorMode)((Dali::Actor const *)arg1)->GetProperty< ColorMode >( Actor::Property::COLOR_MODE );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetCurrentWorldColor(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector4 result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = ((Dali::Actor const *)arg1)->GetCurrentProperty< Vector4 >( Actor::Property::WORLD_COLOR );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetDrawMode(void * jarg1, int jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::DrawMode::Type arg2 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::DrawMode::Type)jarg2;
  {
    try {
      (arg1)->SetProperty( Actor::Property::DRAW_MODE,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_GetDrawMode(void * jarg1) {
  int jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::DrawMode::Type result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (Dali::DrawMode::Type)((Dali::Actor const *)arg1)->GetProperty< DrawMode::Type >( Actor::Property::DRAW_MODE );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetSensitive(void * jarg1, bool jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetProperty( Actor::Property::SENSITIVE,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Actor_IsSensitive(void * jarg1) {
  bool jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (bool)((Dali::Actor const *)arg1)->GetProperty< bool >( Actor::Property::SENSITIVE );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Actor_ScreenToLocal(void * jarg1, float * jarg2, float * jarg3, float jarg4, float jarg5) {
  bool jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  bool result;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (float *)jarg2;
  arg3 = (float *)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  {
    try {
      result = (bool)((Dali::Actor const *)arg1)->ScreenToLocal(*arg2,*arg3,arg4,arg5);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetLeaveRequired(void * jarg1, bool jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetProperty( Actor::Property::LEAVE_REQUIRED,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Actor_GetLeaveRequired(void * jarg1) {
  bool jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (bool)((Dali::Actor const *)arg1)->GetProperty< bool >( Actor::Property::LEAVE_REQUIRED );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetKeyboardFocusable(void * jarg1, bool jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetProperty( Actor::Property::KEYBOARD_FOCUSABLE, arg2 );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Actor_IsKeyboardFocusable(void * jarg1) {
  bool jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (bool)((Dali::Actor const *)arg1)->GetProperty< bool >( Actor::Property::KEYBOARD_FOCUSABLE );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetTouchFocusable(void * jarg1, bool jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetProperty( DevelActor::Property::TOUCH_FOCUSABLE, arg2 );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Actor_IsTouchFocusable(void * jarg1) {
  bool jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  bool result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (bool)((Dali::Actor const *)arg1)->GetProperty< bool >( DevelActor::Property::TOUCH_FOCUSABLE );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetResizePolicy(void * jarg1, int jarg2, int jarg3) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::ResizePolicy::Type arg2 ;
  Dali::Dimension::Type arg3 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::ResizePolicy::Type)jarg2;
  arg3 = (Dali::Dimension::Type)jarg3;
  {
    try {
      (arg1)->SetResizePolicy(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_GetResizePolicy(void * jarg1, int jarg2) {
  int jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Dimension::Type arg2 ;
  Dali::ResizePolicy::Type result;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Dimension::Type)jarg2;
  {
    try {
      result = (Dali::ResizePolicy::Type)((Dali::Actor const *)arg1)->GetResizePolicy(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetSizeScalePolicy(void * jarg1, int jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::SizeScalePolicy::Type arg2 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::SizeScalePolicy::Type)jarg2;
  {
    try {
      (arg1)->SetProperty( Actor::Property::SIZE_SCALE_POLICY,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_GetSizeScalePolicy(void * jarg1) {
  int jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::SizeScalePolicy::Type result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (Dali::SizeScalePolicy::Type)((Dali::Actor const *)arg1)->GetProperty< SizeScalePolicy::Type >( Actor::Property::SIZE_SCALE_POLICY );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetSizeModeFactor(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetProperty( Actor::Property::SIZE_MODE_FACTOR, (Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetSizeModeFactor(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = ((Dali::Actor const *)arg1)->GetProperty< Vector3 >( Actor::Property::SIZE_MODE_FACTOR );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Actor_GetHeightForWidth(void * jarg1, float jarg2) {
  float jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  float arg2 ;
  float result;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (float)(arg1)->GetHeightForWidth(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Actor_GetWidthForHeight(void * jarg1, float jarg2) {
  float jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  float arg2 ;
  float result;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (float)(arg1)->GetWidthForHeight(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Actor_GetRelayoutSize(void * jarg1, int jarg2) {
  float jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Dimension::Type arg2 ;
  float result;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Dimension::Type)jarg2;
  {
    try {
      result = (float)((Dali::Actor const *)arg1)->GetRelayoutSize(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetPadding(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Padding *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Padding *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Padding const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetProperty( Actor::Property::PADDING, (Dali::Padding const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_GetPadding(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Padding *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Padding *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Padding & type is null", 0);
    return ;
  }
  {
    try {
      *arg2 = ((Dali::Actor const *)arg1)->GetProperty<Vector4>( Actor::Property::PADDING );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetMinimumSize(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector2 *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetProperty( Actor::Property::MINIMUM_SIZE,(Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetMinimumSize(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (arg1)->GetProperty< Vector2 >( Actor::Property::MINIMUM_SIZE );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetMaximumSize(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector2 *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetProperty( Actor::Property::MAXIMUM_SIZE,(Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetMaximumSize(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (arg1)->GetProperty< Vector2 >( Actor::Property::MAXIMUM_SIZE );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Actor_GetHierarchyDepth(void * jarg1) {
  int jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  int result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (int)(arg1)->GetProperty< int >( Actor::Property::HIERARCHY_DEPTH );
      Dali::Actor parent = ((Dali::Actor const *)arg1)->GetParent();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_Actor_AddRenderer(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Renderer *arg2 = 0 ;
  unsigned int result;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Renderer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Renderer & type is null", 0);
    return 0;
  }
  {
    try {
      result = (unsigned int)(arg1)->AddRenderer(*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_Actor_GetRendererCount(void * jarg1) {
  unsigned int jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  unsigned int result;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::Actor const *)arg1)->GetRendererCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_GetRendererAt(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  unsigned int arg2 ;
  Dali::Renderer result;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (arg1)->GetRendererAt(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Renderer((const Dali::Renderer &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_RemoveRenderer__SWIG_0(void * jarg1, void * jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Renderer *arg2 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (Dali::Renderer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Renderer & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->RemoveRenderer(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_RemoveRenderer__SWIG_1(void * jarg1, unsigned int jarg2) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::Actor *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      (arg1)->RemoveRenderer(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_InterceptTouchSignal(void * jarg1) {
  void * jresult ;
  Dali::Actor arg1 ;
  Dali::Actor *argp1 = (Dali::Actor *) 0 ;
  Dali::Actor::TouchEventSignalType *result = 0 ;


  argp1 = (Dali::Actor *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = (Dali::Actor::TouchEventSignalType *) &Dali::DevelActor::InterceptTouchedSignal(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_TouchSignal(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Actor::TouchEventSignalType *result = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (Dali::Actor::TouchEventSignalType *) &(arg1)->TouchedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_HoveredSignal(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Actor::HoverSignalType *result = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (Dali::Actor::HoverSignalType *) &(arg1)->HoveredSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_WheelEventSignal(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Actor::WheelEventSignalType *result = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (Dali::Actor::WheelEventSignalType *) &(arg1)->WheelEventSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_OnSceneSignal(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Actor::OnSceneSignalType *result = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (Dali::Actor::OnSceneSignalType *) &(arg1)->OnSceneSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_OffSceneSignal(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Actor::OffSceneSignalType *result = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (Dali::Actor::OffSceneSignalType *) &(arg1)->OffSceneSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Actor_OnRelayoutSignal(void * jarg1) {
  void * jresult ;
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  Dali::Actor::OnRelayoutSignalType *result = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  {
    try {
      result = (Dali::Actor::OnRelayoutSignalType *) &(arg1)->OnRelayoutSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Actor_SetNeedGesturePropagation(void * jarg1, bool jarg2) {
  Dali::Actor arg1 ;
  bool arg2;
  Dali::Actor *argp1 = (Dali::Actor *) 0 ;


  argp1 = (Dali::Actor *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return;
  }
  arg1 = *argp1;
  arg2 = jarg2;
  {
    try {
      Dali::DevelActor::SetNeedGesturePropagation(arg1, arg2);
    } CALL_CATCH_EXCEPTION();
  }
  return;
}

SWIGEXPORT void SWIGSTDCALL CSharp_DevelActor_Property_SetTouchAreaOffset(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  arg1 = (Dali::Actor *)jarg1;
  Rect<int> arg2 = Rect(jarg2, jarg3, jarg4, jarg5);
  {
    try {
      (arg1)->SetProperty( Dali::DevelActor::Property::TOUCH_AREA_OFFSET, arg2 );
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_DevelActor_Property_GetTouchAreaOffset(void * jarg1, int* jarg2, int* jarg3, int* jarg4, int* jarg5) {
  Dali::Actor *arg1 = (Dali::Actor *) 0 ;
  arg1 = (Dali::Actor *)jarg1;

  Rect<int32_t> result;
  {
    try {
      result = (arg1)->GetProperty<Rect<int32_t>>( Dali::DevelActor::Property::TOUCH_AREA_OFFSET);
      *jarg2 = result.left;
      *jarg3 = result.right;
      *jarg4 = result.bottom;
      *jarg5 = result.top;
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_UnparentAndReset(void * jarg1) {
  Dali::Actor *arg1 = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor & type is null", 0);
    return ;
  }
  {
    try {
      Dali::UnparentAndReset(*arg1);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Layer_Property_CLIPPING_ENABLE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Layer::Property::CLIPPING_ENABLE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Layer_Property_CLIPPING_BOX_get() {
  int jresult ;
  int result;

  result = (int)Dali::Layer::Property::CLIPPING_BOX;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Layer_Property_BEHAVIOR_get() {
  int jresult ;
  int result;

  result = (int)Dali::Layer::Property::BEHAVIOR;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Layer_Property() {
  void * jresult ;
  Dali::Layer::Property *result = 0 ;

  {
    try {
      result = (Dali::Layer::Property *)new Dali::Layer::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Layer_Property(void * jarg1) {
  Dali::Layer::Property *arg1 = (Dali::Layer::Property *) 0 ;

  arg1 = (Dali::Layer::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Layer__SWIG_0() {
  void * jresult ;
  Dali::Layer *result = 0 ;

  {
    try {
      result = (Dali::Layer *)new Dali::Layer();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Layer_New() {
  void * jresult ;
  Dali::Layer result;

  {
    try {
      result = Dali::Layer::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Layer((const Dali::Layer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Layer_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Layer result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Layer::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Layer((const Dali::Layer &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Layer(void * jarg1) {
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;

  arg1 = (Dali::Layer *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Layer__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Layer *arg1 = 0 ;
  Dali::Layer *result = 0 ;

  arg1 = (Dali::Layer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Layer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Layer *)new Dali::Layer((Dali::Layer const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Layer_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  Dali::Layer *arg2 = 0 ;
  Dali::Layer *result = 0 ;

  arg1 = (Dali::Layer *)jarg1;
  arg2 = (Dali::Layer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Layer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Layer *) &(arg1)->operator =((Dali::Layer const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_Layer_GetDepth(void * jarg1) {
  unsigned int jresult ;
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  unsigned int result;

  arg1 = (Dali::Layer *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::Layer const *)arg1)->GetProperty< int >( Layer::Property::DEPTH );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Layer_Raise(void * jarg1) {
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;

  arg1 = (Dali::Layer *)jarg1;
  {
    try {
      (arg1)->Raise();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Layer_Lower(void * jarg1) {
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;

  arg1 = (Dali::Layer *)jarg1;
  {
    try {
      (arg1)->Lower();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Layer_RaiseAbove(void * jarg1, void * jarg2) {
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  Dali::Layer arg2 ;
  Dali::Layer *argp2 ;

  arg1 = (Dali::Layer *)jarg1;
  argp2 = (Dali::Layer *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Layer", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->RaiseAbove(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Layer_LowerBelow(void * jarg1, void * jarg2) {
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  Dali::Layer arg2 ;
  Dali::Layer *argp2 ;

  arg1 = (Dali::Layer *)jarg1;
  argp2 = (Dali::Layer *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Layer", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->LowerBelow(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Layer_RaiseToTop(void * jarg1) {
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;

  arg1 = (Dali::Layer *)jarg1;
  {
    try {
      (arg1)->RaiseToTop();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Layer_LowerToBottom(void * jarg1) {
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;

  arg1 = (Dali::Layer *)jarg1;
  {
    try {
      (arg1)->LowerToBottom();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Layer_MoveAbove(void * jarg1, void * jarg2) {
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  Dali::Layer arg2 ;
  Dali::Layer *argp2 ;

  arg1 = (Dali::Layer *)jarg1;
  argp2 = (Dali::Layer *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Layer", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->MoveAbove(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Layer_MoveBelow(void * jarg1, void * jarg2) {
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  Dali::Layer arg2 ;
  Dali::Layer *argp2 ;

  arg1 = (Dali::Layer *)jarg1;
  argp2 = (Dali::Layer *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Layer", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->MoveBelow(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Layer_SetBehavior(void * jarg1, int jarg2) {
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  Dali::Layer::Behavior arg2 ;

  arg1 = (Dali::Layer *)jarg1;
  arg2 = (Dali::Layer::Behavior)jarg2;
  {
    try {
      (arg1)->SetProperty( Layer::Property::BEHAVIOR, arg2 );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Layer_GetBehavior(void * jarg1) {
  int jresult ;
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  Dali::Layer::Behavior result;

  arg1 = (Dali::Layer *)jarg1;
  {
    try {
      result = (Dali::Layer::Behavior)((Dali::Layer const *)arg1)->GetProperty<Dali::Layer::Behavior>( Dali::Layer::Property::BEHAVIOR );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Layer_SetClipping(void * jarg1, bool jarg2) {
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Layer *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetProperty( Dali::Layer::Property::CLIPPING_ENABLE, arg2 );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Layer_IsClipping(void * jarg1) {
  bool jresult ;
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  bool result;

  arg1 = (Dali::Layer *)jarg1;
  {
    try {
      result = (bool)((Dali::Layer const *)arg1)->GetProperty< bool >( Dali::Layer::Property::CLIPPING_ENABLE );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Layer_SetClippingBox__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;

  arg1 = (Dali::Layer *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  arg5 = (int)jarg5;
  {
    try {
      (arg1)->SetProperty( Dali::Layer::Property::CLIPPING_BOX, Rect<int32_t>( arg2,arg3,arg4,arg5 ) );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Layer_SetClippingBox__SWIG_1(void * jarg1, void * jarg2) {
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  Dali::ClippingBox arg2 ;
  Dali::ClippingBox *argp2 ;

  arg1 = (Dali::Layer *)jarg1;
  argp2 = (Dali::ClippingBox *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ClippingBox", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetProperty( Dali::Layer::Property::CLIPPING_BOX, arg2 );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Layer_GetClippingBox(void * jarg1) {
  void * jresult ;
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  Dali::ClippingBox result;

  arg1 = (Dali::Layer *)jarg1;
  {
    try {
      result = ((Dali::Layer const *)arg1)->GetProperty< Rect<int32_t> >( Layer::Property::CLIPPING_BOX );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::ClippingBox((const Dali::ClippingBox &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Layer_SetDepthTestDisabled(void * jarg1, bool jarg2) {
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Layer *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetProperty( Layer::Property::DEPTH_TEST, !arg2 );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Layer_IsDepthTestDisabled(void * jarg1) {
  bool jresult ;
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  bool result;

  arg1 = (Dali::Layer *)jarg1;
  {
    try {
      result = !(bool)((Dali::Layer const *)arg1)->GetProperty< bool >( Layer::Property::DEPTH_TEST );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Layer_SetSortFunction(void * jarg1, void * jarg2) {
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  Dali::Layer::SortFunctionType arg2 = (Dali::Layer::SortFunctionType) 0 ;

  arg1 = (Dali::Layer *)jarg1;
  arg2 = (Dali::Layer::SortFunctionType)jarg2;
  {
    try {
      (arg1)->SetSortFunction(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Layer_SetTouchConsumed(void * jarg1, bool jarg2) {
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Layer *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetProperty( Layer::Property::CONSUMES_TOUCH, arg2 );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Layer_IsTouchConsumed(void * jarg1) {
  bool jresult ;
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  bool result;

  arg1 = (Dali::Layer *)jarg1;
  {
    try {
      result = (bool)((Dali::Layer const *)arg1)->GetProperty< bool >( Layer::Property::CONSUMES_TOUCH );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Layer_SetHoverConsumed(void * jarg1, bool jarg2) {
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Layer *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetProperty( Layer::Property::CONSUMES_HOVER, arg2 );
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Layer_IsHoverConsumed(void * jarg1) {
  bool jresult ;
  Dali::Layer *arg1 = (Dali::Layer *) 0 ;
  bool result;

  arg1 = (Dali::Layer *)jarg1;
  {
    try {
      result = (bool)((Dali::Layer const *)arg1)->GetProperty< bool >( Layer::Property::CONSUMES_HOVER );
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Stage_GetCurrent() {
  void * jresult ;
  Dali::Stage result;

  {
    try {
      result = Dali::Stage::GetCurrent();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Stage((const Dali::Stage &)result);
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Stage_IsInstalled() {
  bool jresult ;
  bool result;

  {
    try {
      result = (bool)Dali::Stage::IsInstalled();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Stage_GetRenderTaskList(void * jarg1) {
  void * jresult ;
  Dali::Stage *arg1 = (Dali::Stage *) 0 ;
  Dali::RenderTaskList result;

  arg1 = (Dali::Stage *)jarg1;
  {
    try {
      result = ((Dali::Stage const *)arg1)->GetRenderTaskList();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::RenderTaskList((const Dali::RenderTaskList &)result);
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Stage_GetDpi(void * jarg1) {
  void * jresult ;
  Dali::Stage *arg1 = (Dali::Stage *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::Stage *)jarg1;
  {
    try {
      result = ((Dali::Stage const *)arg1)->GetDpi();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Stage_KeepRendering(void * jarg1, float jarg2) {
  Dali::Stage *arg1 = (Dali::Stage *) 0 ;
  float arg2 ;

  arg1 = (Dali::Stage *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->KeepRendering(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Stage_KeyEventSignal(void * jarg1) {
  void * jresult ;
  Dali::Stage *arg1 = (Dali::Stage *) 0 ;
  Dali::Stage::KeyEventSignalType *result = 0 ;

  arg1 = (Dali::Stage *)jarg1;
  {
    try {
      result = (Dali::Stage::KeyEventSignalType *) &(arg1)->KeyEventSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Stage_EventProcessingFinishedSignal(void * jarg1) {
  void * jresult ;
  Dali::Stage *arg1 = (Dali::Stage *) 0 ;
  Dali::Stage::EventProcessingFinishedSignalType *result = 0 ;

  arg1 = (Dali::Stage *)jarg1;
  {
    try {
      result = (Dali::Stage::EventProcessingFinishedSignalType *) &(arg1)->EventProcessingFinishedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Stage_TouchSignal(void * jarg1) {
  void * jresult ;
  Dali::Stage *arg1 = (Dali::Stage *) 0 ;
  Dali::Stage::TouchEventSignalType *result = 0 ;

  arg1 = (Dali::Stage *)jarg1;
  {
    try {
      result = (Dali::Stage::TouchEventSignalType *) &(arg1)->TouchedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Stage_WheelEventSignal(void * jarg1) {
  void * jresult ;
  Dali::Stage *arg1 = (Dali::Stage *) 0 ;
  Dali::Stage::WheelEventSignalType *result = 0 ;

  arg1 = (Dali::Stage *)jarg1;
  {
    try {
      result = (Dali::Stage::WheelEventSignalType *) &(arg1)->WheelEventSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Stage_ContextLostSignal(void * jarg1) {
  void * jresult ;
  Dali::Stage *arg1 = (Dali::Stage *) 0 ;
  Dali::Stage::ContextStatusSignal *result = 0 ;

  arg1 = (Dali::Stage *)jarg1;
  {
    try {
      result = (Dali::Stage::ContextStatusSignal *) &(arg1)->ContextLostSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Stage_ContextRegainedSignal(void * jarg1) {
  void * jresult ;
  Dali::Stage *arg1 = (Dali::Stage *) 0 ;
  Dali::Stage::ContextStatusSignal *result = 0 ;

  arg1 = (Dali::Stage *)jarg1;
  {
    try {
      result = (Dali::Stage::ContextStatusSignal *) &(arg1)->ContextRegainedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Stage_SceneCreatedSignal(void * jarg1) {
  void * jresult ;
  Dali::Stage *arg1 = (Dali::Stage *) 0 ;
  Dali::Stage::SceneCreatedSignalType *result = 0 ;

  arg1 = (Dali::Stage *)jarg1;
  {
    try {
      result = (Dali::Stage::SceneCreatedSignalType *) &(arg1)->SceneCreatedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Stage_SetRenderingBehavior(void * jarg1, int jarg2) {
  Dali::Stage *arg1 = (Dali::Stage *) 0 ;
  Dali::DevelStage::Rendering arg2 ;

  arg1 = (Dali::Stage *)jarg1;
  arg2 = (Dali::DevelStage::Rendering)jarg2;
  {
    try {
      DevelStage::SetRenderingBehavior(*arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Stage_GetRenderingBehavior(void * jarg1) {

  int jresult ;
  int result ;
  Dali::Stage *arg1 = (Dali::Stage *) 0 ;

  arg1 = (Dali::Stage *)jarg1;
  {
    try {
      result = (int)(DevelStage::GetRenderingBehavior(*arg1));
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_RelayoutContainer(void * jarg1) {
  Dali::RelayoutContainer *arg1 = (Dali::RelayoutContainer *) 0 ;

  arg1 = (Dali::RelayoutContainer *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RelayoutContainer_Add(void * jarg1, void * jarg2, void * jarg3) {
  Dali::RelayoutContainer *arg1 = (Dali::RelayoutContainer *) 0 ;
  Dali::Actor *arg2 = 0 ;
  Dali::Vector2 *arg3 = 0 ;

  arg1 = (Dali::RelayoutContainer *)jarg1;
  arg2 = (Dali::Actor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor const & type is null", 0);
    return ;
  }
  arg3 = (Dali::Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Add((Dali::Actor const &)*arg2,(Dali::Vector2 const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CustomActorImpl_Self(void * jarg1) {
  void * jresult ;
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  Dali::CustomActor result;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  {
    try {
      result = ((Dali::CustomActorImpl const *)arg1)->Self();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::CustomActor((const Dali::CustomActor &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CustomActorImpl_OnSceneConnection(void * jarg1, int jarg2) {
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  int arg2 ;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      (arg1)->OnSceneConnection(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CustomActorImpl_OnSceneDisconnection(void * jarg1) {
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  {
    try {
      (arg1)->OnSceneDisconnection();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CustomActorImpl_OnChildAdd(void * jarg1, void * jarg2) {
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  Dali::Actor *arg2 = 0 ;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  arg2 = (Dali::Actor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->OnChildAdd(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CustomActorImpl_OnChildRemove(void * jarg1, void * jarg2) {
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  Dali::Actor *arg2 = 0 ;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  arg2 = (Dali::Actor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->OnChildRemove(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CustomActorImpl_OnPropertySet(void * jarg1, int jarg2, void * jarg3) {
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  Dali::Property::Index arg2 ;
  Dali::Property::Value arg3 ;
  Dali::Property::Value *argp3 ;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  argp3 = (Dali::Property::Value *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Property::Value", 0);
    return ;
  }
  arg3 = *argp3;
  {
    try {
      (arg1)->OnPropertySet(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CustomActorImpl_OnSizeSet(void * jarg1, void * jarg2) {
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->OnSizeSet((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CustomActorImpl_OnSizeAnimation(void * jarg1, void * jarg2, void * jarg3) {
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  Dali::Animation *arg2 = 0 ;
  Dali::Vector3 *arg3 = 0 ;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  arg2 = (Dali::Animation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Animation & type is null", 0);
    return ;
  }
  arg3 = (Dali::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->OnSizeAnimation(*arg2,(Dali::Vector3 const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CustomActorImpl_OnRelayout(void * jarg1, void * jarg2, void * jarg3) {
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::RelayoutContainer *arg3 = 0 ;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  arg3 = (Dali::RelayoutContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::RelayoutContainer & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->OnRelayout((Dali::Vector2 const &)*arg2,*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CustomActorImpl_OnSetResizePolicy(void * jarg1, int jarg2, int jarg3) {
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  Dali::ResizePolicy::Type arg2 ;
  Dali::Dimension::Type arg3 ;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  arg2 = (Dali::ResizePolicy::Type)jarg2;
  arg3 = (Dali::Dimension::Type)jarg3;
  {
    try {
      (arg1)->OnSetResizePolicy(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CustomActorImpl_GetNaturalSize(void * jarg1) {
  void * jresult ;
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  {
    try {
      result = (arg1)->GetNaturalSize();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_CustomActorImpl_CalculateChildSize(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  Dali::Actor *arg2 = 0 ;
  Dali::Dimension::Type arg3 ;
  float result;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  arg2 = (Dali::Actor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor const & type is null", 0);
    return 0;
  }
  arg3 = (Dali::Dimension::Type)jarg3;
  {
    try {
      result = (float)(arg1)->CalculateChildSize((Dali::Actor const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_CustomActorImpl_GetHeightForWidth(void * jarg1, float jarg2) {
  float jresult ;
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  float arg2 ;
  float result;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (float)(arg1)->GetHeightForWidth(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_CustomActorImpl_GetWidthForHeight(void * jarg1, float jarg2) {
  float jresult ;
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  float arg2 ;
  float result;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (float)(arg1)->GetWidthForHeight(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_CustomActorImpl_RelayoutDependentOnChildren__SWIG_0(void * jarg1, int jarg2) {
  bool jresult ;
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  Dali::Dimension::Type arg2 ;
  bool result;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  arg2 = (Dali::Dimension::Type)jarg2;
  {
    try {
      result = (bool)(arg1)->RelayoutDependentOnChildren(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_CustomActorImpl_RelayoutDependentOnChildren__SWIG_1(void * jarg1) {
  bool jresult ;
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  bool result;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  {
    try {
      result = (bool)(arg1)->RelayoutDependentOnChildren();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CustomActorImpl_OnCalculateRelayoutSize(void * jarg1, int jarg2) {
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  Dali::Dimension::Type arg2 ;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  arg2 = (Dali::Dimension::Type)jarg2;
  {
    try {
      (arg1)->OnCalculateRelayoutSize(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CustomActorImpl_OnLayoutNegotiated(void * jarg1, float jarg2, int jarg3) {
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  float arg2 ;
  Dali::Dimension::Type arg3 ;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (Dali::Dimension::Type)jarg3;
  {
    try {
      (arg1)->OnLayoutNegotiated(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_CustomActorImpl_IsRelayoutEnabled(void * jarg1) {
  bool jresult ;
  Dali::CustomActorImpl *arg1 = (Dali::CustomActorImpl *) 0 ;
  bool result;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  {
    try {
      result = (bool)((Dali::CustomActorImpl const *)arg1)->IsRelayoutEnabled();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_CustomActor__SWIG_0() {
  void * jresult ;
  Dali::CustomActor *result = 0 ;

  {
    try {
      result = (Dali::CustomActor *)new Dali::CustomActor();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CustomActor_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::CustomActor result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::CustomActor::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::CustomActor((const Dali::CustomActor &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_CustomActor(void * jarg1) {
  Dali::CustomActor *arg1 = (Dali::CustomActor *) 0 ;

  arg1 = (Dali::CustomActor *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CustomActor_GetImplementation(void * jarg1) {
  void * jresult ;
  Dali::CustomActor *arg1 = (Dali::CustomActor *) 0 ;
  Dali::CustomActorImpl *result = 0 ;

  arg1 = (Dali::CustomActor *)jarg1;
  {
    try {
      result = (Dali::CustomActorImpl *) &((Dali::CustomActor const *)arg1)->GetImplementation();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_CustomActor__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::CustomActorImpl *arg1 = 0 ;
  Dali::CustomActor *result = 0 ;

  arg1 = (Dali::CustomActorImpl *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::CustomActorImpl & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::CustomActor *)new Dali::CustomActor(*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_CustomActor__SWIG_2(void * jarg1) {
  void * jresult ;
  Dali::CustomActor *arg1 = 0 ;
  Dali::CustomActor *result = 0 ;

  arg1 = (Dali::CustomActor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::CustomActor const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::CustomActor *)new Dali::CustomActor((Dali::CustomActor const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CustomActor_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::CustomActor *arg1 = (Dali::CustomActor *) 0 ;
  Dali::CustomActor *arg2 = 0 ;
  Dali::CustomActor *result = 0 ;

  arg1 = (Dali::CustomActor *)jarg1;
  arg2 = (Dali::CustomActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::CustomActor const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::CustomActor *) &(arg1)->operator =((Dali::CustomActor const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PanGestureDetector_Property_SCREEN_POSITION_get() {
  int jresult ;
  int result;

  result = (int)Dali::PanGestureDetector::Property::SCREEN_POSITION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PanGestureDetector_Property_SCREEN_DISPLACEMENT_get() {
  int jresult ;
  int result;

  result = (int)Dali::PanGestureDetector::Property::SCREEN_DISPLACEMENT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PanGestureDetector_Property_SCREEN_VELOCITY_get() {
  int jresult ;
  int result;

  result = (int)Dali::PanGestureDetector::Property::SCREEN_VELOCITY;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PanGestureDetector_Property_LOCAL_POSITION_get() {
  int jresult ;
  int result;

  result = (int)Dali::PanGestureDetector::Property::LOCAL_POSITION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PanGestureDetector_Property_LOCAL_DISPLACEMENT_get() {
  int jresult ;
  int result;

  result = (int)Dali::PanGestureDetector::Property::LOCAL_DISPLACEMENT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PanGestureDetector_Property_LOCAL_VELOCITY_get() {
  int jresult ;
  int result;

  result = (int)Dali::PanGestureDetector::Property::LOCAL_VELOCITY;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PanGestureDetector_Property_PANNING_get() {
  int jresult ;
  int result;

  result = (int)Dali::PanGestureDetector::Property::PANNING;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PanGestureDetector_Property() {
  void * jresult ;
  Dali::PanGestureDetector::Property *result = 0 ;

  {
    try {
      result = (Dali::PanGestureDetector::Property *)new Dali::PanGestureDetector::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PanGestureDetector_Property(void * jarg1) {
  Dali::PanGestureDetector::Property *arg1 = (Dali::PanGestureDetector::Property *) 0 ;

  arg1 = (Dali::PanGestureDetector::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGestureDetector_DIRECTION_LEFT_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::PanGestureDetector::DIRECTION_LEFT;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGestureDetector_DIRECTION_RIGHT_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::PanGestureDetector::DIRECTION_RIGHT;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGestureDetector_DIRECTION_UP_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::PanGestureDetector::DIRECTION_UP;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGestureDetector_DIRECTION_DOWN_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::PanGestureDetector::DIRECTION_DOWN;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGestureDetector_DIRECTION_HORIZONTAL_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::PanGestureDetector::DIRECTION_HORIZONTAL;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGestureDetector_DIRECTION_VERTICAL_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::PanGestureDetector::DIRECTION_VERTICAL;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGestureDetector_DEFAULT_THRESHOLD_get() {
  void * jresult ;
  Dali::Radian *result = 0 ;

  result = (Dali::Radian *)&Dali::PanGestureDetector::DEFAULT_THRESHOLD;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PanGestureDetector__SWIG_0() {
  void * jresult ;
  Dali::PanGestureDetector *result = 0 ;

  {
    try {
      result = (Dali::PanGestureDetector *)new Dali::PanGestureDetector();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGestureDetector_New() {
  void * jresult ;
  Dali::PanGestureDetector result;

  {
    try {
      result = Dali::PanGestureDetector::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PanGestureDetector((const Dali::PanGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGestureDetector_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::PanGestureDetector result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::PanGestureDetector::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PanGestureDetector((const Dali::PanGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PanGestureDetector(void * jarg1) {
  Dali::PanGestureDetector *arg1 = (Dali::PanGestureDetector *) 0 ;

  arg1 = (Dali::PanGestureDetector *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PanGestureDetector__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::PanGestureDetector *arg1 = 0 ;
  Dali::PanGestureDetector *result = 0 ;

  arg1 = (Dali::PanGestureDetector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PanGestureDetector const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::PanGestureDetector *)new Dali::PanGestureDetector((Dali::PanGestureDetector const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGestureDetector_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::PanGestureDetector *arg1 = (Dali::PanGestureDetector *) 0 ;
  Dali::PanGestureDetector *arg2 = 0 ;
  Dali::PanGestureDetector *result = 0 ;

  arg1 = (Dali::PanGestureDetector *)jarg1;
  arg2 = (Dali::PanGestureDetector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PanGestureDetector const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::PanGestureDetector *) &(arg1)->operator =((Dali::PanGestureDetector const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PanGestureDetector_SetMinimumTouchesRequired(void * jarg1, unsigned int jarg2) {
  Dali::PanGestureDetector *arg1 = (Dali::PanGestureDetector *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::PanGestureDetector *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      (arg1)->SetMinimumTouchesRequired(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PanGestureDetector_SetMaximumTouchesRequired(void * jarg1, unsigned int jarg2) {
  Dali::PanGestureDetector *arg1 = (Dali::PanGestureDetector *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::PanGestureDetector *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      (arg1)->SetMaximumTouchesRequired(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_PanGestureDetector_GetMinimumTouchesRequired(void * jarg1) {
  unsigned int jresult ;
  Dali::PanGestureDetector *arg1 = (Dali::PanGestureDetector *) 0 ;
  unsigned int result;

  arg1 = (Dali::PanGestureDetector *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::PanGestureDetector const *)arg1)->GetMinimumTouchesRequired();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_PanGestureDetector_GetMaximumTouchesRequired(void * jarg1) {
  unsigned int jresult ;
  Dali::PanGestureDetector *arg1 = (Dali::PanGestureDetector *) 0 ;
  unsigned int result;

  arg1 = (Dali::PanGestureDetector *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::PanGestureDetector const *)arg1)->GetMaximumTouchesRequired();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PanGestureDetector_AddAngle__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Dali::PanGestureDetector *arg1 = (Dali::PanGestureDetector *) 0 ;
  Dali::Radian arg2 ;
  Dali::Radian arg3 ;
  Dali::Radian *argp2 ;
  Dali::Radian *argp3 ;

  arg1 = (Dali::PanGestureDetector *)jarg1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return ;
  }
  arg2 = *argp2;
  argp3 = (Dali::Radian *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return ;
  }
  arg3 = *argp3;
  {
    try {
      (arg1)->AddAngle(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PanGestureDetector_AddAngle__SWIG_1(void * jarg1, void * jarg2) {
  Dali::PanGestureDetector *arg1 = (Dali::PanGestureDetector *) 0 ;
  Dali::Radian arg2 ;
  Dali::Radian *argp2 ;

  arg1 = (Dali::PanGestureDetector *)jarg1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->AddAngle(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PanGestureDetector_AddDirection__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Dali::PanGestureDetector *arg1 = (Dali::PanGestureDetector *) 0 ;
  Dali::Radian arg2 ;
  Dali::Radian arg3 ;
  Dali::Radian *argp2 ;
  Dali::Radian *argp3 ;

  arg1 = (Dali::PanGestureDetector *)jarg1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return ;
  }
  arg2 = *argp2;
  argp3 = (Dali::Radian *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return ;
  }
  arg3 = *argp3;
  {
    try {
      (arg1)->AddDirection(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PanGestureDetector_AddDirection__SWIG_1(void * jarg1, void * jarg2) {
  Dali::PanGestureDetector *arg1 = (Dali::PanGestureDetector *) 0 ;
  Dali::Radian arg2 ;
  Dali::Radian *argp2 ;

  arg1 = (Dali::PanGestureDetector *)jarg1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->AddDirection(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_PanGestureDetector_GetAngleCount(void * jarg1) {
  unsigned long jresult ;
  Dali::PanGestureDetector *arg1 = (Dali::PanGestureDetector *) 0 ;
  size_t result;

  arg1 = (Dali::PanGestureDetector *)jarg1;
  {
    try {
      result = ((Dali::PanGestureDetector const *)arg1)->GetAngleCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGestureDetector_GetAngle(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::PanGestureDetector *arg1 = (Dali::PanGestureDetector *) 0 ;
  size_t arg2 ;
  Dali::PanGestureDetector::AngleThresholdPair result;

  arg1 = (Dali::PanGestureDetector *)jarg1;
  arg2 = (size_t)jarg2;
  {
    try {
      result = ((Dali::PanGestureDetector const *)arg1)->GetAngle(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PanGestureDetector::AngleThresholdPair((const Dali::PanGestureDetector::AngleThresholdPair &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PanGestureDetector_ClearAngles(void * jarg1) {
  Dali::PanGestureDetector *arg1 = (Dali::PanGestureDetector *) 0 ;

  arg1 = (Dali::PanGestureDetector *)jarg1;
  {
    try {
      (arg1)->ClearAngles();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PanGestureDetector_RemoveAngle(void * jarg1, void * jarg2) {
  Dali::PanGestureDetector *arg1 = (Dali::PanGestureDetector *) 0 ;
  Dali::Radian arg2 ;
  Dali::Radian *argp2 ;

  arg1 = (Dali::PanGestureDetector *)jarg1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->RemoveAngle(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PanGestureDetector_RemoveDirection(void * jarg1, void * jarg2) {
  Dali::PanGestureDetector *arg1 = (Dali::PanGestureDetector *) 0 ;
  Dali::Radian arg2 ;
  Dali::Radian *argp2 ;

  arg1 = (Dali::PanGestureDetector *)jarg1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->RemoveDirection(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGestureDetector_DetectedSignal(void * jarg1) {
  void * jresult ;
  Dali::PanGestureDetector *arg1 = (Dali::PanGestureDetector *) 0 ;
  Dali::PanGestureDetector::DetectedSignalType *result = 0 ;

  arg1 = (Dali::PanGestureDetector *)jarg1;
  {
    try {
      result = (Dali::PanGestureDetector::DetectedSignalType *) &(arg1)->DetectedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PanGestureDetector_SetPanGestureProperties(void * jarg1) {
  Dali::PanGesture *arg1 = 0 ;

  arg1 = (Dali::PanGesture *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PanGesture const & type is null", 0);
    return ;
  }
  {
    try {
      Dali::PanGestureDetector::SetPanGestureProperties((Dali::PanGesture const &)*arg1);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PanGesture__SWIG_0() {
  void * jresult ;
  Dali::PanGesture *result = 0 ;

  {
    try {
      result = (Dali::PanGesture *)new Dali::PanGesture();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGesture_New(int jarg1) {
  void * jresult ;
  Dali::GestureState arg1 ;
  Dali::PanGesture result;

  arg1 = (Dali::GestureState)jarg1;
  {
    try {
      result = DevelPanGesture::New(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PanGesture((const Dali::PanGesture &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PanGesture__SWIG_2(void * jarg1) {
  void * jresult ;
  Dali::PanGesture *arg1 = 0 ;
  Dali::PanGesture *result = 0 ;

  arg1 = (Dali::PanGesture *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PanGesture const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::PanGesture *)new Dali::PanGesture((Dali::PanGesture const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGesture_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::PanGesture *arg1 = (Dali::PanGesture *) 0 ;
  Dali::PanGesture *arg2 = 0 ;
  Dali::PanGesture *result = 0 ;

  arg1 = (Dali::PanGesture *)jarg1;
  arg2 = (Dali::PanGesture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PanGesture const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::PanGesture *) &(arg1)->operator =((Dali::PanGesture const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PanGesture(void * jarg1) {
  Dali::PanGesture *arg1 = (Dali::PanGesture *) 0 ;

  arg1 = (Dali::PanGesture *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGesture_velocity_get(void * jarg1) {
  void * jresult ;
  Dali::PanGesture *arg1 = (Dali::PanGesture *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::PanGesture *)jarg1;
  {
    try {
      result = ((Dali::PanGesture const *)arg1)->GetVelocity();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }
  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGesture_displacement_get(void * jarg1) {
  void * jresult ;
  Dali::PanGesture *arg1 = (Dali::PanGesture *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::PanGesture *)jarg1;
  {
    try {
      result = ((Dali::PanGesture const *)arg1)->GetDisplacement();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }
  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGesture_position_get(void * jarg1) {
  void * jresult ;
  Dali::PanGesture *arg1 = (Dali::PanGesture *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::PanGesture *)jarg1;
  {
    try {
      result = ((Dali::PanGesture const *)arg1)->GetPosition();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }
  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGesture_screenVelocity_get(void * jarg1) {
  void * jresult ;
  Dali::PanGesture *arg1 = (Dali::PanGesture *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::PanGesture *)jarg1;
  {
    try {
      result = ((Dali::PanGesture const *)arg1)->GetScreenVelocity();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }
  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGesture_screenDisplacement_get(void * jarg1) {
  void * jresult ;
  Dali::PanGesture *arg1 = (Dali::PanGesture *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::PanGesture *)jarg1;
  {
    try {
      result = ((Dali::PanGesture const *)arg1)->GetScreenDisplacement();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }
  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PanGesture_screenPosition_get(void * jarg1) {
  void * jresult ;
  Dali::PanGesture *arg1 = (Dali::PanGesture *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::PanGesture *)jarg1;
  {
    try {
      result = ((Dali::PanGesture const *)arg1)->GetScreenPosition();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }
  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_PanGesture_numberOfTouches_get(void * jarg1) {
  unsigned int jresult ;
  Dali::PanGesture *arg1 = (Dali::PanGesture *) 0 ;
  unsigned int result;

  arg1 = (Dali::PanGesture *)jarg1;
  result = (unsigned int) ((arg1)->GetNumberOfTouches());
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_PanGesture_GetSpeed(void * jarg1) {
  float jresult ;
  Dali::PanGesture *arg1 = (Dali::PanGesture *) 0 ;
  float result;

  arg1 = (Dali::PanGesture *)jarg1;
  {
    try {
      result = (float)((Dali::PanGesture const *)arg1)->GetSpeed();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_PanGesture_GetDistance(void * jarg1) {
  float jresult ;
  Dali::PanGesture *arg1 = (Dali::PanGesture *) 0 ;
  float result;

  arg1 = (Dali::PanGesture *)jarg1;
  {
    try {
      result = (float)((Dali::PanGesture const *)arg1)->GetDistance();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_PanGesture_GetScreenSpeed(void * jarg1) {
  float jresult ;
  Dali::PanGesture *arg1 = (Dali::PanGesture *) 0 ;
  float result;

  arg1 = (Dali::PanGesture *)jarg1;
  {
    try {
      result = (float)((Dali::PanGesture const *)arg1)->GetScreenSpeed();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_PanGesture_GetScreenDistance(void * jarg1) {
  float jresult ;
  Dali::PanGesture *arg1 = (Dali::PanGesture *) 0 ;
  float result;

  arg1 = (Dali::PanGesture *)jarg1;
  {
    try {
      result = (float)((Dali::PanGesture const *)arg1)->GetScreenDistance();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PinchGestureDetector__SWIG_0() {
  void * jresult ;
  Dali::PinchGestureDetector *result = 0 ;

  {
    try {
      result = (Dali::PinchGestureDetector *)new Dali::PinchGestureDetector();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PinchGestureDetector_New() {
  void * jresult ;
  Dali::PinchGestureDetector result;

  {
    try {
      result = Dali::PinchGestureDetector::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PinchGestureDetector((const Dali::PinchGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PinchGestureDetector_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::PinchGestureDetector result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::PinchGestureDetector::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PinchGestureDetector((const Dali::PinchGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PinchGestureDetector(void * jarg1) {
  Dali::PinchGestureDetector *arg1 = (Dali::PinchGestureDetector *) 0 ;

  arg1 = (Dali::PinchGestureDetector *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PinchGestureDetector__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::PinchGestureDetector *arg1 = 0 ;
  Dali::PinchGestureDetector *result = 0 ;

  arg1 = (Dali::PinchGestureDetector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PinchGestureDetector const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::PinchGestureDetector *)new Dali::PinchGestureDetector((Dali::PinchGestureDetector const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PinchGestureDetector_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::PinchGestureDetector *arg1 = (Dali::PinchGestureDetector *) 0 ;
  Dali::PinchGestureDetector *arg2 = 0 ;
  Dali::PinchGestureDetector *result = 0 ;

  arg1 = (Dali::PinchGestureDetector *)jarg1;
  arg2 = (Dali::PinchGestureDetector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PinchGestureDetector const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::PinchGestureDetector *) &(arg1)->operator =((Dali::PinchGestureDetector const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PinchGestureDetector_DetectedSignal(void * jarg1) {
  void * jresult ;
  Dali::PinchGestureDetector *arg1 = (Dali::PinchGestureDetector *) 0 ;
  Dali::PinchGestureDetector::DetectedSignalType *result = 0 ;

  arg1 = (Dali::PinchGestureDetector *)jarg1;
  {
    try {
      result = (Dali::PinchGestureDetector::DetectedSignalType *) &(arg1)->DetectedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PinchGesture__SWIG_0() {
  void * jresult ;
  Dali::PinchGesture *result = 0 ;

  {
    try {
      result = (Dali::PinchGesture *)new Dali::PinchGesture();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PinchGesture_New(int jarg1) {
  void * jresult ;
  Dali::GestureState arg1 ;
  Dali::PinchGesture result;

  arg1 = (Dali::GestureState)jarg1;
  {
    try {
      result = DevelPinchGesture::New(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PinchGesture((const Dali::PinchGesture &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PinchGesture__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::PinchGesture *arg1 = 0 ;
  Dali::PinchGesture *result = 0 ;

  arg1 = (Dali::PinchGesture *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PinchGesture const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::PinchGesture *)new Dali::PinchGesture((Dali::PinchGesture const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PinchGesture_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::PinchGesture *arg1 = (Dali::PinchGesture *) 0 ;
  Dali::PinchGesture *arg2 = 0 ;
  Dali::PinchGesture *result = 0 ;

  arg1 = (Dali::PinchGesture *)jarg1;
  arg2 = (Dali::PinchGesture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PinchGesture const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::PinchGesture *) &(arg1)->operator =((Dali::PinchGesture const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PinchGesture(void * jarg1) {
  Dali::PinchGesture *arg1 = (Dali::PinchGesture *) 0 ;

  arg1 = (Dali::PinchGesture *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_PinchGesture_scale_get(void * jarg1) {
  float jresult ;
  Dali::PinchGesture *arg1 = (Dali::PinchGesture *) 0 ;
  float result;

  arg1 = (Dali::PinchGesture *)jarg1;
  result = (float) ((arg1)->GetScale());
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_PinchGesture_speed_get(void * jarg1) {
  float jresult ;
  Dali::PinchGesture *arg1 = (Dali::PinchGesture *) 0 ;
  float result;

  arg1 = (Dali::PinchGesture *)jarg1;
  result = (float) ((arg1)->GetSpeed());
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PinchGesture_screenCenterPoint_get(void * jarg1) {
  void * jresult ;
  Dali::PinchGesture *arg1 = (Dali::PinchGesture *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::PinchGesture *)jarg1;
  {
    try {
      result = ((Dali::PinchGesture const *)arg1)->GetScreenCenterPoint();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }
  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PinchGesture_localCenterPoint_get(void * jarg1) {
  void * jresult ;
  Dali::PinchGesture *arg1 = (Dali::PinchGesture *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::PinchGesture *)jarg1;
  {
    try {
      result = ((Dali::PinchGesture const *)arg1)->GetLocalCenterPoint();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }
  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TapGestureDetector__SWIG_0() {
  void * jresult ;
  Dali::TapGestureDetector *result = 0 ;

  {
    try {
      result = (Dali::TapGestureDetector *)new Dali::TapGestureDetector();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TapGestureDetector_New__SWIG_0() {
  void * jresult ;
  Dali::TapGestureDetector result;

  {
    try {
      result = Dali::TapGestureDetector::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::TapGestureDetector((const Dali::TapGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TapGestureDetector_New__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  Dali::TapGestureDetector result;

  arg1 = (unsigned int)jarg1;
  {
    try {
      result = Dali::TapGestureDetector::New(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::TapGestureDetector((const Dali::TapGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TapGestureDetector_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::TapGestureDetector result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::TapGestureDetector::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::TapGestureDetector((const Dali::TapGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TapGestureDetector(void * jarg1) {
  Dali::TapGestureDetector *arg1 = (Dali::TapGestureDetector *) 0 ;

  arg1 = (Dali::TapGestureDetector *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TapGestureDetector__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::TapGestureDetector *arg1 = 0 ;
  Dali::TapGestureDetector *result = 0 ;

  arg1 = (Dali::TapGestureDetector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TapGestureDetector const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::TapGestureDetector *)new Dali::TapGestureDetector((Dali::TapGestureDetector const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TapGestureDetector_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::TapGestureDetector *arg1 = (Dali::TapGestureDetector *) 0 ;
  Dali::TapGestureDetector *arg2 = 0 ;
  Dali::TapGestureDetector *result = 0 ;

  arg1 = (Dali::TapGestureDetector *)jarg1;
  arg2 = (Dali::TapGestureDetector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TapGestureDetector const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::TapGestureDetector *) &(arg1)->operator =((Dali::TapGestureDetector const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TapGestureDetector_SetMinimumTapsRequired(void * jarg1, unsigned int jarg2) {
  Dali::TapGestureDetector *arg1 = (Dali::TapGestureDetector *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::TapGestureDetector *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      (arg1)->SetMinimumTapsRequired(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TapGestureDetector_SetMaximumTapsRequired(void * jarg1, unsigned int jarg2) {
  Dali::TapGestureDetector *arg1 = (Dali::TapGestureDetector *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::TapGestureDetector *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      (arg1)->SetMaximumTapsRequired(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_TapGestureDetector_GetMinimumTapsRequired(void * jarg1) {
  unsigned int jresult ;
  Dali::TapGestureDetector *arg1 = (Dali::TapGestureDetector *) 0 ;
  unsigned int result;

  arg1 = (Dali::TapGestureDetector *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::TapGestureDetector const *)arg1)->GetMinimumTapsRequired();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_TapGestureDetector_GetMaximumTapsRequired(void * jarg1) {
  unsigned int jresult ;
  Dali::TapGestureDetector *arg1 = (Dali::TapGestureDetector *) 0 ;
  unsigned int result;

  arg1 = (Dali::TapGestureDetector *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::TapGestureDetector const *)arg1)->GetMaximumTapsRequired();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TapGestureDetector_DetectedSignal(void * jarg1) {
  void * jresult ;
  Dali::TapGestureDetector *arg1 = (Dali::TapGestureDetector *) 0 ;
  Dali::TapGestureDetector::DetectedSignalType *result = 0 ;

  arg1 = (Dali::TapGestureDetector *)jarg1;
  {
    try {
      result = (Dali::TapGestureDetector::DetectedSignalType *) &(arg1)->DetectedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TapGesture__SWIG_0() {
  void * jresult ;
  Dali::TapGesture *result = 0 ;

  {
    try {
      result = (Dali::TapGesture *)new Dali::TapGesture();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TapGesture_New(int jarg1) {
  void * jresult ;
  Dali::GestureState arg1 ;
  Dali::TapGesture result;

  arg1 = (Dali::GestureState)jarg1;
  {
    try {
      result = DevelTapGesture::New(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::TapGesture((const Dali::TapGesture &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TapGesture__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::TapGesture *arg1 = 0 ;
  Dali::TapGesture *result = 0 ;

  arg1 = (Dali::TapGesture *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TapGesture const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::TapGesture *)new Dali::TapGesture((Dali::TapGesture const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TapGesture_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::TapGesture *arg1 = (Dali::TapGesture *) 0 ;
  Dali::TapGesture *arg2 = 0 ;
  Dali::TapGesture *result = 0 ;

  arg1 = (Dali::TapGesture *)jarg1;
  arg2 = (Dali::TapGesture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TapGesture const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::TapGesture *) &(arg1)->operator =((Dali::TapGesture const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TapGesture(void * jarg1) {
  Dali::TapGesture *arg1 = (Dali::TapGesture *) 0 ;

  arg1 = (Dali::TapGesture *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_TapGesture_numberOfTaps_get(void * jarg1) {
  unsigned int jresult ;
  Dali::TapGesture *arg1 = (Dali::TapGesture *) 0 ;
  unsigned int result;

  arg1 = (Dali::TapGesture *)jarg1;
  result = (unsigned int) ((arg1)->GetNumberOfTaps());
  jresult = result;
  return jresult;
}

SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_TapGesture_numberOfTouches_get(void * jarg1) {
  unsigned int jresult ;
  Dali::TapGesture *arg1 = (Dali::TapGesture *) 0 ;
  unsigned int result;

  arg1 = (Dali::TapGesture *)jarg1;
  result = (unsigned int) ((arg1)->GetNumberOfTouches());
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TapGesture_screenPoint_get(void * jarg1) {
  void * jresult ;
  Dali::TapGesture *arg1 = (Dali::TapGesture *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::TapGesture *)jarg1;
  {
    try {
      result = ((Dali::TapGesture const *)arg1)->GetScreenPoint();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }
  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TapGesture_localPoint_get(void * jarg1) {
  void * jresult ;
  Dali::TapGesture *arg1 = (Dali::TapGesture *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::TapGesture *)jarg1;
  {
    try {
      result = ((Dali::TapGesture const *)arg1)->GetLocalPoint();
    } catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    } catch (std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    } catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    } catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }
  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TapGesture_sourceType_get(void * jarg1) {
  int jresult ;
  Dali::TapGesture *arg1 = (Dali::TapGesture *) 0 ;
  Dali::GestureSourceType result;

  arg1 = (Dali::TapGesture *)jarg1;
  {
    try {
      result = ((Dali::TapGesture const *)arg1)->GetSourceType();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = static_cast< int >(result);
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_AlphaFunction__SWIG_0() {
  void * jresult ;
  Dali::AlphaFunction *result = 0 ;

  {
    try {
      result = (Dali::AlphaFunction *)new Dali::AlphaFunction();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_AlphaFunction__SWIG_1(int jarg1) {
  void * jresult ;
  Dali::AlphaFunction::BuiltinFunction arg1 ;
  Dali::AlphaFunction *result = 0 ;

  arg1 = (Dali::AlphaFunction::BuiltinFunction)jarg1;
  {
    try {
      result = (Dali::AlphaFunction *)new Dali::AlphaFunction(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_AlphaFunction__SWIG_2(void * jarg1) {
  void * jresult ;
  Dali::AlphaFunctionPrototype arg1 = (Dali::AlphaFunctionPrototype) 0 ;
  Dali::AlphaFunction *result = 0 ;

  arg1 = (Dali::AlphaFunctionPrototype)jarg1;
  {
    try {
      result = (Dali::AlphaFunction *)new Dali::AlphaFunction(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_AlphaFunction__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector2 *arg1 = 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::AlphaFunction *result = 0 ;

  arg1 = (Dali::Vector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::AlphaFunction *)new Dali::AlphaFunction((Dali::Vector2 const &)*arg1,(Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AlphaFunction_GetBezierControlPoints(void * jarg1) {
  void * jresult ;
  Dali::AlphaFunction *arg1 = (Dali::AlphaFunction *) 0 ;
  Dali::Vector4 result;

  arg1 = (Dali::AlphaFunction *)jarg1;
  {
    try {
      result = ((Dali::AlphaFunction const *)arg1)->GetBezierControlPoints();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AlphaFunction_GetCustomFunction(void * jarg1) {
  void * jresult ;
  Dali::AlphaFunction *arg1 = (Dali::AlphaFunction *) 0 ;
  Dali::AlphaFunctionPrototype result;

  arg1 = (Dali::AlphaFunction *)jarg1;
  {
    try {
      result = (Dali::AlphaFunctionPrototype)((Dali::AlphaFunction const *)arg1)->GetCustomFunction();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_AlphaFunction_GetBuiltinFunction(void * jarg1) {
  int jresult ;
  Dali::AlphaFunction *arg1 = (Dali::AlphaFunction *) 0 ;
  Dali::AlphaFunction::BuiltinFunction result;

  arg1 = (Dali::AlphaFunction *)jarg1;
  {
    try {
      result = (Dali::AlphaFunction::BuiltinFunction)((Dali::AlphaFunction const *)arg1)->GetBuiltinFunction();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_AlphaFunction_GetMode(void * jarg1) {
  int jresult ;
  Dali::AlphaFunction *arg1 = (Dali::AlphaFunction *) 0 ;
  Dali::AlphaFunction::Mode result;

  arg1 = (Dali::AlphaFunction *)jarg1;
  {
    try {
      result = (Dali::AlphaFunction::Mode)((Dali::AlphaFunction const *)arg1)->GetMode();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_AlphaFunction(void * jarg1) {
  Dali::AlphaFunction *arg1 = (Dali::AlphaFunction *) 0 ;

  arg1 = (Dali::AlphaFunction *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_KeyFrames_New() {
  void * jresult ;
  Dali::KeyFrames result;

  {
    try {
      result = Dali::KeyFrames::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::KeyFrames((const Dali::KeyFrames &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_KeyFrames_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::KeyFrames result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::KeyFrames::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::KeyFrames((const Dali::KeyFrames &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_KeyFrames__SWIG_0() {
  void * jresult ;
  Dali::KeyFrames *result = 0 ;

  {
    try {
      result = (Dali::KeyFrames *)new Dali::KeyFrames();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_KeyFrames(void * jarg1) {
  Dali::KeyFrames *arg1 = (Dali::KeyFrames *) 0 ;

  arg1 = (Dali::KeyFrames *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_KeyFrames__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::KeyFrames *arg1 = 0 ;
  Dali::KeyFrames *result = 0 ;

  arg1 = (Dali::KeyFrames *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::KeyFrames const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::KeyFrames *)new Dali::KeyFrames((Dali::KeyFrames const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_KeyFrames_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::KeyFrames *arg1 = (Dali::KeyFrames *) 0 ;
  Dali::KeyFrames *arg2 = 0 ;
  Dali::KeyFrames *result = 0 ;

  arg1 = (Dali::KeyFrames *)jarg1;
  arg2 = (Dali::KeyFrames *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::KeyFrames const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::KeyFrames *) &(arg1)->operator =((Dali::KeyFrames const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_KeyFrames_GetType(void * jarg1) {
  int jresult ;
  Dali::KeyFrames *arg1 = (Dali::KeyFrames *) 0 ;
  Dali::Property::Type result;

  arg1 = (Dali::KeyFrames *)jarg1;
  {
    try {
      result = (Dali::Property::Type)((Dali::KeyFrames const *)arg1)->GetType();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_KeyFrames_Add__SWIG_0(void * jarg1, float jarg2, void * jarg3) {
  Dali::KeyFrames *arg1 = (Dali::KeyFrames *) 0 ;
  float arg2 ;
  Dali::Property::Value arg3 ;
  Dali::Property::Value *argp3 ;

  arg1 = (Dali::KeyFrames *)jarg1;
  arg2 = (float)jarg2;
  argp3 = (Dali::Property::Value *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Property::Value", 0);
    return ;
  }
  arg3 = *argp3;
  {
    try {
      (arg1)->Add(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_KeyFrames_Add__SWIG_1(void * jarg1, float jarg2, void * jarg3, void * jarg4) {
  Dali::KeyFrames *arg1 = (Dali::KeyFrames *) 0 ;
  float arg2 ;
  Dali::Property::Value arg3 ;
  Dali::AlphaFunction arg4 ;
  Dali::Property::Value *argp3 ;
  Dali::AlphaFunction *argp4 ;

  arg1 = (Dali::KeyFrames *)jarg1;
  arg2 = (float)jarg2;
  argp3 = (Dali::Property::Value *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Property::Value", 0);
    return ;
  }
  arg3 = *argp3;
  argp4 = (Dali::AlphaFunction *)jarg4;
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::AlphaFunction", 0);
    return ;
  }
  arg4 = *argp4;
  {
    try {
      (arg1)->Add(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION();
  }

}

SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_KeyFrames_GetKeyFrameCount(void* keyFrames)
{
  return (unsigned int) Dali::DevelKeyFrames::GetKeyFrameCount(*((Dali::KeyFrames*)keyFrames));
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_KeyFrames_GetKeyFrame(void* keyFrames, unsigned int index, float* time, void* value)
{
  Dali::DevelKeyFrames::GetKeyFrame(*((Dali::KeyFrames*)keyFrames), (size_t)index, *time, *((Property::Value*)value));
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Path_Property_POINTS_get() {
  int jresult ;
  int result;

  result = (int)Dali::Path::Property::POINTS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Path_Property_CONTROL_POINTS_get() {
  int jresult ;
  int result;

  result = (int)Dali::Path::Property::CONTROL_POINTS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Path_Property() {
  void * jresult ;
  Dali::Path::Property *result = 0 ;

  {
    try {
      result = (Dali::Path::Property *)new Dali::Path::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Path_Property(void * jarg1) {
  Dali::Path::Property *arg1 = (Dali::Path::Property *) 0 ;

  arg1 = (Dali::Path::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Path_New() {
  void * jresult ;
  Dali::Path result;

  {
    try {
      result = Dali::Path::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Path((const Dali::Path &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Path_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Path result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Path::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Path((const Dali::Path &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Path__SWIG_0() {
  void * jresult ;
  Dali::Path *result = 0 ;

  {
    try {
      result = (Dali::Path *)new Dali::Path();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Path(void * jarg1) {
  Dali::Path *arg1 = (Dali::Path *) 0 ;

  arg1 = (Dali::Path *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Path__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Path *arg1 = 0 ;
  Dali::Path *result = 0 ;

  arg1 = (Dali::Path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Path const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Path *)new Dali::Path((Dali::Path const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Path_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Path *arg1 = (Dali::Path *) 0 ;
  Dali::Path *arg2 = 0 ;
  Dali::Path *result = 0 ;

  arg1 = (Dali::Path *)jarg1;
  arg2 = (Dali::Path *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Path const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Path *) &(arg1)->operator =((Dali::Path const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Path_AddPoint(void * jarg1, void * jarg2) {
  Dali::Path *arg1 = (Dali::Path *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Path *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->AddPoint((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Path_AddControlPoint(void * jarg1, void * jarg2) {
  Dali::Path *arg1 = (Dali::Path *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Path *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->AddControlPoint((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Path_GenerateControlPoints(void * jarg1, float jarg2) {
  Dali::Path *arg1 = (Dali::Path *) 0 ;
  float arg2 ;

  arg1 = (Dali::Path *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->GenerateControlPoints(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Path_Sample(void * jarg1, float jarg2, void * jarg3, void * jarg4) {
  Dali::Path *arg1 = (Dali::Path *) 0 ;
  float arg2 ;
  Dali::Vector3 *arg3 = 0 ;
  Dali::Vector3 *arg4 = 0 ;

  arg1 = (Dali::Path *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (Dali::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 & type is null", 0);
    return ;
  }
  arg4 = (Dali::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 & type is null", 0);
    return ;
  }
  {
    try {
      ((Dali::Path const *)arg1)->Sample(arg2,*arg3,*arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Path_GetPoint(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::Path *arg1 = (Dali::Path *) 0 ;
  size_t arg2 ;
  Dali::Vector3 *result = 0 ;

  arg1 = (Dali::Path *)jarg1;
  arg2 = (size_t)jarg2;
  {
    try {
      result = (Dali::Vector3 *) &(arg1)->GetPoint(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Path_GetControlPoint(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::Path *arg1 = (Dali::Path *) 0 ;
  size_t arg2 ;
  Dali::Vector3 *result = 0 ;

  arg1 = (Dali::Path *)jarg1;
  arg2 = (size_t)jarg2;
  {
    try {
      result = (Dali::Vector3 *) &(arg1)->GetControlPoint(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_Path_GetPointCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Path *arg1 = (Dali::Path *) 0 ;
  size_t result;

  arg1 = (Dali::Path *)jarg1;
  {
    try {
      result = ((Dali::Path const *)arg1)->GetPointCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TimePeriod__SWIG_0(float jarg1) {
  void * jresult ;
  float arg1 ;
  Dali::TimePeriod *result = 0 ;

  arg1 = (float)jarg1;
  {
    try {
      result = (Dali::TimePeriod *)new Dali::TimePeriod(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TimePeriod__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Dali::TimePeriod *result = 0 ;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (Dali::TimePeriod *)new Dali::TimePeriod(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TimePeriod(void * jarg1) {
  Dali::TimePeriod *arg1 = (Dali::TimePeriod *) 0 ;

  arg1 = (Dali::TimePeriod *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TimePeriod_delaySeconds_set(void * jarg1, float jarg2) {
  Dali::TimePeriod *arg1 = (Dali::TimePeriod *) 0 ;
  float arg2 ;

  arg1 = (Dali::TimePeriod *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->delaySeconds = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_TimePeriod_delaySeconds_get(void * jarg1) {
  float jresult ;
  Dali::TimePeriod *arg1 = (Dali::TimePeriod *) 0 ;
  float result;

  arg1 = (Dali::TimePeriod *)jarg1;
  result = (float) ((arg1)->delaySeconds);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TimePeriod_durationSeconds_set(void * jarg1, float jarg2) {
  Dali::TimePeriod *arg1 = (Dali::TimePeriod *) 0 ;
  float arg2 ;

  arg1 = (Dali::TimePeriod *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->durationSeconds = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_TimePeriod_durationSeconds_get(void * jarg1) {
  float jresult ;
  Dali::TimePeriod *arg1 = (Dali::TimePeriod *) 0 ;
  float result;

  arg1 = (Dali::TimePeriod *)jarg1;
  result = (float) ((arg1)->durationSeconds);
  jresult = result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_LinearConstrainer_Property_VALUE_get() {
  int jresult ;
  int result;

  result = (int)Dali::LinearConstrainer::Property::VALUE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_LinearConstrainer_Property_PROGRESS_get() {
  int jresult ;
  int result;

  result = (int)Dali::LinearConstrainer::Property::PROGRESS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_LinearConstrainer_Property() {
  void * jresult ;
  Dali::LinearConstrainer::Property *result = 0 ;

  {
    try {
      result = (Dali::LinearConstrainer::Property *)new Dali::LinearConstrainer::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_LinearConstrainer_Property(void * jarg1) {
  Dali::LinearConstrainer::Property *arg1 = (Dali::LinearConstrainer::Property *) 0 ;

  arg1 = (Dali::LinearConstrainer::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LinearConstrainer_New() {
  void * jresult ;
  Dali::LinearConstrainer result;

  {
    try {
      result = Dali::LinearConstrainer::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::LinearConstrainer((const Dali::LinearConstrainer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LinearConstrainer_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::LinearConstrainer result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::LinearConstrainer::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::LinearConstrainer((const Dali::LinearConstrainer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_LinearConstrainer__SWIG_0() {
  void * jresult ;
  Dali::LinearConstrainer *result = 0 ;

  {
    try {
      result = (Dali::LinearConstrainer *)new Dali::LinearConstrainer();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_LinearConstrainer(void * jarg1) {
  Dali::LinearConstrainer *arg1 = (Dali::LinearConstrainer *) 0 ;

  arg1 = (Dali::LinearConstrainer *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_LinearConstrainer__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::LinearConstrainer *arg1 = 0 ;
  Dali::LinearConstrainer *result = 0 ;

  arg1 = (Dali::LinearConstrainer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::LinearConstrainer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::LinearConstrainer *)new Dali::LinearConstrainer((Dali::LinearConstrainer const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LinearConstrainer_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::LinearConstrainer *arg1 = (Dali::LinearConstrainer *) 0 ;
  Dali::LinearConstrainer *arg2 = 0 ;
  Dali::LinearConstrainer *result = 0 ;

  arg1 = (Dali::LinearConstrainer *)jarg1;
  arg2 = (Dali::LinearConstrainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::LinearConstrainer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::LinearConstrainer *) &(arg1)->operator =((Dali::LinearConstrainer const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_LinearConstrainer_Apply__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Dali::LinearConstrainer *arg1 = (Dali::LinearConstrainer *) 0 ;
  SwigValueWrapper< Dali::Property > arg2 ;
  SwigValueWrapper< Dali::Property > arg3 ;
  Dali::Vector2 *arg4 = 0 ;
  Dali::Vector2 *arg5 = 0 ;
  Dali::Property *argp2 ;
  Dali::Property *argp3 ;

  arg1 = (Dali::LinearConstrainer *)jarg1;
  argp2 = (Dali::Property *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Property", 0);
    return ;
  }
  arg2 = *argp2;
  argp3 = (Dali::Property *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Property", 0);
    return ;
  }
  arg3 = *argp3;
  arg4 = (Dali::Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  arg5 = (Dali::Vector2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Apply(arg2,arg3,(Dali::Vector2 const &)*arg4,(Dali::Vector2 const &)*arg5);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_LinearConstrainer_Apply__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Dali::LinearConstrainer *arg1 = (Dali::LinearConstrainer *) 0 ;
  SwigValueWrapper< Dali::Property > arg2 ;
  SwigValueWrapper< Dali::Property > arg3 ;
  Dali::Vector2 *arg4 = 0 ;
  Dali::Property *argp2 ;
  Dali::Property *argp3 ;

  arg1 = (Dali::LinearConstrainer *)jarg1;
  argp2 = (Dali::Property *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Property", 0);
    return ;
  }
  arg2 = *argp2;
  argp3 = (Dali::Property *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Property", 0);
    return ;
  }
  arg3 = *argp3;
  arg4 = (Dali::Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Apply(arg2,arg3,(Dali::Vector2 const &)*arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_LinearConstrainer_Remove(void * jarg1, void * jarg2) {
  Dali::LinearConstrainer *arg1 = (Dali::LinearConstrainer *) 0 ;
  Dali::Handle *arg2 = 0 ;

  arg1 = (Dali::LinearConstrainer *)jarg1;
  arg2 = (Dali::Handle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Handle & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Remove(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PathConstrainer_Property_FORWARD_get() {
  int jresult ;
  int result;

  result = (int)Dali::PathConstrainer::Property::FORWARD;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PathConstrainer_Property_POINTS_get() {
  int jresult ;
  int result;

  result = (int)Dali::PathConstrainer::Property::POINTS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PathConstrainer_Property_CONTROL_POINTS_get() {
  int jresult ;
  int result;

  result = (int)Dali::PathConstrainer::Property::CONTROL_POINTS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PathConstrainer_Property() {
  void * jresult ;
  Dali::PathConstrainer::Property *result = 0 ;

  {
    try {
      result = (Dali::PathConstrainer::Property *)new Dali::PathConstrainer::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PathConstrainer_Property(void * jarg1) {
  Dali::PathConstrainer::Property *arg1 = (Dali::PathConstrainer::Property *) 0 ;

  arg1 = (Dali::PathConstrainer::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PathConstrainer_New() {
  void * jresult ;
  Dali::PathConstrainer result;

  {
    try {
      result = Dali::PathConstrainer::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PathConstrainer((const Dali::PathConstrainer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PathConstrainer_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::PathConstrainer result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::PathConstrainer::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PathConstrainer((const Dali::PathConstrainer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PathConstrainer__SWIG_0() {
  void * jresult ;
  Dali::PathConstrainer *result = 0 ;

  {
    try {
      result = (Dali::PathConstrainer *)new Dali::PathConstrainer();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PathConstrainer(void * jarg1) {
  Dali::PathConstrainer *arg1 = (Dali::PathConstrainer *) 0 ;

  arg1 = (Dali::PathConstrainer *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PathConstrainer__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::PathConstrainer *arg1 = 0 ;
  Dali::PathConstrainer *result = 0 ;

  arg1 = (Dali::PathConstrainer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PathConstrainer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::PathConstrainer *)new Dali::PathConstrainer((Dali::PathConstrainer const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PathConstrainer_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::PathConstrainer *arg1 = (Dali::PathConstrainer *) 0 ;
  Dali::PathConstrainer *arg2 = 0 ;
  Dali::PathConstrainer *result = 0 ;

  arg1 = (Dali::PathConstrainer *)jarg1;
  arg2 = (Dali::PathConstrainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PathConstrainer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::PathConstrainer *) &(arg1)->operator =((Dali::PathConstrainer const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PathConstrainer_Apply__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Dali::PathConstrainer *arg1 = (Dali::PathConstrainer *) 0 ;
  SwigValueWrapper< Dali::Property > arg2 ;
  SwigValueWrapper< Dali::Property > arg3 ;
  Dali::Vector2 *arg4 = 0 ;
  Dali::Vector2 *arg5 = 0 ;
  Dali::Property *argp2 ;
  Dali::Property *argp3 ;

  arg1 = (Dali::PathConstrainer *)jarg1;
  argp2 = (Dali::Property *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Property", 0);
    return ;
  }
  arg2 = *argp2;
  argp3 = (Dali::Property *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Property", 0);
    return ;
  }
  arg3 = *argp3;
  arg4 = (Dali::Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  arg5 = (Dali::Vector2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Apply(arg2,arg3,(Dali::Vector2 const &)*arg4,(Dali::Vector2 const &)*arg5);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PathConstrainer_Apply__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Dali::PathConstrainer *arg1 = (Dali::PathConstrainer *) 0 ;
  SwigValueWrapper< Dali::Property > arg2 ;
  SwigValueWrapper< Dali::Property > arg3 ;
  Dali::Vector2 *arg4 = 0 ;
  Dali::Property *argp2 ;
  Dali::Property *argp3 ;

  arg1 = (Dali::PathConstrainer *)jarg1;
  argp2 = (Dali::Property *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Property", 0);
    return ;
  }
  arg2 = *argp2;
  argp3 = (Dali::Property *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Property", 0);
    return ;
  }
  arg3 = *argp3;
  arg4 = (Dali::Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Apply(arg2,arg3,(Dali::Vector2 const &)*arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PathConstrainer_Remove(void * jarg1, void * jarg2) {
  Dali::PathConstrainer *arg1 = (Dali::PathConstrainer *) 0 ;
  Dali::Handle *arg2 = 0 ;

  arg1 = (Dali::PathConstrainer *)jarg1;
  arg2 = (Dali::Handle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Handle & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Remove(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_FittingModeDefault_get() {
  int jresult ;
  Dali::FittingMode::Type result;

  result = (Dali::FittingMode::Type)(Dali::FittingMode::Type)Dali::FittingMode::DEFAULT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_DEFAULT_get() {
  int jresult ;
  Dali::SamplingMode::Type result;

  result = (Dali::SamplingMode::Type)(Dali::SamplingMode::Type)Dali::SamplingMode::DEFAULT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_NativeImageInterface_CreateResource(void * jarg1) {
  bool jresult ;
  Dali::NativeImageInterface *arg1 = (Dali::NativeImageInterface *) 0 ;
  bool result;

  arg1 = (Dali::NativeImageInterface *)jarg1;
  {
    try {
      result = (bool)(arg1)->CreateResource();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_NativeImageInterface_DestroyResource(void * jarg1) {
  Dali::NativeImageInterface *arg1 = (Dali::NativeImageInterface *) 0 ;

  arg1 = (Dali::NativeImageInterface *)jarg1;
  {
    try {
      (arg1)->DestroyResource();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_NativeImageInterface_TargetTexture(void * jarg1) {
  unsigned int jresult ;
  Dali::NativeImageInterface *arg1 = (Dali::NativeImageInterface *) 0 ;
  unsigned int result;

  arg1 = (Dali::NativeImageInterface *)jarg1;
  {
    try {
      result = (unsigned int)(arg1)->TargetTexture();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_NativeImageInterface_PrepareTexture(void * jarg1) {
  Dali::NativeImageInterface *arg1 = (Dali::NativeImageInterface *) 0 ;

  arg1 = (Dali::NativeImageInterface *)jarg1;
  {
    try {
      (arg1)->PrepareTexture();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_NativeImageInterface_GetWidth(void * jarg1) {
  unsigned int jresult ;
  Dali::NativeImageInterface *arg1 = (Dali::NativeImageInterface *) 0 ;
  unsigned int result;

  arg1 = (Dali::NativeImageInterface *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::NativeImageInterface const *)arg1)->GetWidth();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_NativeImageInterface_GetHeight(void * jarg1) {
  unsigned int jresult ;
  Dali::NativeImageInterface *arg1 = (Dali::NativeImageInterface *) 0 ;
  unsigned int result;

  arg1 = (Dali::NativeImageInterface *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::NativeImageInterface const *)arg1)->GetHeight();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_NativeImageInterface_RequiresBlending(void * jarg1) {
  bool jresult ;
  Dali::NativeImageInterface *arg1 = (Dali::NativeImageInterface *) 0 ;
  bool result;

  arg1 = (Dali::NativeImageInterface *)jarg1;
  {
    try {
      result = (bool)((Dali::NativeImageInterface const *)arg1)->RequiresBlending();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_CameraActor_Property_TYPE_get() {
  int jresult ;
  int result;

  result = (int)Dali::CameraActor::Property::TYPE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_CameraActor_Property_PROJECTION_MODE_get() {
  int jresult ;
  int result;

  result = (int)Dali::CameraActor::Property::PROJECTION_MODE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_CameraActor_Property_FIELD_OF_VIEW_get() {
  int jresult ;
  int result;

  result = (int)Dali::CameraActor::Property::FIELD_OF_VIEW;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_CameraActor_Property_ASPECT_RATIO_get() {
  int jresult ;
  int result;

  result = (int)Dali::CameraActor::Property::ASPECT_RATIO;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_CameraActor_Property_NEAR_PLANE_DISTANCE_get() {
  int jresult ;
  int result;

  result = (int)Dali::CameraActor::Property::NEAR_PLANE_DISTANCE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_CameraActor_Property_FAR_PLANE_DISTANCE_get() {
  int jresult ;
  int result;

  result = (int)Dali::CameraActor::Property::FAR_PLANE_DISTANCE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_CameraActor_Property_LEFT_PLANE_DISTANCE_get() {
  int jresult ;
  int result;

  result = (int)Dali::CameraActor::Property::LEFT_PLANE_DISTANCE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_CameraActor_Property_RIGHT_PLANE_DISTANCE_get() {
  int jresult ;
  int result;

  result = (int)Dali::CameraActor::Property::RIGHT_PLANE_DISTANCE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_CameraActor_Property_TOP_PLANE_DISTANCE_get() {
  int jresult ;
  int result;

  result = (int)Dali::CameraActor::Property::TOP_PLANE_DISTANCE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_CameraActor_Property_BOTTOM_PLANE_DISTANCE_get() {
  int jresult ;
  int result;

  result = (int)Dali::CameraActor::Property::BOTTOM_PLANE_DISTANCE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_CameraActor_Property_TARGET_POSITION_get() {
  int jresult ;
  int result;

  result = (int)Dali::CameraActor::Property::TARGET_POSITION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_CameraActor_Property_PROJECTION_MATRIX_get() {
  int jresult ;
  int result;

  result = (int)Dali::CameraActor::Property::PROJECTION_MATRIX;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_CameraActor_Property_VIEW_MATRIX_get() {
  int jresult ;
  int result;

  result = (int)Dali::CameraActor::Property::VIEW_MATRIX;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_CameraActor_Property_INVERT_Y_AXIS_get() {
  int jresult ;
  int result;

  result = (int)Dali::CameraActor::Property::INVERT_Y_AXIS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_CameraActor_Property() {
  void * jresult ;
  Dali::CameraActor::Property *result = 0 ;

  {
    try {
      result = (Dali::CameraActor::Property *)new Dali::CameraActor::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_CameraActor_Property(void * jarg1) {
  Dali::CameraActor::Property *arg1 = (Dali::CameraActor::Property *) 0 ;

  arg1 = (Dali::CameraActor::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_CameraActor__SWIG_0() {
  void * jresult ;
  Dali::CameraActor *result = 0 ;

  {
    try {
      result = (Dali::CameraActor *)new Dali::CameraActor();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CameraActor_New__SWIG_0() {
  void * jresult ;
  Dali::CameraActor result;

  {
    try {
      result = Dali::CameraActor::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::CameraActor((const Dali::CameraActor &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CameraActor_New__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Size *arg1 = 0 ;
  Dali::CameraActor result;

  arg1 = (Dali::Size *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Size const & type is null", 0);
    return 0;
  }
  {
    try {
      result = Dali::CameraActor::New((Dali::Vector2 const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::CameraActor((const Dali::CameraActor &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CameraActor_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::CameraActor result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::CameraActor::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::CameraActor((const Dali::CameraActor &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_CameraActor(void * jarg1) {
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;

  arg1 = (Dali::CameraActor *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_CameraActor__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::CameraActor *arg1 = 0 ;
  Dali::CameraActor *result = 0 ;

  arg1 = (Dali::CameraActor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::CameraActor const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::CameraActor *)new Dali::CameraActor((Dali::CameraActor const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CameraActor_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  Dali::CameraActor *arg2 = 0 ;
  Dali::CameraActor *result = 0 ;

  arg1 = (Dali::CameraActor *)jarg1;
  arg2 = (Dali::CameraActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::CameraActor const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::CameraActor *) &(arg1)->operator =((Dali::CameraActor const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CameraActor_SetType(void * jarg1, int jarg2) {
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  Dali::Camera::Type arg2 ;

  arg1 = (Dali::CameraActor *)jarg1;
  arg2 = (Dali::Camera::Type)jarg2;
  {
    try {
      (arg1)->SetType(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_CameraActor_GetType(void * jarg1) {
  int jresult ;
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  Dali::Camera::Type result;

  arg1 = (Dali::CameraActor *)jarg1;
  {
    try {
      result = (Dali::Camera::Type)((Dali::CameraActor const *)arg1)->GetType();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CameraActor_SetProjectionMode(void * jarg1, int jarg2) {
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  Dali::Camera::ProjectionMode arg2 ;

  arg1 = (Dali::CameraActor *)jarg1;
  arg2 = (Dali::Camera::ProjectionMode)jarg2;
  {
    try {
      (arg1)->SetProjectionMode(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_CameraActor_GetProjectionMode(void * jarg1) {
  int jresult ;
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  Dali::Camera::ProjectionMode result;

  arg1 = (Dali::CameraActor *)jarg1;
  {
    try {
      result = (Dali::Camera::ProjectionMode)((Dali::CameraActor const *)arg1)->GetProjectionMode();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CameraActor_SetFieldOfView(void * jarg1, float jarg2) {
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  float arg2 ;

  arg1 = (Dali::CameraActor *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetFieldOfView(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_CameraActor_GetFieldOfView(void * jarg1) {
  float jresult ;
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  float result;

  arg1 = (Dali::CameraActor *)jarg1;
  {
    try {
      result = (float)(arg1)->GetFieldOfView();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CameraActor_SetAspectRatio(void * jarg1, float jarg2) {
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  float arg2 ;

  arg1 = (Dali::CameraActor *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetAspectRatio(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_CameraActor_GetAspectRatio(void * jarg1) {
  float jresult ;
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  float result;

  arg1 = (Dali::CameraActor *)jarg1;
  {
    try {
      result = (float)(arg1)->GetAspectRatio();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CameraActor_SetNearClippingPlane(void * jarg1, float jarg2) {
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  float arg2 ;

  arg1 = (Dali::CameraActor *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetNearClippingPlane(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_CameraActor_GetNearClippingPlane(void * jarg1) {
  float jresult ;
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  float result;

  arg1 = (Dali::CameraActor *)jarg1;
  {
    try {
      result = (float)(arg1)->GetNearClippingPlane();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CameraActor_SetFarClippingPlane(void * jarg1, float jarg2) {
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  float arg2 ;

  arg1 = (Dali::CameraActor *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetFarClippingPlane(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_CameraActor_GetFarClippingPlane(void * jarg1) {
  float jresult ;
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  float result;

  arg1 = (Dali::CameraActor *)jarg1;
  {
    try {
      result = (float)(arg1)->GetFarClippingPlane();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CameraActor_SetTargetPosition(void * jarg1, void * jarg2) {
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::CameraActor *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetTargetPosition((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CameraActor_GetTargetPosition(void * jarg1) {
  void * jresult ;
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::CameraActor *)jarg1;
  {
    try {
      result = ((Dali::CameraActor const *)arg1)->GetTargetPosition();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CameraActor_SetInvertYAxis(void * jarg1, bool jarg2) {
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  bool arg2 ;

  arg1 = (Dali::CameraActor *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetInvertYAxis(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_CameraActor_GetInvertYAxis(void * jarg1) {
  bool jresult ;
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  bool result;

  arg1 = (Dali::CameraActor *)jarg1;
  {
    try {
      result = (bool)(arg1)->GetInvertYAxis();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CameraActor_SetPerspectiveProjection(void * jarg1, void * jarg2) {
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  Dali::Size *arg2 = 0 ;

  arg1 = (Dali::CameraActor *)jarg1;
  arg2 = (Dali::Size *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Size const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetPerspectiveProjection((Dali::Size const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CameraActor_SetOrthographicProjection__SWIG_0(void * jarg1, void * jarg2) {
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  Dali::Size *arg2 = 0 ;

  arg1 = (Dali::CameraActor *)jarg1;
  arg2 = (Dali::Size *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Size const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetOrthographicProjection((Dali::Size const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CameraActor_SetOrthographicProjection__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  Dali::CameraActor *arg1 = (Dali::CameraActor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;

  arg1 = (Dali::CameraActor *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (float)jarg6;
  arg7 = (float)jarg7;
  {
    try {
      (arg1)->SetOrthographicProjection(arg2,arg3,arg4,arg5,arg6,arg7);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_StringValuePair__SWIG_0() {
  void * jresult ;
  std::pair< std::string,Dali::Property::Value > *result = 0 ;

  {
    try {
      result = (std::pair< std::string,Dali::Property::Value > *)new std::pair< std::string,Dali::Property::Value >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_StringValuePair__SWIG_1(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string arg1 ;
  Dali::Property::Value arg2 ;
  Dali::Property::Value *argp2 ;
  std::pair< std::string,Dali::Property::Value > *result = 0 ;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1);
  argp2 = (Dali::Property::Value *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Property::Value", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (std::pair< std::string,Dali::Property::Value > *)new std::pair< std::string,Dali::Property::Value >(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_StringValuePair__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< std::string,Dali::Property::Value > *arg1 = 0 ;
  std::pair< std::string,Dali::Property::Value > *result = 0 ;

  arg1 = (std::pair< std::string,Dali::Property::Value > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< std::string,Dali::Property::Value > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (std::pair< std::string,Dali::Property::Value > *)new std::pair< std::string,Dali::Property::Value >((std::pair< std::string,Dali::Property::Value > const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_StringValuePair_first_set(void * jarg1, char * jarg2) {
  std::pair< std::string,Dali::Property::Value > *arg1 = (std::pair< std::string,Dali::Property::Value > *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (std::pair< std::string,Dali::Property::Value > *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  if (arg1) (arg1)->first = *arg2;

  //argout typemap for const std::string&

}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_StringValuePair_first_get(void * jarg1) {
  char * jresult ;
  std::pair< std::string,Dali::Property::Value > *arg1 = (std::pair< std::string,Dali::Property::Value > *) 0 ;
  std::string *result = 0 ;

  arg1 = (std::pair< std::string,Dali::Property::Value > *)jarg1;
  result = (std::string *) & ((arg1)->first);
  jresult = SWIG_csharp_string_callback(result->c_str());
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_StringValuePair_second_set(void * jarg1, void * jarg2) {
  std::pair< std::string,Dali::Property::Value > *arg1 = (std::pair< std::string,Dali::Property::Value > *) 0 ;
  Dali::Property::Value *arg2 = (Dali::Property::Value *) 0 ;

  arg1 = (std::pair< std::string,Dali::Property::Value > *)jarg1;
  arg2 = (Dali::Property::Value *)jarg2;
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_StringValuePair_second_get(void * jarg1) {
  void * jresult ;
  std::pair< std::string,Dali::Property::Value > *arg1 = (std::pair< std::string,Dali::Property::Value > *) 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (std::pair< std::string,Dali::Property::Value > *)jarg1;
  result = (Dali::Property::Value *)& ((arg1)->second);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_StringValuePair(void * jarg1) {
  std::pair< std::string,Dali::Property::Value > *arg1 = (std::pair< std::string,Dali::Property::Value > *) 0 ;

  arg1 = (std::pair< std::string,Dali::Property::Value > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchPointContainer_Clear(void * jarg1) {
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  {
    try {
      (arg1)->clear();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchPointContainer_Add(void * jarg1, void * jarg2) {
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;
  Dali::TouchPoint *arg2 = 0 ;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  arg2 = (Dali::TouchPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TouchPoint const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->push_back((Dali::TouchPoint const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_TouchPointContainer_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;
  std::vector< Dali::TouchPoint >::size_type result;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  {
    try {
      result = ((std::vector< Dali::TouchPoint > const *)arg1)->size();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_TouchPointContainer_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;
  std::vector< Dali::TouchPoint >::size_type result;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  {
    try {
      result = ((std::vector< Dali::TouchPoint > const *)arg1)->capacity();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchPointContainer_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;
  std::vector< Dali::TouchPoint >::size_type arg2 ;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  arg2 = (std::vector< Dali::TouchPoint >::size_type)jarg2;
  {
    try {
      (arg1)->reserve(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TouchPointContainer__SWIG_0() {
  void * jresult ;
  std::vector< Dali::TouchPoint > *result = 0 ;

  {
    try {
      result = (std::vector< Dali::TouchPoint > *)new std::vector< Dali::TouchPoint >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TouchPointContainer__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Dali::TouchPoint > *arg1 = 0 ;
  std::vector< Dali::TouchPoint > *result = 0 ;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Dali::TouchPoint > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (std::vector< Dali::TouchPoint > *)new std::vector< Dali::TouchPoint >((std::vector< Dali::TouchPoint > const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TouchPointContainer__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Dali::TouchPoint > *result = 0 ;

  arg1 = (int)jarg1;
  {
    try {
      try {
        result = (std::vector< Dali::TouchPoint > *)new_std_vector_Sl_Dali_TouchPoint_Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TouchPointContainer_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;
  int arg2 ;
  SwigValueWrapper< Dali::TouchPoint > result;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      try {
        result = std_vector_Sl_Dali_TouchPoint_Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::TouchPoint((const Dali::TouchPoint &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TouchPointContainer_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;
  int arg2 ;
  Dali::TouchPoint *result = 0 ;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      try {
        result = (Dali::TouchPoint *) &std_vector_Sl_Dali_TouchPoint_Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchPointContainer_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;
  int arg2 ;
  Dali::TouchPoint *arg3 = 0 ;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (Dali::TouchPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TouchPoint const & type is null", 0);
    return ;
  }
  {
    try {
      try {
        std_vector_Sl_Dali_TouchPoint_Sg__setitem(arg1,arg2,(Dali::TouchPoint const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchPointContainer_AddRange(void * jarg1, void * jarg2) {
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;
  std::vector< Dali::TouchPoint > *arg2 = 0 ;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  arg2 = (std::vector< Dali::TouchPoint > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Dali::TouchPoint > const & type is null", 0);
    return ;
  }
  {
    try {
      std_vector_Sl_Dali_TouchPoint_Sg__AddRange(arg1,(std::vector< Dali::TouchPoint > const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TouchPointContainer_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Dali::TouchPoint > *result = 0 ;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  {
    try {
      try {
        result = (std::vector< Dali::TouchPoint > *)std_vector_Sl_Dali_TouchPoint_Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchPointContainer_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;
  int arg2 ;
  Dali::TouchPoint *arg3 = 0 ;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (Dali::TouchPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TouchPoint const & type is null", 0);
    return ;
  }
  {
    try {
      try {
        std_vector_Sl_Dali_TouchPoint_Sg__Insert(arg1,arg2,(Dali::TouchPoint const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchPointContainer_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;
  int arg2 ;
  std::vector< Dali::TouchPoint > *arg3 = 0 ;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (std::vector< Dali::TouchPoint > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Dali::TouchPoint > const & type is null", 0);
    return ;
  }
  {
    try {
      try {
        std_vector_Sl_Dali_TouchPoint_Sg__InsertRange(arg1,arg2,(std::vector< Dali::TouchPoint > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchPointContainer_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;
  int arg2 ;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      try {
        std_vector_Sl_Dali_TouchPoint_Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchPointContainer_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;
  int arg2 ;
  int arg3 ;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  {
    try {
      try {
        std_vector_Sl_Dali_TouchPoint_Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TouchPointContainer_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Dali::TouchPoint *arg1 = 0 ;
  int arg2 ;
  std::vector< Dali::TouchPoint > *result = 0 ;

  arg1 = (Dali::TouchPoint *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TouchPoint const & type is null", 0);
    return 0;
  }
  arg2 = (int)jarg2;
  {
    try {
      try {
        result = (std::vector< Dali::TouchPoint > *)std_vector_Sl_Dali_TouchPoint_Sg__Repeat((Dali::TouchPoint const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchPointContainer_Reverse__SWIG_0(void * jarg1) {
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  {
    try {
      std_vector_Sl_Dali_TouchPoint_Sg__Reverse__SWIG_0(arg1);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchPointContainer_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;
  int arg2 ;
  int arg3 ;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  {
    try {
      try {
        std_vector_Sl_Dali_TouchPoint_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchPointContainer_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;
  int arg2 ;
  std::vector< Dali::TouchPoint > *arg3 = 0 ;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (std::vector< Dali::TouchPoint > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Dali::TouchPoint > const & type is null", 0);
    return ;
  }
  {
    try {
      try {
        std_vector_Sl_Dali_TouchPoint_Sg__SetRange(arg1,arg2,(std::vector< Dali::TouchPoint > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TouchPointContainer(void * jarg1) {
  std::vector< Dali::TouchPoint > *arg1 = (std::vector< Dali::TouchPoint > *) 0 ;

  arg1 = (std::vector< Dali::TouchPoint > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Rectangle__SWIG_0() {
  void * jresult ;
  Dali::Rect< int > *result = 0 ;

  {
    try {
      result = (Dali::Rect< int > *)new Dali::Rect< int >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Rectangle__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Dali::Rect< int > *result = 0 ;

  arg1 = (int)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  {
    try {
      result = (Dali::Rect< int > *)new Dali::Rect< int >(arg1,arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Rectangle__SWIG_2(void * jarg1) {
  void * jresult ;
  Dali::Rect< int > *arg1 = 0 ;
  Dali::Rect< int > *result = 0 ;

  arg1 = (Dali::Rect< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Rect< int > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Rect< int > *)new Dali::Rect< int >((Dali::Rect< int > const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Rectangle_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  Dali::Rect< int > *arg2 = 0 ;
  Dali::Rect< int > *result = 0 ;

  arg1 = (Dali::Rect< int > *)jarg1;
  arg2 = (Dali::Rect< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Rect< int > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Rect< int > *) &(arg1)->operator =((Dali::Rect< int > const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Rectangle_Set(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;

  arg1 = (Dali::Rect< int > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  arg5 = (int)jarg5;
  {
    try {
      (arg1)->Set(arg2,arg3,arg4,arg5);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Rectangle_IsEmpty(void * jarg1) {
  bool jresult ;
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  bool result;

  arg1 = (Dali::Rect< int > *)jarg1;
  {
    try {
      result = (bool)((Dali::Rect< int > const *)arg1)->IsEmpty();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Rectangle_Left(void * jarg1) {
  int jresult ;
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int result;

  arg1 = (Dali::Rect< int > *)jarg1;
  {
    try {
      result = (int)((Dali::Rect< int > const *)arg1)->Left();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Rectangle_Right(void * jarg1) {
  int jresult ;
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int result;

  arg1 = (Dali::Rect< int > *)jarg1;
  {
    try {
      result = (int)((Dali::Rect< int > const *)arg1)->Right();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Rectangle_Top(void * jarg1) {
  int jresult ;
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int result;

  arg1 = (Dali::Rect< int > *)jarg1;
  {
    try {
      result = (int)((Dali::Rect< int > const *)arg1)->Top();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Rectangle_Bottom(void * jarg1) {
  int jresult ;
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int result;

  arg1 = (Dali::Rect< int > *)jarg1;
  {
    try {
      result = (int)((Dali::Rect< int > const *)arg1)->Bottom();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Rectangle_Area(void * jarg1) {
  int jresult ;
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int result;

  arg1 = (Dali::Rect< int > *)jarg1;
  {
    try {
      result = (int)((Dali::Rect< int > const *)arg1)->Area();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Rectangle_Intersects(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  Dali::Rect< int > *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Rect< int > *)jarg1;
  arg2 = (Dali::Rect< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Rect< int > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Rect< int > const *)arg1)->Intersects((Dali::Rect< int > const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Rectangle_Contains(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  Dali::Rect< int > *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Rect< int > *)jarg1;
  arg2 = (Dali::Rect< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Rect< int > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)((Dali::Rect< int > const *)arg1)->Contains((Dali::Rect< int > const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Rectangle_x_set(void * jarg1, int jarg2) {
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int arg2 ;

  arg1 = (Dali::Rect< int > *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Rectangle_x_get(void * jarg1) {
  int jresult ;
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int result;

  arg1 = (Dali::Rect< int > *)jarg1;
  result = (int) ((arg1)->x);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Rectangle_left_set(void * jarg1, int jarg2) {
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int arg2 ;

  arg1 = (Dali::Rect< int > *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->left = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Rectangle_left_get(void * jarg1) {
  int jresult ;
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int result;

  arg1 = (Dali::Rect< int > *)jarg1;
  result = (int) ((arg1)->left);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Rectangle_y_set(void * jarg1, int jarg2) {
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int arg2 ;

  arg1 = (Dali::Rect< int > *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Rectangle_y_get(void * jarg1) {
  int jresult ;
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int result;

  arg1 = (Dali::Rect< int > *)jarg1;
  result = (int) ((arg1)->y);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Rectangle_right_set(void * jarg1, int jarg2) {
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int arg2 ;

  arg1 = (Dali::Rect< int > *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->right = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Rectangle_right_get(void * jarg1) {
  int jresult ;
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int result;

  arg1 = (Dali::Rect< int > *)jarg1;
  result = (int) ((arg1)->right);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Rectangle_width_set(void * jarg1, int jarg2) {
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int arg2 ;

  arg1 = (Dali::Rect< int > *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Rectangle_width_get(void * jarg1) {
  int jresult ;
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int result;

  arg1 = (Dali::Rect< int > *)jarg1;
  result = (int) ((arg1)->width);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Rectangle_bottom_set(void * jarg1, int jarg2) {
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int arg2 ;

  arg1 = (Dali::Rect< int > *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->bottom = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Rectangle_bottom_get(void * jarg1) {
  int jresult ;
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int result;

  arg1 = (Dali::Rect< int > *)jarg1;
  result = (int) ((arg1)->bottom);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Rectangle_height_set(void * jarg1, int jarg2) {
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int arg2 ;

  arg1 = (Dali::Rect< int > *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Rectangle_height_get(void * jarg1) {
  int jresult ;
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int result;

  arg1 = (Dali::Rect< int > *)jarg1;
  result = (int) ((arg1)->height);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Rectangle_top_set(void * jarg1, int jarg2) {
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int arg2 ;

  arg1 = (Dali::Rect< int > *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->top = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Rectangle_top_get(void * jarg1) {
  int jresult ;
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;
  int result;

  arg1 = (Dali::Rect< int > *)jarg1;
  result = (int) ((arg1)->top);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Rectangle(void * jarg1) {
  Dali::Rect< int > *arg1 = (Dali::Rect< int > *) 0 ;

  arg1 = (Dali::Rect< int > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PaddingType__SWIG_0() {
  void * jresult ;
  Dali::Rect< float > *result = 0 ;

  {
    try {
      result = (Dali::Rect< float > *)new Dali::Rect< float >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PaddingType__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Dali::Rect< float > *result = 0 ;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg4;
  arg4 = (float)jarg3;
  {
    try {
      result = (Dali::Rect< float > *)new Dali::Rect< float >(arg1,arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PaddingType__SWIG_2(void * jarg1) {
  void * jresult ;
  Dali::Rect< float > *arg1 = 0 ;
  Dali::Rect< float > *result = 0 ;

  arg1 = (Dali::Rect< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Rect< float > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Rect< float > *)new Dali::Rect< float >((Dali::Rect< float > const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PaddingType_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Rect< float > *arg1 = (Dali::Rect< float > *) 0 ;
  Dali::Rect< float > *arg2 = 0 ;
  Dali::Rect< float > *result = 0 ;

  arg1 = (Dali::Rect< float > *)jarg1;
  arg2 = (Dali::Rect< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Rect< float > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Rect< float > *) &(arg1)->operator =((Dali::Rect< float > const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PaddingType_Set(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  Dali::Rect< float > *arg1 = (Dali::Rect< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;

  arg1 = (Dali::Rect< float > *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg5;
  arg5 = (float)jarg4;
  {
    try {
      (arg1)->Set(arg2,arg3,arg4,arg5);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PaddingType_left_set(void * jarg1, float jarg2) {
  Dali::Rect< float > *arg1 = (Dali::Rect< float > *) 0 ;
  float arg2 ;

  arg1 = (Dali::Rect< float > *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->left = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_PaddingType_left_get(void * jarg1) {
  float jresult ;
  Dali::Rect< float > *arg1 = (Dali::Rect< float > *) 0 ;
  float result;

  arg1 = (Dali::Rect< float > *)jarg1;
  result = (float) ((arg1)->left);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PaddingType_start_set(void * jarg1, float jarg2) {
  Dali::Rect< float > *arg1 = (Dali::Rect< float > *) 0 ;
  float arg2 ;

  arg1 = (Dali::Rect< float > *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->left = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_PaddingType_start_get(void * jarg1) {
  float jresult ;
  Dali::Rect< float > *arg1 = (Dali::Rect< float > *) 0 ;
  float result;

  arg1 = (Dali::Rect< float > *)jarg1;
  result = (float) ((arg1)->left);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PaddingType_right_set(void * jarg1, float jarg2) {
  Dali::Rect< float > *arg1 = (Dali::Rect< float > *) 0 ;
  float arg2 ;

  arg1 = (Dali::Rect< float > *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->right = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_PaddingType_right_get(void * jarg1) {
  float jresult ;
  Dali::Rect< float > *arg1 = (Dali::Rect< float > *) 0 ;
  float result;

  arg1 = (Dali::Rect< float > *)jarg1;
  result = (float) ((arg1)->right);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PaddingType_end_set(void * jarg1, float jarg2) {
  Dali::Rect< float > *arg1 = (Dali::Rect< float > *) 0 ;
  float arg2 ;

  arg1 = (Dali::Rect< float > *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->right = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_PaddingType_end_get(void * jarg1) {
  float jresult ;
  Dali::Rect< float > *arg1 = (Dali::Rect< float > *) 0 ;
  float result;

  arg1 = (Dali::Rect< float > *)jarg1;
  result = (float) ((arg1)->right);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PaddingType_bottom_set(void * jarg1, float jarg2) {
  Dali::Rect< float > *arg1 = (Dali::Rect< float > *) 0 ;
  float arg2 ;

  arg1 = (Dali::Rect< float > *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->bottom = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_PaddingType_bottom_get(void * jarg1) {
  float jresult ;
  Dali::Rect< float > *arg1 = (Dali::Rect< float > *) 0 ;
  float result;

  arg1 = (Dali::Rect< float > *)jarg1;
  result = (float) ((arg1)->bottom);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PaddingType_top_set(void * jarg1, float jarg2) {
  Dali::Rect< float > *arg1 = (Dali::Rect< float > *) 0 ;
  float arg2 ;

  arg1 = (Dali::Rect< float > *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->top = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_PaddingType_top_get(void * jarg1) {
  float jresult ;
  Dali::Rect< float > *arg1 = (Dali::Rect< float > *) 0 ;
  float result;

  arg1 = (Dali::Rect< float > *)jarg1;
  result = (float) ((arg1)->top);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PaddingType(void * jarg1) {
  Dali::Rect< float > *arg1 = (Dali::Rect< float > *) 0 ;

  arg1 = (Dali::Rect< float > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_VectorInteger_BaseType_get() {
  int jresult ;
  int result;

  result = (int)Dali::Vector< int >::BaseType;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VectorInteger__SWIG_0() {
  void * jresult ;
  Dali::Vector< int > *result = 0 ;

  {
    try {
      result = (Dali::Vector< int > *)new Dali::Vector< int >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_VectorInteger(void * jarg1) {
  Dali::Vector< int > *arg1 = (Dali::Vector< int > *) 0 ;

  arg1 = (Dali::Vector< int > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VectorInteger__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Vector< int > *arg1 = 0 ;
  Dali::Vector< int > *result = 0 ;

  arg1 = (Dali::Vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector< int > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector< int > *)new Dali::Vector< int >((Dali::Vector< int > const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorInteger_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector< int > *arg1 = (Dali::Vector< int > *) 0 ;
  Dali::Vector< int > *arg2 = 0 ;
  Dali::Vector< int > *result = 0 ;

  arg1 = (Dali::Vector< int > *)jarg1;
  arg2 = (Dali::Vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector< int > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector< int > *) &(arg1)->operator =((Dali::Vector< int > const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorInteger_Begin(void * jarg1) {
  void * jresult ;
  Dali::Vector< int > *arg1 = (Dali::Vector< int > *) 0 ;
  Dali::Vector< int >::Iterator result;

  arg1 = (Dali::Vector< int > *)jarg1;
  {
    try {
      result = (Dali::Vector< int >::Iterator)((Dali::Vector< int > const *)arg1)->Begin();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorInteger_End(void * jarg1) {
  void * jresult ;
  Dali::Vector< int > *arg1 = (Dali::Vector< int > *) 0 ;
  Dali::Vector< int >::Iterator result;

  arg1 = (Dali::Vector< int > *)jarg1;
  {
    try {
      result = (Dali::Vector< int >::Iterator)((Dali::Vector< int > const *)arg1)->End();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorInteger_ValueOfIndex__SWIG_0(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::Vector< int > *arg1 = (Dali::Vector< int > *) 0 ;
  Dali::Vector< int >::SizeType arg2 ;
  Dali::Vector< int >::ItemType *result = 0 ;

  arg1 = (Dali::Vector< int > *)jarg1;
  arg2 = (Dali::Vector< int >::SizeType)jarg2;
  {
    try {
      result = (Dali::Vector< int >::ItemType *) &(arg1)->operator [](arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorInteger_PushBack(void * jarg1, int jarg2) {
  Dali::Vector< int > *arg1 = (Dali::Vector< int > *) 0 ;
  Dali::Vector< int >::ItemType *arg2 = 0 ;
  Dali::Vector< int >::ItemType temp2 ;

  arg1 = (Dali::Vector< int > *)jarg1;
  temp2 = (Dali::Vector< int >::ItemType)jarg2;
  arg2 = &temp2;
  {
    try {
      (arg1)->PushBack((Dali::Vector< int >::ItemType const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorInteger_Insert__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  Dali::Vector< int > *arg1 = (Dali::Vector< int > *) 0 ;
  Dali::Vector< int >::Iterator arg2 = (Dali::Vector< int >::Iterator) 0 ;
  Dali::Vector< int >::ItemType *arg3 = 0 ;
  Dali::Vector< int >::ItemType temp3 ;

  arg1 = (Dali::Vector< int > *)jarg1;
  arg2 = (Dali::Vector< int >::Iterator)jarg2;
  temp3 = (Dali::Vector< int >::ItemType)jarg3;
  arg3 = &temp3;
  {
    try {
      (arg1)->Insert(arg2,(Dali::Vector< int >::ItemType const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorInteger_Insert__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Dali::Vector< int > *arg1 = (Dali::Vector< int > *) 0 ;
  Dali::Vector< int >::Iterator arg2 = (Dali::Vector< int >::Iterator) 0 ;
  Dali::Vector< int >::Iterator arg3 = (Dali::Vector< int >::Iterator) 0 ;
  Dali::Vector< int >::Iterator arg4 = (Dali::Vector< int >::Iterator) 0 ;

  arg1 = (Dali::Vector< int > *)jarg1;
  arg2 = (Dali::Vector< int >::Iterator)jarg2;
  arg3 = (Dali::Vector< int >::Iterator)jarg3;
  arg4 = (Dali::Vector< int >::Iterator)jarg4;
  {
    try {
      (arg1)->Insert(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorInteger_Reserve(void * jarg1, unsigned long jarg2) {
  Dali::Vector< int > *arg1 = (Dali::Vector< int > *) 0 ;
  Dali::Vector< int >::SizeType arg2 ;

  arg1 = (Dali::Vector< int > *)jarg1;
  arg2 = (Dali::Vector< int >::SizeType)jarg2;
  {
    try {
      (arg1)->Reserve(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorInteger_Resize__SWIG_0(void * jarg1, unsigned long jarg2) {
  Dali::Vector< int > *arg1 = (Dali::Vector< int > *) 0 ;
  Dali::Vector< int >::SizeType arg2 ;

  arg1 = (Dali::Vector< int > *)jarg1;
  arg2 = (Dali::Vector< int >::SizeType)jarg2;
  {
    try {
      (arg1)->Resize(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorInteger_Resize__SWIG_1(void * jarg1, unsigned long jarg2, int jarg3) {
  Dali::Vector< int > *arg1 = (Dali::Vector< int > *) 0 ;
  Dali::Vector< int >::SizeType arg2 ;
  Dali::Vector< int >::ItemType *arg3 = 0 ;
  Dali::Vector< int >::ItemType temp3 ;

  arg1 = (Dali::Vector< int > *)jarg1;
  arg2 = (Dali::Vector< int >::SizeType)jarg2;
  temp3 = (Dali::Vector< int >::ItemType)jarg3;
  arg3 = &temp3;
  {
    try {
      (arg1)->Resize(arg2,(Dali::Vector< int >::ItemType const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorInteger_Erase__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector< int > *arg1 = (Dali::Vector< int > *) 0 ;
  Dali::Vector< int >::Iterator arg2 = (Dali::Vector< int >::Iterator) 0 ;
  Dali::Vector< int >::Iterator result;

  arg1 = (Dali::Vector< int > *)jarg1;
  arg2 = (Dali::Vector< int >::Iterator)jarg2;
  {
    try {
      result = (Dali::Vector< int >::Iterator)(arg1)->Erase(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorInteger_Erase__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Dali::Vector< int > *arg1 = (Dali::Vector< int > *) 0 ;
  Dali::Vector< int >::Iterator arg2 = (Dali::Vector< int >::Iterator) 0 ;
  Dali::Vector< int >::Iterator arg3 = (Dali::Vector< int >::Iterator) 0 ;
  Dali::Vector< int >::Iterator result;

  arg1 = (Dali::Vector< int > *)jarg1;
  arg2 = (Dali::Vector< int >::Iterator)jarg2;
  arg3 = (Dali::Vector< int >::Iterator)jarg3;
  {
    try {
      result = (Dali::Vector< int >::Iterator)(arg1)->Erase(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorInteger_Remove(void * jarg1, void * jarg2) {
  Dali::Vector< int > *arg1 = (Dali::Vector< int > *) 0 ;
  Dali::Vector< int >::Iterator arg2 = (Dali::Vector< int >::Iterator) 0 ;

  arg1 = (Dali::Vector< int > *)jarg1;
  arg2 = (Dali::Vector< int >::Iterator)jarg2;
  {
    try {
      (arg1)->Remove(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorInteger_Swap(void * jarg1, void * jarg2) {
  Dali::Vector< int > *arg1 = (Dali::Vector< int > *) 0 ;
  Dali::Vector< int > *arg2 = 0 ;

  arg1 = (Dali::Vector< int > *)jarg1;
  arg2 = (Dali::Vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector< int > & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Swap(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorInteger_Clear(void * jarg1) {
  Dali::Vector< int > *arg1 = (Dali::Vector< int > *) 0 ;

  arg1 = (Dali::Vector< int > *)jarg1;
  {
    try {
      (arg1)->Clear();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorInteger_Release(void * jarg1) {
  Dali::Vector< int > *arg1 = (Dali::Vector< int > *) 0 ;

  arg1 = (Dali::Vector< int > *)jarg1;
  {
    try {
      (arg1)->Release();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_VectorFloat_BaseType_get() {
  int jresult ;
  int result;

  result = (int)Dali::Vector< float >::BaseType;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VectorFloat__SWIG_0() {
  void * jresult ;
  Dali::Vector< float > *result = 0 ;

  {
    try {
      result = (Dali::Vector< float > *)new Dali::Vector< float >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_VectorFloat(void * jarg1) {
  Dali::Vector< float > *arg1 = (Dali::Vector< float > *) 0 ;

  arg1 = (Dali::Vector< float > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VectorFloat__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Vector< float > *arg1 = 0 ;
  Dali::Vector< float > *result = 0 ;

  arg1 = (Dali::Vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector< float > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector< float > *)new Dali::Vector< float >((Dali::Vector< float > const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorFloat_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector< float > *arg1 = (Dali::Vector< float > *) 0 ;
  Dali::Vector< float > *arg2 = 0 ;
  Dali::Vector< float > *result = 0 ;

  arg1 = (Dali::Vector< float > *)jarg1;
  arg2 = (Dali::Vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector< float > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector< float > *) &(arg1)->operator =((Dali::Vector< float > const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorFloat_Begin(void * jarg1) {
  void * jresult ;
  Dali::Vector< float > *arg1 = (Dali::Vector< float > *) 0 ;
  Dali::Vector< float >::Iterator result;

  arg1 = (Dali::Vector< float > *)jarg1;
  {
    try {
      result = (Dali::Vector< float >::Iterator)((Dali::Vector< float > const *)arg1)->Begin();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorFloat_End(void * jarg1) {
  void * jresult ;
  Dali::Vector< float > *arg1 = (Dali::Vector< float > *) 0 ;
  Dali::Vector< float >::Iterator result;

  arg1 = (Dali::Vector< float > *)jarg1;
  {
    try {
      result = (Dali::Vector< float >::Iterator)((Dali::Vector< float > const *)arg1)->End();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorFloat_ValueOfIndex__SWIG_0(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::Vector< float > *arg1 = (Dali::Vector< float > *) 0 ;
  Dali::Vector< float >::SizeType arg2 ;
  Dali::Vector< float >::ItemType *result = 0 ;

  arg1 = (Dali::Vector< float > *)jarg1;
  arg2 = (Dali::Vector< float >::SizeType)jarg2;
  {
    try {
      result = (Dali::Vector< float >::ItemType *) &(arg1)->operator [](arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorFloat_PushBack(void * jarg1, float jarg2) {
  Dali::Vector< float > *arg1 = (Dali::Vector< float > *) 0 ;
  Dali::Vector< float >::ItemType *arg2 = 0 ;
  Dali::Vector< float >::ItemType temp2 ;

  arg1 = (Dali::Vector< float > *)jarg1;
  temp2 = (Dali::Vector< float >::ItemType)jarg2;
  arg2 = &temp2;
  {
    try {
      (arg1)->PushBack((Dali::Vector< float >::ItemType const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorFloat_Insert__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  Dali::Vector< float > *arg1 = (Dali::Vector< float > *) 0 ;
  Dali::Vector< float >::Iterator arg2 = (Dali::Vector< float >::Iterator) 0 ;
  Dali::Vector< float >::ItemType *arg3 = 0 ;
  Dali::Vector< float >::ItemType temp3 ;

  arg1 = (Dali::Vector< float > *)jarg1;
  arg2 = (Dali::Vector< float >::Iterator)jarg2;
  temp3 = (Dali::Vector< float >::ItemType)jarg3;
  arg3 = &temp3;
  {
    try {
      (arg1)->Insert(arg2,(Dali::Vector< float >::ItemType const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorFloat_Insert__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Dali::Vector< float > *arg1 = (Dali::Vector< float > *) 0 ;
  Dali::Vector< float >::Iterator arg2 = (Dali::Vector< float >::Iterator) 0 ;
  Dali::Vector< float >::Iterator arg3 = (Dali::Vector< float >::Iterator) 0 ;
  Dali::Vector< float >::Iterator arg4 = (Dali::Vector< float >::Iterator) 0 ;

  arg1 = (Dali::Vector< float > *)jarg1;
  arg2 = (Dali::Vector< float >::Iterator)jarg2;
  arg3 = (Dali::Vector< float >::Iterator)jarg3;
  arg4 = (Dali::Vector< float >::Iterator)jarg4;
  {
    try {
      (arg1)->Insert(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorFloat_Reserve(void * jarg1, unsigned long jarg2) {
  Dali::Vector< float > *arg1 = (Dali::Vector< float > *) 0 ;
  Dali::Vector< float >::SizeType arg2 ;

  arg1 = (Dali::Vector< float > *)jarg1;
  arg2 = (Dali::Vector< float >::SizeType)jarg2;
  {
    try {
      (arg1)->Reserve(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}

//// ========================= end of part 2 =============================

//// ========================== start part 3 ===============================


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorFloat_Resize__SWIG_0(void * jarg1, unsigned long jarg2) {
  Dali::Vector< float > *arg1 = (Dali::Vector< float > *) 0 ;
  Dali::Vector< float >::SizeType arg2 ;

  arg1 = (Dali::Vector< float > *)jarg1;
  arg2 = (Dali::Vector< float >::SizeType)jarg2;
  {
    try {
      (arg1)->Resize(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorFloat_Resize__SWIG_1(void * jarg1, unsigned long jarg2, float jarg3) {
  Dali::Vector< float > *arg1 = (Dali::Vector< float > *) 0 ;
  Dali::Vector< float >::SizeType arg2 ;
  Dali::Vector< float >::ItemType *arg3 = 0 ;
  Dali::Vector< float >::ItemType temp3 ;

  arg1 = (Dali::Vector< float > *)jarg1;
  arg2 = (Dali::Vector< float >::SizeType)jarg2;
  temp3 = (Dali::Vector< float >::ItemType)jarg3;
  arg3 = &temp3;
  {
    try {
      (arg1)->Resize(arg2,(Dali::Vector< float >::ItemType const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorFloat_Erase__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector< float > *arg1 = (Dali::Vector< float > *) 0 ;
  Dali::Vector< float >::Iterator arg2 = (Dali::Vector< float >::Iterator) 0 ;
  Dali::Vector< float >::Iterator result;

  arg1 = (Dali::Vector< float > *)jarg1;
  arg2 = (Dali::Vector< float >::Iterator)jarg2;
  {
    try {
      result = (Dali::Vector< float >::Iterator)(arg1)->Erase(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorFloat_Erase__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Dali::Vector< float > *arg1 = (Dali::Vector< float > *) 0 ;
  Dali::Vector< float >::Iterator arg2 = (Dali::Vector< float >::Iterator) 0 ;
  Dali::Vector< float >::Iterator arg3 = (Dali::Vector< float >::Iterator) 0 ;
  Dali::Vector< float >::Iterator result;

  arg1 = (Dali::Vector< float > *)jarg1;
  arg2 = (Dali::Vector< float >::Iterator)jarg2;
  arg3 = (Dali::Vector< float >::Iterator)jarg3;
  {
    try {
      result = (Dali::Vector< float >::Iterator)(arg1)->Erase(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorFloat_Remove(void * jarg1, void * jarg2) {
  Dali::Vector< float > *arg1 = (Dali::Vector< float > *) 0 ;
  Dali::Vector< float >::Iterator arg2 = (Dali::Vector< float >::Iterator) 0 ;

  arg1 = (Dali::Vector< float > *)jarg1;
  arg2 = (Dali::Vector< float >::Iterator)jarg2;
  {
    try {
      (arg1)->Remove(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorFloat_Swap(void * jarg1, void * jarg2) {
  Dali::Vector< float > *arg1 = (Dali::Vector< float > *) 0 ;
  Dali::Vector< float > *arg2 = 0 ;

  arg1 = (Dali::Vector< float > *)jarg1;
  arg2 = (Dali::Vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector< float > & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Swap(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorFloat_Clear(void * jarg1) {
  Dali::Vector< float > *arg1 = (Dali::Vector< float > *) 0 ;

  arg1 = (Dali::Vector< float > *)jarg1;
  {
    try {
      (arg1)->Clear();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorFloat_Release(void * jarg1) {
  Dali::Vector< float > *arg1 = (Dali::Vector< float > *) 0 ;

  arg1 = (Dali::Vector< float > *)jarg1;
  {
    try {
      (arg1)->Release();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_VectorUnsignedChar_BaseType_get() {
  int jresult ;
  int result;

  result = (int)Dali::Vector< unsigned char >::BaseType;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VectorUnsignedChar__SWIG_0() {
  void * jresult ;
  Dali::Vector< unsigned char > *result = 0 ;

  {
    try {
      result = (Dali::Vector< unsigned char > *)new Dali::Vector< unsigned char >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_VectorUnsignedChar(void * jarg1) {
  Dali::Vector< unsigned char > *arg1 = (Dali::Vector< unsigned char > *) 0 ;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VectorUnsignedChar__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Vector< unsigned char > *arg1 = 0 ;
  Dali::Vector< unsigned char > *result = 0 ;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector< unsigned char > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector< unsigned char > *)new Dali::Vector< unsigned char >((Dali::Vector< unsigned char > const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorUnsignedChar_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector< unsigned char > *arg1 = (Dali::Vector< unsigned char > *) 0 ;
  Dali::Vector< unsigned char > *arg2 = 0 ;
  Dali::Vector< unsigned char > *result = 0 ;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  arg2 = (Dali::Vector< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector< unsigned char > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector< unsigned char > *) &(arg1)->operator =((Dali::Vector< unsigned char > const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorUnsignedChar_Begin(void * jarg1) {
  void * jresult ;
  Dali::Vector< unsigned char > *arg1 = (Dali::Vector< unsigned char > *) 0 ;
  Dali::Vector< unsigned char >::Iterator result;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  {
    try {
      result = (Dali::Vector< unsigned char >::Iterator)((Dali::Vector< unsigned char > const *)arg1)->Begin();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorUnsignedChar_End(void * jarg1) {
  void * jresult ;
  Dali::Vector< unsigned char > *arg1 = (Dali::Vector< unsigned char > *) 0 ;
  Dali::Vector< unsigned char >::Iterator result;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  {
    try {
      result = (Dali::Vector< unsigned char >::Iterator)((Dali::Vector< unsigned char > const *)arg1)->End();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorUnsignedChar_ValueOfIndex__SWIG_0(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::Vector< unsigned char > *arg1 = (Dali::Vector< unsigned char > *) 0 ;
  Dali::Vector< unsigned char >::SizeType arg2 ;
  Dali::Vector< unsigned char >::ItemType *result = 0 ;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  arg2 = (Dali::Vector< unsigned char >::SizeType)jarg2;
  {
    try {
      result = (Dali::Vector< unsigned char >::ItemType *) &(arg1)->operator [](arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUnsignedChar_PushBack(void * jarg1, unsigned char jarg2) {
  Dali::Vector< unsigned char > *arg1 = (Dali::Vector< unsigned char > *) 0 ;
  Dali::Vector< unsigned char >::ItemType *arg2 = 0 ;
  Dali::Vector< unsigned char >::ItemType temp2 ;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  temp2 = (Dali::Vector< unsigned char >::ItemType)jarg2;
  arg2 = &temp2;
  {
    try {
      (arg1)->PushBack((Dali::Vector< unsigned char >::ItemType const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUnsignedChar_Insert__SWIG_0(void * jarg1, unsigned char* jarg2, unsigned char jarg3) {
  Dali::Vector< unsigned char > *arg1 = (Dali::Vector< unsigned char > *) 0 ;
  Dali::Vector< unsigned char >::Iterator arg2 = (Dali::Vector< unsigned char >::Iterator) 0 ;
  Dali::Vector< unsigned char >::ItemType *arg3 = 0 ;
  Dali::Vector< unsigned char >::ItemType temp3 ;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  arg2 = jarg2;
  temp3 = (Dali::Vector< unsigned char >::ItemType)jarg3;
  arg3 = &temp3;
  {
    try {
      (arg1)->Insert(arg2,(Dali::Vector< unsigned char >::ItemType const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }



}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUnsignedChar_Insert__SWIG_1(void * jarg1, unsigned char* jarg2, void * jarg3, void * jarg4) {
  Dali::Vector< unsigned char > *arg1 = (Dali::Vector< unsigned char > *) 0 ;
  Dali::Vector< unsigned char >::Iterator arg2 = (Dali::Vector< unsigned char >::Iterator) 0 ;
  Dali::Vector< unsigned char >::Iterator arg3 = (Dali::Vector< unsigned char >::Iterator) 0 ;
  Dali::Vector< unsigned char >::Iterator arg4 = (Dali::Vector< unsigned char >::Iterator) 0 ;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  arg2 = jarg2;
  arg3 = (Dali::Vector< unsigned char >::Iterator)jarg3;
  arg4 = (Dali::Vector< unsigned char >::Iterator)jarg4;
  {
    try {
      (arg1)->Insert(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION();
  }



}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUnsignedChar_Reserve(void * jarg1, unsigned long jarg2) {
  Dali::Vector< unsigned char > *arg1 = (Dali::Vector< unsigned char > *) 0 ;
  Dali::Vector< unsigned char >::SizeType arg2 ;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  arg2 = (Dali::Vector< unsigned char >::SizeType)jarg2;
  {
    try {
      (arg1)->Reserve(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUnsignedChar_Resize__SWIG_0(void * jarg1, unsigned long jarg2) {
  Dali::Vector< unsigned char > *arg1 = (Dali::Vector< unsigned char > *) 0 ;
  Dali::Vector< unsigned char >::SizeType arg2 ;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  arg2 = (Dali::Vector< unsigned char >::SizeType)jarg2;
  {
    try {
      (arg1)->Resize(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUnsignedChar_Resize__SWIG_1(void * jarg1, unsigned long jarg2, unsigned char jarg3) {
  Dali::Vector< unsigned char > *arg1 = (Dali::Vector< unsigned char > *) 0 ;
  Dali::Vector< unsigned char >::SizeType arg2 ;
  Dali::Vector< unsigned char >::ItemType *arg3 = 0 ;
  Dali::Vector< unsigned char >::ItemType temp3 ;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  arg2 = (Dali::Vector< unsigned char >::SizeType)jarg2;
  temp3 = (Dali::Vector< unsigned char >::ItemType)jarg3;
  arg3 = &temp3;
  {
    try {
      (arg1)->Resize(arg2,(Dali::Vector< unsigned char >::ItemType const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorUnsignedChar_Erase__SWIG_0(void * jarg1, unsigned char* jarg2) {
  void * jresult ;
  Dali::Vector< unsigned char > *arg1 = (Dali::Vector< unsigned char > *) 0 ;
  Dali::Vector< unsigned char >::Iterator arg2 = (Dali::Vector< unsigned char >::Iterator) 0 ;
  Dali::Vector< unsigned char >::Iterator result;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  arg2 = jarg2;
  {
    try {
      result = (Dali::Vector< unsigned char >::Iterator)(arg1)->Erase(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;


  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorUnsignedChar_Erase__SWIG_1(void * jarg1, unsigned char* jarg2, void * jarg3) {
  void * jresult ;
  Dali::Vector< unsigned char > *arg1 = (Dali::Vector< unsigned char > *) 0 ;
  Dali::Vector< unsigned char >::Iterator arg2 = (Dali::Vector< unsigned char >::Iterator) 0 ;
  Dali::Vector< unsigned char >::Iterator arg3 = (Dali::Vector< unsigned char >::Iterator) 0 ;
  Dali::Vector< unsigned char >::Iterator result;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  arg2 = jarg2;
  arg3 = (Dali::Vector< unsigned char >::Iterator)jarg3;
  {
    try {
      result = (Dali::Vector< unsigned char >::Iterator)(arg1)->Erase(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;


  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUnsignedChar_Remove(void * jarg1, unsigned char* jarg2) {
  Dali::Vector< unsigned char > *arg1 = (Dali::Vector< unsigned char > *) 0 ;
  Dali::Vector< unsigned char >::Iterator arg2 = (Dali::Vector< unsigned char >::Iterator) 0 ;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  arg2 = jarg2;
  {
    try {
      (arg1)->Remove(arg2);
    } CALL_CATCH_EXCEPTION();
  }



}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUnsignedChar_Swap(void * jarg1, void * jarg2) {
  Dali::Vector< unsigned char > *arg1 = (Dali::Vector< unsigned char > *) 0 ;
  Dali::Vector< unsigned char > *arg2 = 0 ;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  arg2 = (Dali::Vector< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector< unsigned char > & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Swap(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUnsignedChar_Clear(void * jarg1) {
  Dali::Vector< unsigned char > *arg1 = (Dali::Vector< unsigned char > *) 0 ;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  {
    try {
      (arg1)->Clear();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUnsignedChar_Release(void * jarg1) {
  Dali::Vector< unsigned char > *arg1 = (Dali::Vector< unsigned char > *) 0 ;

  arg1 = (Dali::Vector< unsigned char > *)jarg1;
  {
    try {
      (arg1)->Release();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_VectorUint16Pair_BaseType_get() {
  int jresult ;
  int result;

  result = (int)Dali::Vector< Dali::Uint16Pair >::BaseType;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VectorUint16Pair__SWIG_0() {
  void * jresult ;
  Dali::Vector< Dali::Uint16Pair > *result = 0 ;

  {
    try {
      result = (Dali::Vector< Dali::Uint16Pair > *)new Dali::Vector< Dali::Uint16Pair >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_VectorUint16Pair(void * jarg1) {
  Dali::Vector< Dali::Uint16Pair > *arg1 = (Dali::Vector< Dali::Uint16Pair > *) 0 ;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VectorUint16Pair__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Vector< Dali::Uint16Pair > *arg1 = 0 ;
  Dali::Vector< Dali::Uint16Pair > *result = 0 ;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector< Dali::Uint16Pair > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector< Dali::Uint16Pair > *)new Dali::Vector< Dali::Uint16Pair >((Dali::Vector< Dali::Uint16Pair > const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorUint16Pair_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector< Dali::Uint16Pair > *arg1 = (Dali::Vector< Dali::Uint16Pair > *) 0 ;
  Dali::Vector< Dali::Uint16Pair > *arg2 = 0 ;
  Dali::Vector< Dali::Uint16Pair > *result = 0 ;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  arg2 = (Dali::Vector< Dali::Uint16Pair > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector< Dali::Uint16Pair > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Vector< Dali::Uint16Pair > *) &(arg1)->operator =((Dali::Vector< Dali::Uint16Pair > const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorUint16Pair_Begin(void * jarg1) {
  void * jresult ;
  Dali::Vector< Dali::Uint16Pair > *arg1 = (Dali::Vector< Dali::Uint16Pair > *) 0 ;
  Dali::Vector< Dali::Uint16Pair >::Iterator result;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  {
    try {
      result = (Dali::Vector< Dali::Uint16Pair >::Iterator)((Dali::Vector< Dali::Uint16Pair > const *)arg1)->Begin();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorUint16Pair_End(void * jarg1) {
  void * jresult ;
  Dali::Vector< Dali::Uint16Pair > *arg1 = (Dali::Vector< Dali::Uint16Pair > *) 0 ;
  Dali::Vector< Dali::Uint16Pair >::Iterator result;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  {
    try {
      result = (Dali::Vector< Dali::Uint16Pair >::Iterator)((Dali::Vector< Dali::Uint16Pair > const *)arg1)->End();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorUint16Pair_ValueOfIndex__SWIG_0(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::Vector< Dali::Uint16Pair > *arg1 = (Dali::Vector< Dali::Uint16Pair > *) 0 ;
  Dali::Vector< Dali::Uint16Pair >::SizeType arg2 ;
  Dali::Vector< Dali::Uint16Pair >::ItemType *result = 0 ;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  arg2 = (Dali::Vector< Dali::Uint16Pair >::SizeType)jarg2;
  {
    try {
      result = (Dali::Vector< Dali::Uint16Pair >::ItemType *) &(arg1)->operator [](arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUint16Pair_PushBack(void * jarg1, void * jarg2) {
  Dali::Vector< Dali::Uint16Pair > *arg1 = (Dali::Vector< Dali::Uint16Pair > *) 0 ;
  Dali::Vector< Dali::Uint16Pair >::ItemType *arg2 = 0 ;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  arg2 = (Dali::Vector< Dali::Uint16Pair >::ItemType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector< Dali::Uint16Pair >::ItemType const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->PushBack((Dali::Vector< Dali::Uint16Pair >::ItemType const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUint16Pair_Insert__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Vector< Dali::Uint16Pair > *arg1 = (Dali::Vector< Dali::Uint16Pair > *) 0 ;
  Dali::Vector< Dali::Uint16Pair >::Iterator arg2 = (Dali::Vector< Dali::Uint16Pair >::Iterator) 0 ;
  Dali::Vector< Dali::Uint16Pair >::ItemType *arg3 = 0 ;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  arg2 = (Dali::Vector< Dali::Uint16Pair >::Iterator)jarg2;
  arg3 = (Dali::Vector< Dali::Uint16Pair >::ItemType *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector< Dali::Uint16Pair >::ItemType const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Insert(arg2,(Dali::Vector< Dali::Uint16Pair >::ItemType const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUint16Pair_Insert__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Dali::Vector< Dali::Uint16Pair > *arg1 = (Dali::Vector< Dali::Uint16Pair > *) 0 ;
  Dali::Vector< Dali::Uint16Pair >::Iterator arg2 = (Dali::Vector< Dali::Uint16Pair >::Iterator) 0 ;
  Dali::Vector< Dali::Uint16Pair >::Iterator arg3 = (Dali::Vector< Dali::Uint16Pair >::Iterator) 0 ;
  Dali::Vector< Dali::Uint16Pair >::Iterator arg4 = (Dali::Vector< Dali::Uint16Pair >::Iterator) 0 ;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  arg2 = (Dali::Vector< Dali::Uint16Pair >::Iterator)jarg2;
  arg3 = (Dali::Vector< Dali::Uint16Pair >::Iterator)jarg3;
  arg4 = (Dali::Vector< Dali::Uint16Pair >::Iterator)jarg4;
  {
    try {
      (arg1)->Insert(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUint16Pair_Reserve(void * jarg1, unsigned long jarg2) {
  Dali::Vector< Dali::Uint16Pair > *arg1 = (Dali::Vector< Dali::Uint16Pair > *) 0 ;
  Dali::Vector< Dali::Uint16Pair >::SizeType arg2 ;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  arg2 = (Dali::Vector< Dali::Uint16Pair >::SizeType)jarg2;
  {
    try {
      (arg1)->Reserve(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUint16Pair_Resize__SWIG_0(void * jarg1, unsigned long jarg2) {
  Dali::Vector< Dali::Uint16Pair > *arg1 = (Dali::Vector< Dali::Uint16Pair > *) 0 ;
  Dali::Vector< Dali::Uint16Pair >::SizeType arg2 ;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  arg2 = (Dali::Vector< Dali::Uint16Pair >::SizeType)jarg2;
  {
    try {
      (arg1)->Resize(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUint16Pair_Resize__SWIG_1(void * jarg1, unsigned long jarg2, void * jarg3) {
  Dali::Vector< Dali::Uint16Pair > *arg1 = (Dali::Vector< Dali::Uint16Pair > *) 0 ;
  Dali::Vector< Dali::Uint16Pair >::SizeType arg2 ;
  Dali::Vector< Dali::Uint16Pair >::ItemType *arg3 = 0 ;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  arg2 = (Dali::Vector< Dali::Uint16Pair >::SizeType)jarg2;
  arg3 = (Dali::Vector< Dali::Uint16Pair >::ItemType *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector< Dali::Uint16Pair >::ItemType const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Resize(arg2,(Dali::Vector< Dali::Uint16Pair >::ItemType const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorUint16Pair_Erase__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector< Dali::Uint16Pair > *arg1 = (Dali::Vector< Dali::Uint16Pair > *) 0 ;
  Dali::Vector< Dali::Uint16Pair >::Iterator arg2 = (Dali::Vector< Dali::Uint16Pair >::Iterator) 0 ;
  Dali::Vector< Dali::Uint16Pair >::Iterator result;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  arg2 = (Dali::Vector< Dali::Uint16Pair >::Iterator)jarg2;
  {
    try {
      result = (Dali::Vector< Dali::Uint16Pair >::Iterator)(arg1)->Erase(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VectorUint16Pair_Erase__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Dali::Vector< Dali::Uint16Pair > *arg1 = (Dali::Vector< Dali::Uint16Pair > *) 0 ;
  Dali::Vector< Dali::Uint16Pair >::Iterator arg2 = (Dali::Vector< Dali::Uint16Pair >::Iterator) 0 ;
  Dali::Vector< Dali::Uint16Pair >::Iterator arg3 = (Dali::Vector< Dali::Uint16Pair >::Iterator) 0 ;
  Dali::Vector< Dali::Uint16Pair >::Iterator result;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  arg2 = (Dali::Vector< Dali::Uint16Pair >::Iterator)jarg2;
  arg3 = (Dali::Vector< Dali::Uint16Pair >::Iterator)jarg3;
  {
    try {
      result = (Dali::Vector< Dali::Uint16Pair >::Iterator)(arg1)->Erase(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUint16Pair_Remove(void * jarg1, void * jarg2) {
  Dali::Vector< Dali::Uint16Pair > *arg1 = (Dali::Vector< Dali::Uint16Pair > *) 0 ;
  Dali::Vector< Dali::Uint16Pair >::Iterator arg2 = (Dali::Vector< Dali::Uint16Pair >::Iterator) 0 ;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  arg2 = (Dali::Vector< Dali::Uint16Pair >::Iterator)jarg2;
  {
    try {
      (arg1)->Remove(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUint16Pair_Swap(void * jarg1, void * jarg2) {
  Dali::Vector< Dali::Uint16Pair > *arg1 = (Dali::Vector< Dali::Uint16Pair > *) 0 ;
  Dali::Vector< Dali::Uint16Pair > *arg2 = 0 ;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  arg2 = (Dali::Vector< Dali::Uint16Pair > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector< Dali::Uint16Pair > & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Swap(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUint16Pair_Clear(void * jarg1) {
  Dali::Vector< Dali::Uint16Pair > *arg1 = (Dali::Vector< Dali::Uint16Pair > *) 0 ;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  {
    try {
      (arg1)->Clear();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VectorUint16Pair_Release(void * jarg1) {
  Dali::Vector< Dali::Uint16Pair > *arg1 = (Dali::Vector< Dali::Uint16Pair > *) 0 ;

  arg1 = (Dali::Vector< Dali::Uint16Pair > *)jarg1;
  {
    try {
      (arg1)->Release();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VoidSignal() {
  void * jresult ;
  Dali::Signal< void () > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void () > *)new Dali::Signal< void () >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_VoidSignal(void * jarg1) {
  Dali::Signal< void () > *arg1 = (Dali::Signal< void () > *) 0 ;

  arg1 = (Dali::Signal< void () > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_VoidSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void () > *arg1 = (Dali::Signal< void () > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void () > *)jarg1;
  {
    try {
      result = (bool)((Dali::Signal< void () > const *)arg1)->Empty();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_VoidSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void () > *arg1 = (Dali::Signal< void () > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void () > *)jarg1;
  {
    try {
      result = ((Dali::Signal< void () > const *)arg1)->GetConnectionCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VoidSignal_Connect__SWIG_0(void * jarg1, void * jarg2) {
  Dali::Signal< void () > *arg1 = (Dali::Signal< void () > *) 0 ;
  void (*arg2)() = (void (*)()) 0 ;

  arg1 = (Dali::Signal< void () > *)jarg1;
  arg2 = (void (*)())jarg2;
  {
    try {
      (arg1)->Connect(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VoidSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void () > *arg1 = (Dali::Signal< void () > *) 0 ;
  void (*arg2)() = (void (*)()) 0 ;

  arg1 = (Dali::Signal< void () > *)jarg1;
  arg2 = (void (*)())jarg2;
  {
    try {
      (arg1)->Disconnect(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VoidSignal_Connect__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Signal< void () > *arg1 = (Dali::Signal< void () > *) 0 ;
  Dali::ConnectionTrackerInterface *arg2 = (Dali::ConnectionTrackerInterface *) 0 ;
  Dali::FunctorDelegate *arg3 = (Dali::FunctorDelegate *) 0 ;

  arg1 = (Dali::Signal< void () > *)jarg1;
  arg2 = (Dali::ConnectionTrackerInterface *)jarg2;
  arg3 = (Dali::FunctorDelegate *)jarg3;
  {
    try {
      (arg1)->Connect(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VoidSignal_Emit(void * jarg1) {
  Dali::Signal< void () > *arg1 = (Dali::Signal< void () > *) 0 ;

  arg1 = (Dali::Signal< void () > *)jarg1;
  {
    try {
      (arg1)->Emit();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_FloatSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (float) > *arg1 = (Dali::Signal< void (float) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (float) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_float_SP__Sg__Empty((Dali::Signal< void (float) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_FloatSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (float) > *arg1 = (Dali::Signal< void (float) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (float) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_float_SP__Sg__GetConnectionCount((Dali::Signal< void (float) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_FloatSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (float) > *arg1 = (Dali::Signal< void (float) > *) 0 ;
  void (*arg2)(float) = (void (*)(float)) 0 ;

  arg1 = (Dali::Signal< void (float) > *)jarg1;
  arg2 = (void (*)(float))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_float_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_FloatSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (float) > *arg1 = (Dali::Signal< void (float) > *) 0 ;
  void (*arg2)(float) = (void (*)(float)) 0 ;

  arg1 = (Dali::Signal< void (float) > *)jarg1;
  arg2 = (void (*)(float))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_float_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_FloatSignal_Emit(void * jarg1, float jarg2) {
  Dali::Signal< void (float) > *arg1 = (Dali::Signal< void (float) > *) 0 ;
  float arg2 ;

  arg1 = (Dali::Signal< void (float) > *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_float_SP__Sg__Emit(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_FloatSignal() {
  void * jresult ;
  Dali::Signal< void (float) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (float) > *)new Dali::Signal< void (float) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_FloatSignal(void * jarg1) {
  Dali::Signal< void (float) > *arg1 = (Dali::Signal< void (float) > *) 0 ;

  arg1 = (Dali::Signal< void (float) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ObjectCreatedSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::BaseHandle) > *arg1 = (Dali::Signal< void (Dali::BaseHandle) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::BaseHandle) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_BaseHandle_SP__Sg__Empty((Dali::Signal< void (Dali::BaseHandle) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ObjectCreatedSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::BaseHandle) > *arg1 = (Dali::Signal< void (Dali::BaseHandle) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::BaseHandle) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_BaseHandle_SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::BaseHandle) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ObjectCreatedSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::BaseHandle) > *arg1 = (Dali::Signal< void (Dali::BaseHandle) > *) 0 ;
  void (*arg2)(Dali::BaseHandle) = (void (*)(Dali::BaseHandle)) 0 ;

  arg1 = (Dali::Signal< void (Dali::BaseHandle) > *)jarg1;
  arg2 = (void (*)(Dali::BaseHandle))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_BaseHandle_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ObjectCreatedSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::BaseHandle) > *arg1 = (Dali::Signal< void (Dali::BaseHandle) > *) 0 ;
  void (*arg2)(Dali::BaseHandle) = (void (*)(Dali::BaseHandle)) 0 ;

  arg1 = (Dali::Signal< void (Dali::BaseHandle) > *)jarg1;
  arg2 = (void (*)(Dali::BaseHandle))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_BaseHandle_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ObjectCreatedSignal_Emit(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::BaseHandle) > *arg1 = (Dali::Signal< void (Dali::BaseHandle) > *) 0 ;
  Dali::BaseHandle arg2 ;
  Dali::BaseHandle *argp2 ;

  arg1 = (Dali::Signal< void (Dali::BaseHandle) > *)jarg1;
  argp2 = (Dali::BaseHandle *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_BaseHandle_SP__Sg__Emit(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ObjectCreatedSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::BaseHandle) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::BaseHandle) > *)new Dali::Signal< void (Dali::BaseHandle) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ObjectCreatedSignal(void * jarg1) {
  Dali::Signal< void (Dali::BaseHandle) > *arg1 = (Dali::Signal< void (Dali::BaseHandle) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::BaseHandle) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ObjectDestroyedSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::RefObject const *) > *arg1 = (Dali::Signal< void (Dali::RefObject const *) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::RefObject const *) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_RefObject_SS_const_Sm__SP__Sg__Empty((Dali::Signal< void (Dali::RefObject const *) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ObjectDestroyedSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::RefObject const *) > *arg1 = (Dali::Signal< void (Dali::RefObject const *) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::RefObject const *) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_RefObject_SS_const_Sm__SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::RefObject const *) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ObjectDestroyedSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::RefObject const *) > *arg1 = (Dali::Signal< void (Dali::RefObject const *) > *) 0 ;
  void (*arg2)(Dali::RefObject const *) = (void (*)(Dali::RefObject const *)) 0 ;

  arg1 = (Dali::Signal< void (Dali::RefObject const *) > *)jarg1;
  arg2 = (void (*)(Dali::RefObject const *))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_RefObject_SS_const_Sm__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ObjectDestroyedSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::RefObject const *) > *arg1 = (Dali::Signal< void (Dali::RefObject const *) > *) 0 ;
  void (*arg2)(Dali::RefObject const *) = (void (*)(Dali::RefObject const *)) 0 ;

  arg1 = (Dali::Signal< void (Dali::RefObject const *) > *)jarg1;
  arg2 = (void (*)(Dali::RefObject const *))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_RefObject_SS_const_Sm__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ObjectDestroyedSignal_Emit(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::RefObject const *) > *arg1 = (Dali::Signal< void (Dali::RefObject const *) > *) 0 ;
  Dali::RefObject *arg2 = (Dali::RefObject *) 0 ;

  arg1 = (Dali::Signal< void (Dali::RefObject const *) > *)jarg1;
  arg2 = (Dali::RefObject *)jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_RefObject_SS_const_Sm__SP__Sg__Emit(arg1,(Dali::RefObject const *)arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ObjectDestroyedSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::RefObject const *) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::RefObject const *) > *)new Dali::Signal< void (Dali::RefObject const *) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ObjectDestroyedSignal(void * jarg1) {
  Dali::Signal< void (Dali::RefObject const *) > *arg1 = (Dali::Signal< void (Dali::RefObject const *) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::RefObject const *) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_PropertyNotifySignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::PropertyNotification &) > *arg1 = (Dali::Signal< void (Dali::PropertyNotification &) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::PropertyNotification &) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_PropertyNotification_SA__SP__Sg__Empty((Dali::Signal< void (Dali::PropertyNotification &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_PropertyNotifySignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::PropertyNotification &) > *arg1 = (Dali::Signal< void (Dali::PropertyNotification &) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::PropertyNotification &) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_PropertyNotification_SA__SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::PropertyNotification &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PropertyNotifySignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::PropertyNotification &) > *arg1 = (Dali::Signal< void (Dali::PropertyNotification &) > *) 0 ;
  void (*arg2)(Dali::PropertyNotification &) = (void (*)(Dali::PropertyNotification &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::PropertyNotification &) > *)jarg1;
  arg2 = (void (*)(Dali::PropertyNotification &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_PropertyNotification_SA__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PropertyNotifySignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::PropertyNotification &) > *arg1 = (Dali::Signal< void (Dali::PropertyNotification &) > *) 0 ;
  void (*arg2)(Dali::PropertyNotification &) = (void (*)(Dali::PropertyNotification &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::PropertyNotification &) > *)jarg1;
  arg2 = (void (*)(Dali::PropertyNotification &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_PropertyNotification_SA__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PropertyNotifySignal_Emit(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::PropertyNotification &) > *arg1 = (Dali::Signal< void (Dali::PropertyNotification &) > *) 0 ;
  Dali::PropertyNotification *arg2 = 0 ;

  arg1 = (Dali::Signal< void (Dali::PropertyNotification &) > *)jarg1;
  arg2 = (Dali::PropertyNotification *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PropertyNotification & type is null", 0);
    return ;
  }
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_PropertyNotification_SA__SP__Sg__Emit(arg1,*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PropertyNotifySignal() {
  void * jresult ;
  Dali::Signal< void (Dali::PropertyNotification &) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::PropertyNotification &) > *)new Dali::Signal< void (Dali::PropertyNotification &) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PropertyNotifySignal(void * jarg1) {
  Dali::Signal< void (Dali::PropertyNotification &) > *arg1 = (Dali::Signal< void (Dali::PropertyNotification &) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::PropertyNotification &) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_RenderTaskSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::RenderTask &) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::RenderTask &) > *)new Dali::Signal< void (Dali::RenderTask &) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_RenderTaskSignal(void * jarg1) {
  Dali::Signal< void (Dali::RenderTask &) > *arg1 = (Dali::Signal< void (Dali::RenderTask &) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::RenderTask &) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_LongPressGestureDetectedSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_LongPressGesture_SS_const_SA__SP__Sg__Empty((Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_LongPressGestureDetectedSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_LongPressGesture_SS_const_SA__SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_LongPressGestureDetectedSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *) 0 ;
  void (*arg2)(Dali::Actor,Dali::LongPressGesture const &) = (void (*)(Dali::Actor,Dali::LongPressGesture const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *)jarg1;
  arg2 = (void (*)(Dali::Actor,Dali::LongPressGesture const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_LongPressGesture_SS_const_SA__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_LongPressGestureDetectedSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *) 0 ;
  void (*arg2)(Dali::Actor,Dali::LongPressGesture const &) = (void (*)(Dali::Actor,Dali::LongPressGesture const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *)jarg1;
  arg2 = (void (*)(Dali::Actor,Dali::LongPressGesture const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_LongPressGesture_SS_const_SA__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_LongPressGestureDetectedSignal_Emit(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *) 0 ;
  Dali::Actor arg2 ;
  Dali::LongPressGesture *arg3 = 0 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (Dali::LongPressGesture *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::LongPressGesture const & type is null", 0);
    return ;
  }
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_LongPressGesture_SS_const_SA__SP__Sg__Emit(arg1,arg2,(Dali::LongPressGesture const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_LongPressGestureDetectedSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *)new Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_LongPressGestureDetectedSignal(void * jarg1) {
  Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::LongPressGesture const &) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ActorTouchDataSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_TouchEvent_SS_const_SA__SP__Sg__Empty((Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ActorTouchDataSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_TouchEvent_SS_const_SA__SP__Sg__GetConnectionCount((Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorTouchDataSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *) 0 ;
  bool (*arg2)(Dali::Actor,Dali::TouchEvent const &) = (bool (*)(Dali::Actor,Dali::TouchEvent const &)) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *)jarg1;
  arg2 = (bool (*)(Dali::Actor,Dali::TouchEvent const &))jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_TouchEvent_SS_const_SA__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorTouchDataSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *) 0 ;
  bool (*arg2)(Dali::Actor,Dali::TouchEvent const &) = (bool (*)(Dali::Actor,Dali::TouchEvent const &)) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *)jarg1;
  arg2 = (bool (*)(Dali::Actor,Dali::TouchEvent const &))jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_TouchEvent_SS_const_SA__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ActorTouchDataSignal_Emit(void * jarg1, void * jarg2, void * jarg3) {
  bool jresult ;
  Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *) 0 ;
  Dali::Actor arg2 ;
  Dali::TouchEvent *arg3 = 0 ;
  Dali::Actor *argp2 ;
  bool result;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::TouchEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TouchEvent const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_TouchEvent_SS_const_SA__SP__Sg__Emit(arg1,arg2,(Dali::TouchEvent const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ActorTouchDataSignal() {
  void * jresult ;
  Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *)new Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ActorTouchDataSignal(void * jarg1) {
  Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::TouchEvent const &) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ActorHoverSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_HoverEvent_SS_const_SA__SP__Sg__Empty((Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ActorHoverSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_HoverEvent_SS_const_SA__SP__Sg__GetConnectionCount((Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorHoverSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *) 0 ;
  bool (*arg2)(Dali::Actor,Dali::HoverEvent const &) = (bool (*)(Dali::Actor,Dali::HoverEvent const &)) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *)jarg1;
  arg2 = (bool (*)(Dali::Actor,Dali::HoverEvent const &))jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_HoverEvent_SS_const_SA__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorHoverSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *) 0 ;
  bool (*arg2)(Dali::Actor,Dali::HoverEvent const &) = (bool (*)(Dali::Actor,Dali::HoverEvent const &)) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *)jarg1;
  arg2 = (bool (*)(Dali::Actor,Dali::HoverEvent const &))jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_HoverEvent_SS_const_SA__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ActorHoverSignal_Emit(void * jarg1, void * jarg2, void * jarg3) {
  bool jresult ;
  Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *) 0 ;
  Dali::Actor arg2 ;
  Dali::HoverEvent *arg3 = 0 ;
  Dali::Actor *argp2 ;
  bool result;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::HoverEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::HoverEvent const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_HoverEvent_SS_const_SA__SP__Sg__Emit(arg1,arg2,(Dali::HoverEvent const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ActorHoverSignal() {
  void * jresult ;
  Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *)new Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ActorHoverSignal(void * jarg1) {
  Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::HoverEvent const &) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ActorWheelSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_WheelEvent_SS_const_SA__SP__Sg__Empty((Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ActorWheelSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_WheelEvent_SS_const_SA__SP__Sg__GetConnectionCount((Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorWheelSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *) 0 ;
  bool (*arg2)(Dali::Actor,Dali::WheelEvent const &) = (bool (*)(Dali::Actor,Dali::WheelEvent const &)) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *)jarg1;
  arg2 = (bool (*)(Dali::Actor,Dali::WheelEvent const &))jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_WheelEvent_SS_const_SA__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorWheelSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *) 0 ;
  bool (*arg2)(Dali::Actor,Dali::WheelEvent const &) = (bool (*)(Dali::Actor,Dali::WheelEvent const &)) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *)jarg1;
  arg2 = (bool (*)(Dali::Actor,Dali::WheelEvent const &))jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_WheelEvent_SS_const_SA__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ActorWheelSignal_Emit(void * jarg1, void * jarg2, void * jarg3) {
  bool jresult ;
  Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *) 0 ;
  Dali::Actor arg2 ;
  Dali::WheelEvent *arg3 = 0 ;
  Dali::Actor *argp2 ;
  bool result;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::WheelEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::WheelEvent const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp_Dali_Actor_Sc_Dali_WheelEvent_SS_const_SA__SP__Sg__Emit(arg1,arg2,(Dali::WheelEvent const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ActorWheelSignal() {
  void * jresult ;
  Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *)new Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ActorWheelSignal(void * jarg1) {
  Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Actor,Dali::WheelEvent const &) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ActorSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Actor) > *arg1 = (Dali::Signal< void (Dali::Actor) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Actor) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Actor_SP__Sg__Empty((Dali::Signal< void (Dali::Actor) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ActorSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Actor) > *arg1 = (Dali::Signal< void (Dali::Actor) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Actor) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Actor_SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Actor) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor) > *arg1 = (Dali::Signal< void (Dali::Actor) > *) 0 ;
  void (*arg2)(Dali::Actor) = (void (*)(Dali::Actor)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor) > *)jarg1;
  arg2 = (void (*)(Dali::Actor))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor) > *arg1 = (Dali::Signal< void (Dali::Actor) > *) 0 ;
  void (*arg2)(Dali::Actor) = (void (*)(Dali::Actor)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor) > *)jarg1;
  arg2 = (void (*)(Dali::Actor))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorSignal_Emit(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor) > *arg1 = (Dali::Signal< void (Dali::Actor) > *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Signal< void (Dali::Actor) > *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_SP__Sg__Emit(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ActorSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Actor) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Actor) > *)new Dali::Signal< void (Dali::Actor) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ActorSignal(void * jarg1) {
  Dali::Signal< void (Dali::Actor) > *arg1 = (Dali::Signal< void (Dali::Actor) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_KeyEventSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::KeyEvent const &) > *arg1 = (Dali::Signal< void (Dali::KeyEvent const &) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::KeyEvent const &) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_KeyEvent_SS_const_SA__SP__Sg__Empty((Dali::Signal< void (Dali::KeyEvent const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_KeyEventSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::KeyEvent const &) > *arg1 = (Dali::Signal< void (Dali::KeyEvent const &) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::KeyEvent const &) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_KeyEvent_SS_const_SA__SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::KeyEvent const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_KeyEventSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::KeyEvent const &) > *arg1 = (Dali::Signal< void (Dali::KeyEvent const &) > *) 0 ;
  void (*arg2)(Dali::KeyEvent const &) = (void (*)(Dali::KeyEvent const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::KeyEvent const &) > *)jarg1;
  arg2 = (void (*)(Dali::KeyEvent const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_KeyEvent_SS_const_SA__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_KeyEventSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::KeyEvent const &) > *arg1 = (Dali::Signal< void (Dali::KeyEvent const &) > *) 0 ;
  void (*arg2)(Dali::KeyEvent const &) = (void (*)(Dali::KeyEvent const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::KeyEvent const &) > *)jarg1;
  arg2 = (void (*)(Dali::KeyEvent const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_KeyEvent_SS_const_SA__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_KeyEventSignal_Emit(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::KeyEvent const &) > *arg1 = (Dali::Signal< void (Dali::KeyEvent const &) > *) 0 ;
  Dali::KeyEvent *arg2 = 0 ;

  arg1 = (Dali::Signal< void (Dali::KeyEvent const &) > *)jarg1;
  arg2 = (Dali::KeyEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::KeyEvent const & type is null", 0);
    return ;
  }
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_KeyEvent_SS_const_SA__SP__Sg__Emit(arg1,(Dali::KeyEvent const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_KeyEventSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::KeyEvent const &) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::KeyEvent const &) > *)new Dali::Signal< void (Dali::KeyEvent const &) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_KeyEventSignal(void * jarg1) {
  Dali::Signal< void (Dali::KeyEvent const &) > *arg1 = (Dali::Signal< void (Dali::KeyEvent const &) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::KeyEvent const &) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_TouchSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::TouchEvent const &) > *arg1 = (Dali::Signal< void (Dali::TouchEvent const &) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::TouchEvent const &) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_TouchEvent_SS_const_SA__SP__Sg__Empty((Dali::Signal< void (Dali::TouchEvent const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_TouchSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::TouchEvent const &) > *arg1 = (Dali::Signal< void (Dali::TouchEvent const &) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::TouchEvent const &) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_TouchEvent_SS_const_SA__SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::TouchEvent const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::TouchEvent const &) > *arg1 = (Dali::Signal< void (Dali::TouchEvent const &) > *) 0 ;
  void (*arg2)(Dali::TouchEvent const &) = (void (*)(Dali::TouchEvent const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::TouchEvent const &) > *)jarg1;
  arg2 = (void (*)(Dali::TouchEvent const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_TouchEvent_SS_const_SA__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::TouchEvent const &) > *arg1 = (Dali::Signal< void (Dali::TouchEvent const &) > *) 0 ;
  void (*arg2)(Dali::TouchEvent const &) = (void (*)(Dali::TouchEvent const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::TouchEvent const &) > *)jarg1;
  arg2 = (void (*)(Dali::TouchEvent const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_TouchEvent_SS_const_SA__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TouchSignal_Emit(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::TouchEvent const &) > *arg1 = (Dali::Signal< void (Dali::TouchEvent const &) > *) 0 ;
  Dali::TouchEvent *arg2 = 0 ;

  arg1 = (Dali::Signal< void (Dali::TouchEvent const &) > *)jarg1;
  arg2 = (Dali::TouchEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TouchEvent const & type is null", 0);
    return ;
  }
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_TouchEvent_SS_const_SA__SP__Sg__Emit(arg1,(Dali::TouchEvent const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TouchSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::TouchEvent const &) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::TouchEvent const &) > *)new Dali::Signal< void (Dali::TouchEvent const &) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TouchSignal(void * jarg1) {
  Dali::Signal< void (Dali::TouchEvent const &) > *arg1 = (Dali::Signal< void (Dali::TouchEvent const &) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::TouchEvent const &) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_StageWheelSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::WheelEvent const &) > *arg1 = (Dali::Signal< void (Dali::WheelEvent const &) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::WheelEvent const &) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_WheelEvent_SS_const_SA__SP__Sg__Empty((Dali::Signal< void (Dali::WheelEvent const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_StageWheelSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::WheelEvent const &) > *arg1 = (Dali::Signal< void (Dali::WheelEvent const &) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::WheelEvent const &) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_WheelEvent_SS_const_SA__SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::WheelEvent const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_StageWheelSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::WheelEvent const &) > *arg1 = (Dali::Signal< void (Dali::WheelEvent const &) > *) 0 ;
  void (*arg2)(Dali::WheelEvent const &) = (void (*)(Dali::WheelEvent const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::WheelEvent const &) > *)jarg1;
  arg2 = (void (*)(Dali::WheelEvent const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_WheelEvent_SS_const_SA__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_StageWheelSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::WheelEvent const &) > *arg1 = (Dali::Signal< void (Dali::WheelEvent const &) > *) 0 ;
  void (*arg2)(Dali::WheelEvent const &) = (void (*)(Dali::WheelEvent const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::WheelEvent const &) > *)jarg1;
  arg2 = (void (*)(Dali::WheelEvent const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_WheelEvent_SS_const_SA__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_StageWheelSignal_Emit(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::WheelEvent const &) > *arg1 = (Dali::Signal< void (Dali::WheelEvent const &) > *) 0 ;
  Dali::WheelEvent *arg2 = 0 ;

  arg1 = (Dali::Signal< void (Dali::WheelEvent const &) > *)jarg1;
  arg2 = (Dali::WheelEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::WheelEvent const & type is null", 0);
    return ;
  }
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_WheelEvent_SS_const_SA__SP__Sg__Emit(arg1,(Dali::WheelEvent const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_StageWheelSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::WheelEvent const &) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::WheelEvent const &) > *)new Dali::Signal< void (Dali::WheelEvent const &) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_StageWheelSignal(void * jarg1) {
  Dali::Signal< void (Dali::WheelEvent const &) > *arg1 = (Dali::Signal< void (Dali::WheelEvent const &) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::WheelEvent const &) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_AngleThresholdPair__SWIG_0() {
  void * jresult ;
  std::pair< Dali::Radian,Dali::Radian > *result = 0 ;

  {
    try {
      result = (std::pair< Dali::Radian,Dali::Radian > *)new std::pair< Dali::Radian,Dali::Radian >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_AngleThresholdPair__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Radian arg1 ;
  Dali::Radian arg2 ;
  Dali::Radian *argp1 ;
  Dali::Radian *argp2 ;
  std::pair< Dali::Radian,Dali::Radian > *result = 0 ;

  argp1 = (Dali::Radian *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg1 = *argp1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (std::pair< Dali::Radian,Dali::Radian > *)new std::pair< Dali::Radian,Dali::Radian >(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_AngleThresholdPair__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< Dali::Radian,Dali::Radian > *arg1 = 0 ;
  std::pair< Dali::Radian,Dali::Radian > *result = 0 ;

  arg1 = (std::pair< Dali::Radian,Dali::Radian > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< Dali::Radian,Dali::Radian > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (std::pair< Dali::Radian,Dali::Radian > *)new std::pair< Dali::Radian,Dali::Radian >((std::pair< Dali::Radian,Dali::Radian > const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AngleThresholdPair_first_set(void * jarg1, void * jarg2) {
  std::pair< Dali::Radian,Dali::Radian > *arg1 = (std::pair< Dali::Radian,Dali::Radian > *) 0 ;
  Dali::Radian *arg2 = (Dali::Radian *) 0 ;

  arg1 = (std::pair< Dali::Radian,Dali::Radian > *)jarg1;
  arg2 = (Dali::Radian *)jarg2;
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AngleThresholdPair_first_get(void * jarg1) {
  void * jresult ;
  std::pair< Dali::Radian,Dali::Radian > *arg1 = (std::pair< Dali::Radian,Dali::Radian > *) 0 ;
  Dali::Radian *result = 0 ;

  arg1 = (std::pair< Dali::Radian,Dali::Radian > *)jarg1;
  result = (Dali::Radian *)& ((arg1)->first);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AngleThresholdPair_second_set(void * jarg1, void * jarg2) {
  std::pair< Dali::Radian,Dali::Radian > *arg1 = (std::pair< Dali::Radian,Dali::Radian > *) 0 ;
  Dali::Radian *arg2 = (Dali::Radian *) 0 ;

  arg1 = (std::pair< Dali::Radian,Dali::Radian > *)jarg1;
  arg2 = (Dali::Radian *)jarg2;
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AngleThresholdPair_second_get(void * jarg1) {
  void * jresult ;
  std::pair< Dali::Radian,Dali::Radian > *arg1 = (std::pair< Dali::Radian,Dali::Radian > *) 0 ;
  Dali::Radian *result = 0 ;

  arg1 = (std::pair< Dali::Radian,Dali::Radian > *)jarg1;
  result = (Dali::Radian *)& ((arg1)->second);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_AngleThresholdPair(void * jarg1) {
  std::pair< Dali::Radian,Dali::Radian > *arg1 = (std::pair< Dali::Radian,Dali::Radian > *) 0 ;

  arg1 = (std::pair< Dali::Radian,Dali::Radian > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_PanGestureDetectedSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PanGesture_SS_const_SA__SP__Sg__Empty((Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_PanGestureDetectedSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PanGesture_SS_const_SA__SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PanGestureDetectedSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *) 0 ;
  void (*arg2)(Dali::Actor,Dali::PanGesture const &) = (void (*)(Dali::Actor,Dali::PanGesture const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *)jarg1;
  arg2 = (void (*)(Dali::Actor,Dali::PanGesture const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PanGesture_SS_const_SA__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PanGestureDetectedSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *) 0 ;
  void (*arg2)(Dali::Actor,Dali::PanGesture const &) = (void (*)(Dali::Actor,Dali::PanGesture const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *)jarg1;
  arg2 = (void (*)(Dali::Actor,Dali::PanGesture const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PanGesture_SS_const_SA__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PanGestureDetectedSignal_Emit(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *) 0 ;
  Dali::Actor arg2 ;
  Dali::PanGesture *arg3 = 0 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (Dali::PanGesture *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PanGesture const & type is null", 0);
    return ;
  }
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PanGesture_SS_const_SA__SP__Sg__Emit(arg1,arg2,(Dali::PanGesture const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PanGestureDetectedSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *)new Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PanGestureDetectedSignal(void * jarg1) {
  Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::PanGesture const &) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_PinchGestureDetectedSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PinchGesture_SS_const_SA__SP__Sg__Empty((Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_PinchGestureDetectedSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PinchGesture_SS_const_SA__SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PinchGestureDetectedSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *) 0 ;
  void (*arg2)(Dali::Actor,Dali::PinchGesture const &) = (void (*)(Dali::Actor,Dali::PinchGesture const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *)jarg1;
  arg2 = (void (*)(Dali::Actor,Dali::PinchGesture const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PinchGesture_SS_const_SA__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PinchGestureDetectedSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *) 0 ;
  void (*arg2)(Dali::Actor,Dali::PinchGesture const &) = (void (*)(Dali::Actor,Dali::PinchGesture const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *)jarg1;
  arg2 = (void (*)(Dali::Actor,Dali::PinchGesture const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PinchGesture_SS_const_SA__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PinchGestureDetectedSignal_Emit(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *) 0 ;
  Dali::Actor arg2 ;
  Dali::PinchGesture *arg3 = 0 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (Dali::PinchGesture *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PinchGesture const & type is null", 0);
    return ;
  }
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_PinchGesture_SS_const_SA__SP__Sg__Emit(arg1,arg2,(Dali::PinchGesture const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PinchGestureDetectedSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *)new Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PinchGestureDetectedSignal(void * jarg1) {
  Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::PinchGesture const &) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_TapGestureDetectedSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_TapGesture_SS_const_SA__SP__Sg__Empty((Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_TapGestureDetectedSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_TapGesture_SS_const_SA__SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TapGestureDetectedSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *) 0 ;
  void (*arg2)(Dali::Actor,Dali::TapGesture const &) = (void (*)(Dali::Actor,Dali::TapGesture const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *)jarg1;
  arg2 = (void (*)(Dali::Actor,Dali::TapGesture const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_TapGesture_SS_const_SA__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TapGestureDetectedSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *) 0 ;
  void (*arg2)(Dali::Actor,Dali::TapGesture const &) = (void (*)(Dali::Actor,Dali::TapGesture const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *)jarg1;
  arg2 = (void (*)(Dali::Actor,Dali::TapGesture const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_TapGesture_SS_const_SA__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TapGestureDetectedSignal_Emit(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *) 0 ;
  Dali::Actor arg2 ;
  Dali::TapGesture *arg3 = 0 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (Dali::TapGesture *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TapGesture const & type is null", 0);
    return ;
  }
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_TapGesture_SS_const_SA__SP__Sg__Emit(arg1,arg2,(Dali::TapGesture const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TapGestureDetectedSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *)new Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TapGestureDetectedSignal(void * jarg1) {
  Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::TapGesture const &) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewLayoutDirectionChangedSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *arg1 = (Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *) 0 ;
  bool result = false;

  arg1 = (Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_LayoutDirection_Type_SP__Sg__Empty((Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = result;
  return jresult;
}

SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ViewLayoutDirectionSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *arg1 = (Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *) 0 ;
  std::size_t result = 0;

  arg1 = (Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_LayoutDirection_Type_SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > const *)arg1);
    }CALL_CATCH_EXCEPTION(0);
  }
  jresult = (unsigned long)result;
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewLayoutDirectionSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *arg1 = (Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *) 0 ;
  void (*arg2)(Dali::Actor, Dali::LayoutDirection::Type) = (void (*)(Dali::Actor, Dali::LayoutDirection::Type)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *)jarg1;
  arg2 = (void (*)(Dali::Actor, Dali::LayoutDirection::Type))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_LayoutDirection_Type_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewLayoutDirectionSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *arg1 = (Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *) 0 ;
  void (*arg2)(Dali::Actor, Dali::LayoutDirection::Type) = (void (*)(Dali::Actor, Dali::LayoutDirection::Type)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *)jarg1;
  arg2 = (void (*)(Dali::Actor, Dali::LayoutDirection::Type))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_LayoutDirection_Type_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewLayoutDirectionSignal_Emit(void * jarg1, void * jarg2, int jarg4) {
  Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *arg1 = (Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *) 0 ;
  Dali::Actor arg2 ;
  //bool arg3 ;
  Dali::LayoutDirection::Type arg4 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  //arg3 = jarg3 ? true : false;
  arg4 = (Dali::LayoutDirection::Type)jarg4;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_LayoutDirection_Type_SP__Sg__Emit(arg1,arg2,arg4);
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ViewLayoutDirectionSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *)new Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) >();
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = (void *)result;
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ViewLayoutDirectionSignal(void * jarg1) {
  Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *arg1 = (Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor, Dali::LayoutDirection::Type) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewVisibilityChangedSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *arg1 = (Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *) 0 ;
  bool result = false;

  arg1 = (Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_VisibilityChange_Type_SP__Sg__Empty((Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ViewVisibilityChangedSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *arg1 = (Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_VisibilityChange_Type_SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewVisibilityChangedSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *arg1 = (Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *) 0 ;
  void (*arg2)(Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) = (void (*)(Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *)jarg1;
  arg2 = (void (*)(Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_VisibilityChange_Type_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewVisibilityChangedSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *arg1 = (Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *) 0 ;
  void (*arg2)(Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) = (void (*)(Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *)jarg1;
  arg2 = (void (*)(Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_VisibilityChange_Type_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewVisibilityChangedSignal_Emit(void * jarg1, void * jarg2, bool jarg3, int jarg4) {
  Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *arg1 = (Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *) 0 ;
  Dali::Actor arg2 ;
  bool arg3 ;
  Dali::DevelActor::VisibilityChange::Type arg4 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = jarg3 ? true : false;
  arg4 = (Dali::DevelActor::VisibilityChange::Type)jarg4;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_Sc_Dali_DevelActor_VisibilityChange_Type_SP__Sg__Emit(arg1,arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ViewVisibilityChangedSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *)new Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ViewVisibilityChangedSignal(void * jarg1) {
  Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *arg1 = (Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,bool,Dali::DevelActor::VisibilityChange::Type) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Timer__SWIG_0() {
  void * jresult ;
  Dali::Timer *result = 0 ;

  {
    try {
      result = (Dali::Timer *)new Dali::Timer();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Timer_New(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  Dali::Timer result;

  arg1 = (unsigned int)jarg1;
  {
    try {
      result = Dali::Timer::New(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Timer((const Dali::Timer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Timer__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Timer *arg1 = 0 ;
  Dali::Timer *result = 0 ;

  arg1 = (Dali::Timer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Timer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Timer *)new Dali::Timer((Dali::Timer const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Timer_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Timer *arg1 = (Dali::Timer *) 0 ;
  Dali::Timer *arg2 = 0 ;
  Dali::Timer *result = 0 ;

  arg1 = (Dali::Timer *)jarg1;
  arg2 = (Dali::Timer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Timer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Timer *) &(arg1)->operator =((Dali::Timer const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Timer(void * jarg1) {
  Dali::Timer *arg1 = (Dali::Timer *) 0 ;

  arg1 = (Dali::Timer *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Timer_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Timer result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Timer::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Timer((const Dali::Timer &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Timer_Start(void * jarg1) {
  Dali::Timer *arg1 = (Dali::Timer *) 0 ;

  arg1 = (Dali::Timer *)jarg1;
  {
    try {
      (arg1)->Start();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Timer_Stop(void * jarg1) {
  Dali::Timer *arg1 = (Dali::Timer *) 0 ;

  arg1 = (Dali::Timer *)jarg1;
  {
    try {
      (arg1)->Stop();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Timer_SetInterval(void * jarg1, unsigned int jarg2) {
  Dali::Timer *arg1 = (Dali::Timer *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::Timer *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      (arg1)->SetInterval(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_Timer_GetInterval(void * jarg1) {
  unsigned int jresult ;
  Dali::Timer *arg1 = (Dali::Timer *) 0 ;
  unsigned int result;

  arg1 = (Dali::Timer *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::Timer const *)arg1)->GetInterval();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Timer_IsRunning(void * jarg1) {
  bool jresult ;
  Dali::Timer *arg1 = (Dali::Timer *) 0 ;
  bool result;

  arg1 = (Dali::Timer *)jarg1;
  {
    try {
      result = (bool)((Dali::Timer const *)arg1)->IsRunning();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Timer_TickSignal(void * jarg1) {
  void * jresult ;
  Dali::Timer *arg1 = (Dali::Timer *) 0 ;
  Dali::Timer::TimerSignalType *result = 0 ;

  arg1 = (Dali::Timer *)jarg1;
  {
    try {
      result = (Dali::Timer::TimerSignalType *) &(arg1)->TickSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_TimerSignalType_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< bool () > *arg1 = (Dali::Signal< bool () > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< bool () > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp__SP__Sg__Empty((Dali::Signal< bool () > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_TimerSignalType_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< bool () > *arg1 = (Dali::Signal< bool () > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< bool () > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_bool_Sp__SP__Sg__GetConnectionCount((Dali::Signal< bool () > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TimerSignalType_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< bool () > *arg1 = (Dali::Signal< bool () > *) 0 ;
  bool (*arg2)() = (bool (*)()) 0 ;

  arg1 = (Dali::Signal< bool () > *)jarg1;
  arg2 = (bool (*)())jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TimerSignalType_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< bool () > *arg1 = (Dali::Signal< bool () > *) 0 ;
  bool (*arg2)() = (bool (*)()) 0 ;

  arg1 = (Dali::Signal< bool () > *)jarg1;
  arg2 = (bool (*)())jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_TimerSignalType_Emit(void * jarg1) {
  bool jresult ;
  Dali::Signal< bool () > *arg1 = (Dali::Signal< bool () > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< bool () > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp__SP__Sg__Emit(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TimerSignalType() {
  void * jresult ;
  Dali::Signal< bool () > *result = 0 ;

  {
    try {
      result = (Dali::Signal< bool () > *)new Dali::Signal< bool () >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TimerSignalType(void * jarg1) {
  Dali::Signal< bool () > *arg1 = (Dali::Signal< bool () > *) 0 ;

  arg1 = (Dali::Signal< bool () > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_VISUAL_PROPERTY_TYPE_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Visual::Property::TYPE;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_VISUAL_PROPERTY_SHADER_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Visual::Property::SHADER;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_VISUAL_SHADER_VERTEX_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Visual::Shader::Property::VERTEX_SHADER;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_VISUAL_SHADER_FRAGMENT_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Visual::Shader::Property::FRAGMENT_SHADER;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_VISUAL_SHADER_SUBDIVIDE_GRID_X_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Visual::Shader::Property::SUBDIVIDE_GRID_X;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_VISUAL_SHADER_SUBDIVIDE_GRID_Y_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Visual::Shader::Property::SUBDIVIDE_GRID_Y;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_VISUAL_SHADER_HINTS_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Visual::Shader::Property::HINTS;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_BORDER_VISUAL_COLOR_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::BorderVisual::Property::COLOR;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_BORDER_VISUAL_SIZE_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::BorderVisual::Property::SIZE;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_BORDER_VISUAL_ANTI_ALIASING_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::BorderVisual::Property::ANTI_ALIASING;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_COLOR_VISUAL_MIX_COLOR_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::ColorVisual::Property::MIX_COLOR;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_GRADIENT_VISUAL_START_POSITION_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::GradientVisual::Property::START_POSITION;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_GRADIENT_VISUAL_END_POSITION_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::GradientVisual::Property::END_POSITION;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_GRADIENT_VISUAL_CENTER_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::GradientVisual::Property::CENTER;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_GRADIENT_VISUAL_RADIUS_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::GradientVisual::Property::RADIUS;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_GRADIENT_VISUAL_STOP_OFFSET_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::GradientVisual::Property::STOP_OFFSET;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_GRADIENT_VISUAL_STOP_COLOR_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::GradientVisual::Property::STOP_COLOR;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_GRADIENT_VISUAL_UNITS_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::GradientVisual::Property::UNITS;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_GRADIENT_VISUAL_SPREAD_METHOD_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::GradientVisual::Property::SPREAD_METHOD;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_URL_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::ImageVisual::Property::URL;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_ALPHA_MASK_URL_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::ImageVisual::Property::ALPHA_MASK_URL;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_BATCH_SIZE_get() {
  int jresult ;
  int result;
  {
    try
    {
      result = (int)Dali::Toolkit::ImageVisual::Property::BATCH_SIZE;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_CACHE_SIZE_get() {
  int jresult ;
  int result;
  {
    try
    {
      result = (int)Dali::Toolkit::ImageVisual::Property::CACHE_SIZE;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_FRAME_DELAY_get() {
  int jresult ;
  int result;
  {
    try
    {
      result = (int)Dali::Toolkit::ImageVisual::Property::FRAME_DELAY;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_LOOP_COUNT_get() {
  return (int)Dali::Toolkit::DevelImageVisual::Property::LOOP_COUNT;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_MASK_CONTENT_SCALE_get() {
  int jresult ;
  int result;
  {
    try
    {
      result = (int)Dali::Toolkit::ImageVisual::Property::MASK_CONTENT_SCALE;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_CROP_TO_MASK_get() {
  int jresult ;
  int result;
  {
    try
    {
      result = (int)Dali::Toolkit::ImageVisual::Property::CROP_TO_MASK;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_FITTING_MODE_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::ImageVisual::Property::FITTING_MODE;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_SAMPLING_MODE_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::ImageVisual::Property::SAMPLING_MODE;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_RELEASE_POLICY_get() {
  int jresult ;
  int result;
  {
    try
    {
      result = (int)Dali::Toolkit::ImageVisual::Property::RELEASE_POLICY;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_LOAD_POLICY_get() {
  int jresult ;
  int result;
  {
    try
    {
      result = (int)Dali::Toolkit::ImageVisual::Property::LOAD_POLICY;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_ORIENTATION_CORRECTION_get() {
  int jresult ;
  int result;
  {
    try
    {
      result = (int)Dali::Toolkit::ImageVisual::Property::ORIENTATION_CORRECTION;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_AUXILIARY_IMAGE_URL_get() {
  int jresult ;
  int result;
  {
    try
    {
      result = (int)Dali::Toolkit::DevelImageVisual::Property::AUXILIARY_IMAGE;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_AUXILIARY_IMAGE_ALPHA_get() {
  int jresult ;
  int result;
  {
    try
    {
      result = (int)Dali::Toolkit::DevelImageVisual::Property::AUXILIARY_IMAGE_ALPHA;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}



SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_DESIRED_WIDTH_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::ImageVisual::Property::DESIRED_WIDTH;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_DESIRED_HEIGHT_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::ImageVisual::Property::DESIRED_HEIGHT;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_SYNCHRONOUS_LOADING_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::ImageVisual::Property::SYNCHRONOUS_LOADING;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_BORDER_ONLY_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::ImageVisual::Property::BORDER_ONLY;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_PIXEL_AREA_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::ImageVisual::Property::PIXEL_AREA;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_WRAP_MODE_U_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::ImageVisual::Property::WRAP_MODE_U;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_IMAGE_VISUAL_WRAP_MODE_V_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::ImageVisual::Property::WRAP_MODE_V;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Image_Visual_BORDER_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::ImageVisual::Property::BORDER;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_MESH_VISUAL_OBJECT_URL_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::MeshVisual::Property::OBJECT_URL;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_MESH_VISUAL_MATERIAL_URL_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::MeshVisual::Property::MATERIAL_URL;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_MESH_VISUAL_TEXTURES_PATH_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::MeshVisual::Property::TEXTURES_PATH;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_MESH_VISUAL_SHADING_MODE_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::MeshVisual::Property::SHADING_MODE;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_MESH_VISUAL_USE_MIPMAPPING_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::MeshVisual::Property::USE_MIPMAPPING;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_MESH_VISUAL_USE_SOFT_NORMALS_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::MeshVisual::Property::USE_SOFT_NORMALS;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_MESH_VISUAL_LIGHT_POSITION_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::MeshVisual::Property::LIGHT_POSITION;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PRIMITIVE_VISUAL_SHAPE_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::PrimitiveVisual::Property::SHAPE;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PRIMITIVE_VISUAL_MIX_COLOR_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::PrimitiveVisual::Property::MIX_COLOR;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PRIMITIVE_VISUAL_SLICES_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::PrimitiveVisual::Property::SLICES;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PRIMITIVE_VISUAL_STACKS_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::PrimitiveVisual::Property::STACKS;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PRIMITIVE_VISUAL_SCALE_TOP_RADIUS_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::PrimitiveVisual::Property::SCALE_TOP_RADIUS;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PRIMITIVE_VISUAL_SCALE_BOTTOM_RADIUS_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::PrimitiveVisual::Property::SCALE_BOTTOM_RADIUS;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PRIMITIVE_VISUAL_SCALE_HEIGHT_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::PrimitiveVisual::Property::SCALE_HEIGHT;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PRIMITIVE_VISUAL_SCALE_RADIUS_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::PrimitiveVisual::Property::SCALE_RADIUS;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PRIMITIVE_VISUAL_SCALE_DIMENSIONS_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::PrimitiveVisual::Property::SCALE_DIMENSIONS;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PRIMITIVE_VISUAL_BEVEL_PERCENTAGE_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::PrimitiveVisual::Property::BEVEL_PERCENTAGE;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PRIMITIVE_VISUAL_BEVEL_SMOOTHNESS_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::PrimitiveVisual::Property::BEVEL_SMOOTHNESS;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PRIMITIVE_VISUAL_LIGHT_POSITION_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::PrimitiveVisual::Property::LIGHT_POSITION;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TEXT_VISUAL_TEXT_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::TextVisual::Property::TEXT;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TEXT_VISUAL_FONT_FAMILY_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::TextVisual::Property::FONT_FAMILY;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TEXT_VISUAL_FONT_STYLE_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::TextVisual::Property::FONT_STYLE;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TEXT_VISUAL_POINT_SIZE_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::TextVisual::Property::POINT_SIZE;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TEXT_VISUAL_MULTI_LINE_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::TextVisual::Property::MULTI_LINE;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TEXT_VISUAL_HORIZONTAL_ALIGNMENT_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::TextVisual::Property::HORIZONTAL_ALIGNMENT;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TEXT_VISUAL_VERTICAL_ALIGNMENT_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::TextVisual::Property::VERTICAL_ALIGNMENT;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TEXT_VISUAL_TEXT_COLOR_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::TextVisual::Property::TEXT_COLOR;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TEXT_VISUAL_ENABLE_MARKUP_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::TextVisual::Property::ENABLE_MARKUP;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Builder() {
  void * jresult ;
  Dali::Toolkit::Builder *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::Builder *)new Dali::Toolkit::Builder();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Builder_New() {
  void * jresult ;
  Dali::Toolkit::Builder result;

  {
    try {
      result = Dali::Toolkit::Builder::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Builder((const Dali::Toolkit::Builder &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Builder(void * jarg1) {
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Builder_LoadFromString__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Toolkit::Builder::UIFormat arg3 ;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Toolkit::Builder::UIFormat)jarg3;
  {
    try {
      (arg1)->LoadFromString((std::string const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }


  //argout typemap for const std::string&

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Builder_LoadFromString__SWIG_1(void * jarg1, char * jarg2) {
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      (arg1)->LoadFromString((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }


  //argout typemap for const std::string&

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Builder_AddConstants(void * jarg1, void * jarg2) {
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  Dali::Property::Map *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  arg2 = (Dali::Property::Map *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->AddConstants((Dali::Property::Map const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Builder_AddConstant(void * jarg1, char * jarg2, void * jarg3) {
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Value *arg3 = 0 ;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Property::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Value const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->AddConstant((std::string const &)*arg2,(Dali::Property::Value const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }


  //argout typemap for const std::string&

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Builder_GetConstants(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  Dali::Property::Map *result = 0 ;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  {
    try {
      result = (Dali::Property::Map *) &((Dali::Toolkit::Builder const *)arg1)->GetConstants();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Builder_GetConstant(void * jarg1, char * jarg2) {
  void * jresult ;
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Value *result = 0 ;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      result = (Dali::Property::Value *) &((Dali::Toolkit::Builder const *)arg1)->GetConstant((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Builder_CreateAnimation__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Animation result;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      result = (arg1)->CreateAnimation((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Animation((const Dali::Animation &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Builder_CreateAnimation__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Map *arg3 = 0 ;
  Dali::Animation result;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Property::Map *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (arg1)->CreateAnimation((std::string const &)*arg2,(Dali::Property::Map const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Animation((const Dali::Animation &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Builder_CreateAnimation__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Actor arg3 ;
  Dali::Actor *argp3 ;
  Dali::Animation result;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  argp3 = (Dali::Actor *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg3 = *argp3;
  {
    try {
      result = (arg1)->CreateAnimation((std::string const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Animation((const Dali::Animation &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Builder_CreateAnimation__SWIG_3(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Map *arg3 = 0 ;
  Dali::Actor arg4 ;
  Dali::Actor *argp4 ;
  Dali::Animation result;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Property::Map *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map const & type is null", 0);
    return 0;
  }
  argp4 = (Dali::Actor *)jarg4;
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg4 = *argp4;
  {
    try {
      result = (arg1)->CreateAnimation((std::string const &)*arg2,(Dali::Property::Map const &)*arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Animation((const Dali::Animation &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Builder_Create__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  std::string *arg2 = 0 ;
  Dali::BaseHandle result;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      result = (arg1)->Create((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::BaseHandle((const Dali::BaseHandle &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Builder_Create__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Map *arg3 = 0 ;
  Dali::BaseHandle result;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Property::Map *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (arg1)->Create((std::string const &)*arg2,(Dali::Property::Map const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::BaseHandle((const Dali::BaseHandle &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Builder_CreateFromJson(void * jarg1, char * jarg2) {
  void * jresult ;
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  std::string *arg2 = 0 ;
  Dali::BaseHandle result;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      result = (arg1)->CreateFromJson((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::BaseHandle((const Dali::BaseHandle &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Builder_ApplyStyle(void * jarg1, char * jarg2, void * jarg3) {
  bool jresult ;
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Handle *arg3 = 0 ;
  bool result;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Handle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Handle & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)(arg1)->ApplyStyle((std::string const &)*arg2,*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Builder_ApplyFromJson(void * jarg1, void * jarg2, char * jarg3) {
  bool jresult ;
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  Dali::Handle *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  arg2 = (Dali::Handle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Handle & type is null", 0);
    return 0;
  }
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str;
  {
    try {
      result = (bool)(arg1)->ApplyFromJson(*arg2,(std::string const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Builder_AddActors__SWIG_0(void * jarg1, void * jarg2) {
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->AddActors(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Builder_AddActors__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Actor arg3 ;
  Dali::Actor *argp3 ;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  argp3 = (Dali::Actor *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg3 = *argp3;
  {
    try {
      (arg1)->AddActors((std::string const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }


  //argout typemap for const std::string&

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Builder_CreateRenderTask(void * jarg1, char * jarg2) {
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      (arg1)->CreateRenderTask((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }


  //argout typemap for const std::string&

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Builder_GetPath(void * jarg1, char * jarg2) {
  void * jresult ;
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Path result;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      result = (arg1)->GetPath((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Path((const Dali::Path &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Builder_GetPathConstrainer(void * jarg1, char * jarg2) {
  void * jresult ;
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  std::string *arg2 = 0 ;
  Dali::PathConstrainer result;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      result = (arg1)->GetPathConstrainer((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PathConstrainer((const Dali::PathConstrainer &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Builder_GetLinearConstrainer(void * jarg1, char * jarg2) {
  void * jresult ;
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  std::string *arg2 = 0 ;
  Dali::LinearConstrainer result;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      result = (arg1)->GetLinearConstrainer((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::LinearConstrainer((const Dali::LinearConstrainer &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Builder_QuitSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Builder *arg1 = (Dali::Toolkit::Builder *) 0 ;
  Dali::Toolkit::Builder::BuilderSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Builder *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Builder::BuilderSignalType *) &(arg1)->QuitSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TransitionData__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::TransitionData *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::TransitionData *)new Dali::Toolkit::TransitionData();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TransitionData(void * jarg1) {
  Dali::Toolkit::TransitionData *arg1 = (Dali::Toolkit::TransitionData *) 0 ;

  arg1 = (Dali::Toolkit::TransitionData *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TransitionData_New__SWIG_0(void * jarg1) {
  void * jresult ;
  Dali::Property::Map *arg1 = 0 ;
  Dali::Toolkit::TransitionData result;

  arg1 = (Dali::Property::Map *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map const & type is null", 0);
    return 0;
  }
  {
    try {
      result = Dali::Toolkit::TransitionData::New((Dali::Property::Map const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::TransitionData((const Dali::Toolkit::TransitionData &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TransitionData_New__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Property::Array *arg1 = 0 ;
  Dali::Toolkit::TransitionData result;

  arg1 = (Dali::Property::Array *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Array const & type is null", 0);
    return 0;
  }
  {
    try {
      result = Dali::Toolkit::TransitionData::New((Dali::Property::Array const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::TransitionData((const Dali::Toolkit::TransitionData &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TransitionData_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::TransitionData result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::TransitionData::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::TransitionData((const Dali::Toolkit::TransitionData &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TransitionData__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::TransitionData *arg1 = 0 ;
  Dali::Toolkit::TransitionData *result = 0 ;

  arg1 = (Dali::Toolkit::TransitionData *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::TransitionData const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::TransitionData *)new Dali::Toolkit::TransitionData((Dali::Toolkit::TransitionData const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TransitionData_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::TransitionData *arg1 = (Dali::Toolkit::TransitionData *) 0 ;
  Dali::Toolkit::TransitionData *arg2 = 0 ;
  Dali::Toolkit::TransitionData *result = 0 ;

  arg1 = (Dali::Toolkit::TransitionData *)jarg1;
  arg2 = (Dali::Toolkit::TransitionData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::TransitionData const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::TransitionData *) &(arg1)->operator =((Dali::Toolkit::TransitionData const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_TransitionData_Count(void * jarg1) {
  unsigned long jresult ;
  Dali::Toolkit::TransitionData *arg1 = (Dali::Toolkit::TransitionData *) 0 ;
  size_t result;

  arg1 = (Dali::Toolkit::TransitionData *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::TransitionData const *)arg1)->Count();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TransitionData_GetAnimatorAt(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Dali::Toolkit::TransitionData *arg1 = (Dali::Toolkit::TransitionData *) 0 ;
  size_t arg2 ;
  Dali::Property::Map result;

  arg1 = (Dali::Toolkit::TransitionData *)jarg1;
  arg2 = (size_t)jarg2;
  {
    try {
      result = (arg1)->GetAnimatorAt(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Property::Map((const Dali::Property::Map &)result);
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TOOLTIP_CONTENT_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Tooltip::Property::CONTENT;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TOOLTIP_LAYOUT_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Tooltip::Property::LAYOUT;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TOOLTIP_WAIT_TIME_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Tooltip::Property::WAIT_TIME;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TOOLTIP_BACKGROUND_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Tooltip::Property::BACKGROUND;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TOOLTIP_TAIL_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Tooltip::Property::TAIL;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TOOLTIP_POSITION_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Tooltip::Property::POSITION;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TOOLTIP_HOVER_POINT_OFFSET_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Tooltip::Property::HOVER_POINT_OFFSET;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TOOLTIP_MOVEMENT_THRESHOLD_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Tooltip::Property::MOVEMENT_THRESHOLD;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TOOLTIP_DISAPPEAR_ON_MOVEMENT_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Tooltip::Property::DISAPPEAR_ON_MOVEMENT;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TOOLTIP_BACKGROUND_VISUAL_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Tooltip::Background::Property::VISUAL;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TOOLTIP_BACKGROUND_BORDER_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Tooltip::Background::Property::BORDER;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TOOLTIP_TAIL_VISIBILITY_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Tooltip::Tail::Property::VISIBILITY;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TOOLTIP_TAIL_ABOVE_VISUAL_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Tooltip::Tail::Property::ABOVE_VISUAL;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TOOLTIP_TAIL_BELOW_VISUAL_get() {
  int jresult ;
  int result;

  {
    try {
      result = (int)Dali::Toolkit::Tooltip::Tail::Property::BELOW_VISUAL;
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ViewImpl_New() {
  void * jresult ;
  Dali::Toolkit::Control result;

  {
    try {
      result = Dali::Toolkit::Internal::Control::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Control((const Dali::Toolkit::Control &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_SetStyleName(void * jarg1, char * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      (arg1)->SetStyleName((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }


  //argout typemap for const std::string&

}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_ViewImpl_GetStyleName(void * jarg1) {
  char * jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  std::string *result = 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      result = (std::string *) &((Dali::Toolkit::Internal::Control const *)arg1)->GetStyleName();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = SWIG_csharp_string_callback(result->c_str());
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_SetBackgroundColor(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Vector4 *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetBackgroundColor((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ViewImpl_GetBackgroundColor(void * jarg1) {
  void * jresult ;
  Dali::Handle *arg1 = (Dali::Handle *) 0 ;
  Dali::Vector4 result;

  arg1 = (Dali::Handle *)jarg1;
  {
    try {
      Property::Map* resultMap = ((arg1)->GetProperty( Control::Property::BACKGROUND )).GetMap();
      if (resultMap)
      {
        Dali::Property::Value* type = resultMap->Find( Toolkit::Visual::Property::TYPE );
        if(type && type->Get<int>() == Visual::COLOR )
        {
          Dali::Property::Value* value = resultMap->Find( ColorVisual::Property::MIX_COLOR );
          if (value)
          {
            result = value->Get<Vector4>();
          }
        }
      }
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_SetBackground(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Property::Map *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Property::Map *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetBackground((Dali::Property::Map const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_ClearBackground(void * jarg1) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      (arg1)->ClearBackground();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_EnableGestureDetection(void * jarg1, int jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::GestureType::Value arg2 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::GestureType::Value)jarg2;
  {
    try {
      (arg1)->EnableGestureDetection(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_DisableGestureDetection(void * jarg1, int jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::GestureType::Value arg2 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::GestureType::Value)jarg2;
  {
    try {
      (arg1)->DisableGestureDetection(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ViewImpl_GetPinchGestureDetector(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::PinchGestureDetector result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::Internal::Control const *)arg1)->GetPinchGestureDetector();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PinchGestureDetector((const Dali::PinchGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ViewImpl_GetPanGestureDetector(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::PanGestureDetector result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::Internal::Control const *)arg1)->GetPanGestureDetector();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PanGestureDetector((const Dali::PanGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ViewImpl_GetTapGestureDetector(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::TapGestureDetector result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::Internal::Control const *)arg1)->GetTapGestureDetector();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::TapGestureDetector((const Dali::TapGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ViewImpl_GetLongPressGestureDetector(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::LongPressGestureDetector result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::Internal::Control const *)arg1)->GetLongPressGestureDetector();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::LongPressGestureDetector((const Dali::LongPressGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_SetKeyboardNavigationSupport(void * jarg1, bool jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetKeyboardNavigationSupport(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_IsKeyboardNavigationSupported(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      result = (bool)(arg1)->IsKeyboardNavigationSupported();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_SetKeyInputFocus(void * jarg1) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      (arg1)->SetKeyInputFocus();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_HasKeyInputFocus(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      result = (bool)(arg1)->HasKeyInputFocus();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_ClearKeyInputFocus(void * jarg1) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      (arg1)->ClearKeyInputFocus();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_SetAsKeyboardFocusGroup(void * jarg1, bool jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetAsKeyboardFocusGroup(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_IsKeyboardFocusGroup(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      result = (bool)(arg1)->IsKeyboardFocusGroup();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ViewImpl_KeyEventSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Toolkit::Control::KeyEventSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Control::KeyEventSignalType *) &(arg1)->KeyEventSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ViewImpl_KeyInputFocusGainedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Toolkit::Control::KeyInputFocusSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Control::KeyInputFocusSignalType *) &(arg1)->KeyInputFocusGainedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ViewImpl_KeyInputFocusLostSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Toolkit::Control::KeyInputFocusSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Control::KeyInputFocusSignalType *) &(arg1)->KeyInputFocusLostSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnSceneConnection(void * jarg1, int jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  int arg2 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (int)jarg2;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if(!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      if(darg) {
        (darg)->OnSceneConnection(arg2);
      }
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnSceneConnectionSwigExplicitViewImpl(void * jarg1, int jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  int arg2 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (int)jarg2;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if(!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      if(darg) {
        (darg)->OnSceneConnectionSwigPublic(arg2);
      }
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnSceneDisconnection(void * jarg1) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if(!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      if(darg) {
        (darg)->OnSceneDisconnection();
      }
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnSceneDisconnectionSwigExplicitViewImpl(void * jarg1) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if(!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      if(darg) {
        (darg)->OnSceneDisconnectionSwigPublic();
      }
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnChildAdd(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Actor *arg2 = 0 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Actor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor & type is null", 0);
    return ;
  }
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if(!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      if(darg) {
        (darg)->OnChildAdd(*arg2);
      }
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnChildAddSwigExplicitViewImpl(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Actor *arg2 = 0 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Actor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor & type is null", 0);
    return ;
  }
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if(!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      if(darg) {
          (darg)->OnChildAddSwigPublic(*arg2);
      }
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnChildRemove(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Actor *arg2 = 0 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Actor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor & type is null", 0);
    return ;
  }
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if(!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      if(darg) {
        (darg)->OnChildRemove(*arg2);
      }
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnChildRemoveSwigExplicitViewImpl(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Actor *arg2 = 0 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Actor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor & type is null", 0);
    return ;
  }
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if(!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      if(darg) {
        (darg)->OnChildRemoveSwigPublic(*arg2);
      }
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnPropertySet(void * jarg1, int jarg2, void * jarg3) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Property::Index arg2 ;
  Dali::Property::Value arg3 ;
  Dali::Property::Value *argp3 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Property::Index)jarg2;
  argp3 = (Dali::Property::Value *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Property::Value", 0);
    return ;
  }
  arg3 = *argp3;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      (darg)->OnPropertySet(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnSizeSet(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      (darg)->OnSizeSet((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnSizeSetSwigExplicitViewImpl(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Vector3 *arg2 = 0 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      (darg)->OnSizeSetSwigPublic((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnSizeAnimation(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Animation *arg2 = 0 ;
  Dali::Vector3 *arg3 = 0 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Animation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Animation & type is null", 0);
    return ;
  }
  arg3 = (Dali::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      (darg)->OnSizeAnimation(*arg2,(Dali::Vector3 const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnSizeAnimationSwigExplicitViewImpl(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Animation *arg2 = 0 ;
  Dali::Vector3 *arg3 = 0 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Animation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Animation & type is null", 0);
    return ;
  }
  arg3 = (Dali::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      (darg)->OnSizeAnimationSwigPublic(*arg2,(Dali::Vector3 const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_OnKeyEvent(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::KeyEvent *arg2 = 0 ;
  SwigDirector_ViewImpl *darg = 0;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::KeyEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::KeyEvent const & type is null", 0);
    return 0;
  }
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return 0;
  }
  {
    try {
      result = (bool)(darg)->OnKeyEvent((Dali::KeyEvent const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_OnKeyEventSwigExplicitViewImpl(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::KeyEvent *arg2 = 0 ;
  SwigDirector_ViewImpl *darg = 0;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::KeyEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::KeyEvent const & type is null", 0);
    return 0;
  }
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return 0;
  }
  {
    try {
      result = (bool)(darg)->OnKeyEventSwigPublic((Dali::KeyEvent const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnRelayout(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::RelayoutContainer *arg3 = 0 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  arg3 = (Dali::RelayoutContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::RelayoutContainer & type is null", 0);
    return ;
  }
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      (darg)->OnRelayout((Dali::Vector2 const &)*arg2,*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnRelayoutSwigExplicitViewImpl(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::RelayoutContainer *arg3 = 0 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  arg3 = (Dali::RelayoutContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::RelayoutContainer & type is null", 0);
    return ;
  }
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      (darg)->OnRelayoutSwigPublic((Dali::Vector2 const &)*arg2,*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnSetResizePolicy(void * jarg1, int jarg2, int jarg3) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::ResizePolicy::Type arg2 ;
  Dali::Dimension::Type arg3 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::ResizePolicy::Type)jarg2;
  arg3 = (Dali::Dimension::Type)jarg3;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      (darg)->OnSetResizePolicy(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnSetResizePolicySwigExplicitViewImpl(void * jarg1, int jarg2, int jarg3) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::ResizePolicy::Type arg2 ;
  Dali::Dimension::Type arg3 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::ResizePolicy::Type)jarg2;
  arg3 = (Dali::Dimension::Type)jarg3;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      (darg)->OnSetResizePolicySwigPublic(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ViewImpl_GetNaturalSize(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  SwigDirector_ViewImpl *darg = 0;
  Dali::Vector3 result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return 0;
  }
  {
    try {
      result = (darg)->GetNaturalSize();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ViewImpl_GetNaturalSizeSwigExplicitViewImpl(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  SwigDirector_ViewImpl *darg = 0;
  Dali::Vector3 result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return 0;
  }
  {
    try {
      result = (darg)->GetNaturalSizeSwigPublic();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ViewImpl_CalculateChildSize(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Actor *arg2 = 0 ;
  Dali::Dimension::Type arg3 ;
  SwigDirector_ViewImpl *darg = 0;
  float result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Actor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor const & type is null", 0);
    return 0;
  }
  arg3 = (Dali::Dimension::Type)jarg3;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return 0;
  }
  {
    try {
      result = (float)(darg)->CalculateChildSize((Dali::Actor const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ViewImpl_CalculateChildSizeSwigExplicitViewImpl(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Actor *arg2 = 0 ;
  Dali::Dimension::Type arg3 ;
  SwigDirector_ViewImpl *darg = 0;
  float result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Actor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor const & type is null", 0);
    return 0;
  }
  arg3 = (Dali::Dimension::Type)jarg3;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return 0;
  }
  {
    try {
      result = (float)(darg)->CalculateChildSizeSwigPublic((Dali::Actor const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ViewImpl_GetHeightForWidth(void * jarg1, float jarg2) {
  float jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  float arg2 ;
  SwigDirector_ViewImpl *darg = 0;
  float result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (float)jarg2;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return 0;
  }
  {
    try {
      result = (float)(darg)->GetHeightForWidth(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ViewImpl_GetHeightForWidthSwigExplicitViewImpl(void * jarg1, float jarg2) {
  float jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  float arg2 ;
  SwigDirector_ViewImpl *darg = 0;
  float result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (float)jarg2;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return 0;
  }
  {
    try {
      result = (float)(darg)->GetHeightForWidthSwigPublic(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ViewImpl_GetWidthForHeight(void * jarg1, float jarg2) {
  float jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  float arg2 ;
  SwigDirector_ViewImpl *darg = 0;
  float result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (float)jarg2;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return 0;
  }
  {
    try {
      result = (float)(darg)->GetWidthForHeight(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ViewImpl_GetWidthForHeightSwigExplicitViewImpl(void * jarg1, float jarg2) {
  float jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  float arg2 ;
  SwigDirector_ViewImpl *darg = 0;
  float result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (float)jarg2;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return 0;
  }
  {
    try {
      result = (float)(darg)->GetWidthForHeightSwigPublic(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_RelayoutDependentOnChildren__SWIG_0(void * jarg1, int jarg2) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Dimension::Type arg2 ;
  SwigDirector_ViewImpl *darg = 0;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Dimension::Type)jarg2;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return 0;
  }
  {
    try {
      result = (bool)(darg)->RelayoutDependentOnChildren(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_RelayoutDependentOnChildrenSwigExplicitViewImpl__SWIG_0(void * jarg1, int jarg2) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Dimension::Type arg2 ;
  SwigDirector_ViewImpl *darg = 0;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Dimension::Type)jarg2;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return 0;
  }
  {
    try {
      result = (bool)(darg)->RelayoutDependentOnChildrenSwigPublic(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_RelayoutDependentOnChildren__SWIG_1(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  SwigDirector_ViewImpl *darg = 0;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return 0;
  }
  {
    try {
      result = (bool)(darg)->RelayoutDependentOnChildren();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_RelayoutDependentOnChildrenSwigExplicitViewImpl__SWIG_1(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  SwigDirector_ViewImpl *darg = 0;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return 0;
  }
  {
    try {
      result = (bool)(darg)->RelayoutDependentOnChildrenSwigPublic();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnCalculateRelayoutSize(void * jarg1, int jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Dimension::Type arg2 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Dimension::Type)jarg2;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      (darg)->OnCalculateRelayoutSize(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnCalculateRelayoutSizeSwigExplicitViewImpl(void * jarg1, int jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Dimension::Type arg2 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::Dimension::Type)jarg2;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      (darg)->OnCalculateRelayoutSizeSwigPublic(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnLayoutNegotiated(void * jarg1, float jarg2, int jarg3) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  float arg2 ;
  Dali::Dimension::Type arg3 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (Dali::Dimension::Type)jarg3;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      (darg)->OnLayoutNegotiated(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnLayoutNegotiatedSwigExplicitViewImpl(void * jarg1, float jarg2, int jarg3) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  float arg2 ;
  Dali::Dimension::Type arg3 ;
  SwigDirector_ViewImpl *darg = 0;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (Dali::Dimension::Type)jarg3;
  darg = dynamic_cast<SwigDirector_ViewImpl *>(arg1);
  if (!darg) {
    SWIG_CSharpException(SWIG_TypeError, "dynamic_cast<SwigDirector_ViewImpl> error. darg is null");
    return;
  }
  {
    try {
      (darg)->OnLayoutNegotiatedSwigPublic(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnInitialize(void * jarg1) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      (arg1)->OnInitialize();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnInitializeSwigExplicitViewImpl(void * jarg1) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      (arg1)->Dali::Toolkit::Internal::Control::OnInitialize();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnStyleChange(void * jarg1, void * jarg2, int jarg3) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Toolkit::StyleManager arg2 ;
  Dali::StyleChange::Type arg3 ;
  Dali::Toolkit::StyleManager *argp2 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  argp2 = (Dali::Toolkit::StyleManager *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::StyleManager", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (Dali::StyleChange::Type)jarg3;
  {
    try {
      (arg1)->OnStyleChange(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnStyleChangeSwigExplicitViewImpl(void * jarg1, void * jarg2, int jarg3) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Toolkit::StyleManager arg2 ;
  Dali::StyleChange::Type arg3 ;
  Dali::Toolkit::StyleManager *argp2 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  argp2 = (Dali::Toolkit::StyleManager *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::StyleManager", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (Dali::StyleChange::Type)jarg3;
  {
    try {
      (arg1)->Dali::Toolkit::Internal::Control::OnStyleChange(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_OnAccessibilityActivated(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      result = (bool)(arg1)->OnAccessibilityActivated();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_OnAccessibilityActivatedSwigExplicitViewImpl(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      result = (bool)(arg1)->Dali::Toolkit::Internal::Control::OnAccessibilityActivated();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_OnAccessibilityPan(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::PanGesture arg2 ;
  Dali::PanGesture *argp2 ;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  argp2 = (Dali::PanGesture *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::PanGesture", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)(arg1)->OnAccessibilityPan(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_OnAccessibilityPanSwigExplicitViewImpl(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::PanGesture arg2 ;
  Dali::PanGesture *argp2 ;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  argp2 = (Dali::PanGesture *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::PanGesture", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)(arg1)->Dali::Toolkit::Internal::Control::OnAccessibilityPan(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_OnAccessibilityValueChange(void * jarg1, bool jarg2) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  bool arg2 ;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      result = (bool)(arg1)->OnAccessibilityValueChange(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_OnAccessibilityValueChangeSwigExplicitViewImpl(void * jarg1, bool jarg2) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  bool arg2 ;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      result = (bool)(arg1)->Dali::Toolkit::Internal::Control::OnAccessibilityValueChange(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_OnAccessibilityZoom(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      result = (bool)(arg1)->OnAccessibilityZoom();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_OnAccessibilityZoomSwigExplicitViewImpl(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      result = (bool)(arg1)->Dali::Toolkit::Internal::Control::OnAccessibilityZoom();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnKeyInputFocusGained(void * jarg1) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      (arg1)->OnKeyInputFocusGained();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnKeyInputFocusGainedSwigExplicitViewImpl(void * jarg1) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      (arg1)->Dali::Toolkit::Internal::Control::OnKeyInputFocusGained();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnKeyInputFocusLost(void * jarg1) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      (arg1)->OnKeyInputFocusLost();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnKeyInputFocusLostSwigExplicitViewImpl(void * jarg1) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      (arg1)->Dali::Toolkit::Internal::Control::OnKeyInputFocusLost();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ViewImpl_GetNextKeyboardFocusableActor(void * jarg1, void * jarg2, int jarg3, bool jarg4) {
  void * jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Actor arg2 ;
  Dali::Toolkit::Control::KeyboardFocus::Direction arg3 ;
  bool arg4 ;
  Dali::Actor *argp2 ;
  Dali::Actor result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::Toolkit::Control::KeyboardFocus::Direction)jarg3;
  arg4 = jarg4 ? true : false;
  {
    try {
      result = (arg1)->GetNextKeyboardFocusableActor(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ViewImpl_GetNextKeyboardFocusableActorSwigExplicitViewImpl(void * jarg1, void * jarg2, int jarg3, bool jarg4) {
  void * jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Actor arg2 ;
  Dali::Toolkit::Control::KeyboardFocus::Direction arg3 ;
  bool arg4 ;
  Dali::Actor *argp2 ;
  Dali::Actor result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::Toolkit::Control::KeyboardFocus::Direction)jarg3;
  arg4 = jarg4 ? true : false;
  {
    try {
      result = (arg1)->Dali::Toolkit::Internal::Control::GetNextKeyboardFocusableActor(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnKeyboardFocusChangeCommitted(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->OnKeyboardFocusChangeCommitted(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnKeyboardFocusChangeCommittedSwigExplicitViewImpl(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->Dali::Toolkit::Internal::Control::OnKeyboardFocusChangeCommitted(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_OnKeyboardEnter(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      result = (bool)(arg1)->OnKeyboardEnter();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewImpl_OnKeyboardEnterSwigExplicitViewImpl(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  {
    try {
      result = (bool)(arg1)->Dali::Toolkit::Internal::Control::OnKeyboardEnter();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnPinch(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::PinchGesture *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::PinchGesture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PinchGesture const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->OnPinch((Dali::PinchGesture const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnPinchSwigExplicitViewImpl(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::PinchGesture *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::PinchGesture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PinchGesture const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Dali::Toolkit::Internal::Control::OnPinch((Dali::PinchGesture const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnPan(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::PanGesture *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::PanGesture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PanGesture const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->OnPan((Dali::PanGesture const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnPanSwigExplicitViewImpl(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::PanGesture *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::PanGesture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::PanGesture const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Dali::Toolkit::Internal::Control::OnPan((Dali::PanGesture const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnTap(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::TapGesture *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::TapGesture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TapGesture const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->OnTap((Dali::TapGesture const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnTapSwigExplicitViewImpl(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::TapGesture *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::TapGesture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::TapGesture const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Dali::Toolkit::Internal::Control::OnTap((Dali::TapGesture const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnLongPress(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::LongPressGesture *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::LongPressGesture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::LongPressGesture const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->OnLongPress((Dali::LongPressGesture const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_OnLongPressSwigExplicitViewImpl(void * jarg1, void * jarg2) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::LongPressGesture *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::LongPressGesture *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::LongPressGesture const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Dali::Toolkit::Internal::Control::OnLongPress((Dali::LongPressGesture const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_SignalConnected(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::SlotObserver *arg2 = (Dali::SlotObserver *) 0 ;
  Dali::CallbackBase *arg3 = (Dali::CallbackBase *) 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::SlotObserver *)jarg2;
  arg3 = (Dali::CallbackBase *)jarg3;
  {
    try {
      (arg1)->SignalConnected(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_SignalConnectedSwigExplicitViewImpl(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::SlotObserver *arg2 = (Dali::SlotObserver *) 0 ;
  Dali::CallbackBase *arg3 = (Dali::CallbackBase *) 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::SlotObserver *)jarg2;
  arg3 = (Dali::CallbackBase *)jarg3;
  {
    try {
      (arg1)->Dali::Toolkit::Internal::Control::SignalConnected(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_SignalDisconnected(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::SlotObserver *arg2 = (Dali::SlotObserver *) 0 ;
  Dali::CallbackBase *arg3 = (Dali::CallbackBase *) 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::SlotObserver *)jarg2;
  arg3 = (Dali::CallbackBase *)jarg3;
  {
    try {
      (arg1)->SignalDisconnected(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_SignalDisconnectedSwigExplicitViewImpl(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Toolkit::Internal::Control *arg1 = (Dali::Toolkit::Internal::Control *) 0 ;
  Dali::SlotObserver *arg2 = (Dali::SlotObserver *) 0 ;
  Dali::CallbackBase *arg3 = (Dali::CallbackBase *) 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  arg2 = (Dali::SlotObserver *)jarg2;
  arg3 = (Dali::CallbackBase *)jarg3;
  {
    try {
      (arg1)->Dali::Toolkit::Internal::Control::SignalDisconnected(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewImpl_director_connect(void *objarg, SwigDirector_ViewImpl::SWIG_Callback0_t callback0, SwigDirector_ViewImpl::SWIG_Callback1_t callback1, SwigDirector_ViewImpl::SWIG_Callback2_t callback2, SwigDirector_ViewImpl::SWIG_Callback3_t callback3, SwigDirector_ViewImpl::SWIG_Callback4_t callback4, SwigDirector_ViewImpl::SWIG_Callback5_t callback5, SwigDirector_ViewImpl::SWIG_Callback6_t callback6, SwigDirector_ViewImpl::SWIG_Callback9_t callback9, SwigDirector_ViewImpl::SWIG_Callback11_t callback11, SwigDirector_ViewImpl::SWIG_Callback12_t callback12, SwigDirector_ViewImpl::SWIG_Callback13_t callback13, SwigDirector_ViewImpl::SWIG_Callback14_t callback14, SwigDirector_ViewImpl::SWIG_Callback15_t callback15, SwigDirector_ViewImpl::SWIG_Callback16_t callback16, SwigDirector_ViewImpl::SWIG_Callback17_t callback17, SwigDirector_ViewImpl::SWIG_Callback18_t callback18, SwigDirector_ViewImpl::SWIG_Callback19_t callback19, SwigDirector_ViewImpl::SWIG_Callback20_t callback20, SwigDirector_ViewImpl::SWIG_Callback21_t callback21, SwigDirector_ViewImpl::SWIG_Callback24_t callback24, SwigDirector_ViewImpl::SWIG_Callback25_t callback25, SwigDirector_ViewImpl::SWIG_Callback26_t callback26, SwigDirector_ViewImpl::SWIG_Callback28_t callback28, SwigDirector_ViewImpl::SWIG_Callback29_t callback29, SwigDirector_ViewImpl::SWIG_Callback30_t callback30, SwigDirector_ViewImpl::SWIG_Callback31_t callback31, SwigDirector_ViewImpl::SWIG_Callback32_t callback32, SwigDirector_ViewImpl::SWIG_Callback33_t callback33, SwigDirector_ViewImpl::SWIG_Callback34_t callback34, SwigDirector_ViewImpl::SWIG_Callback35_t callback35, SwigDirector_ViewImpl::SWIG_Callback36_t callback36, SwigDirector_ViewImpl::SWIG_Callback37_t callback37, SwigDirector_ViewImpl::SWIG_Callback38_t callback38, SwigDirector_ViewImpl::SWIG_Callback39_t callback39, SwigDirector_ViewImpl::SWIG_Callback40_t callback40) {
  Dali::Toolkit::Internal::Control *obj = (Dali::Toolkit::Internal::Control *)objarg;
  SwigDirector_ViewImpl *director = dynamic_cast<SwigDirector_ViewImpl *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback9, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback24, callback25, callback26, callback28, callback29, callback30, callback31, callback32, callback33, callback34, callback35, callback36, callback37, callback38, callback39, callback40);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GetImplementation__SWIG_0(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Control *arg1 = 0 ;
  Dali::Toolkit::Internal::Control *result = 0 ;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Control & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Internal::Control *) &Dali::Toolkit::Internal::GetImplementation(*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_View_Property_STYLE_NAME_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Control::Property::STYLE_NAME;
  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_View_Property_KEY_INPUT_FOCUS_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Control::Property::KEY_INPUT_FOCUS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_View_Property_BACKGROUND_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Control::Property::BACKGROUND;
  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_View_Property_MARGIN_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Control::Property::MARGIN;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_View_Property_PADDING_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Control::Property::PADDING;
  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_View_Property_SHADOW_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::DevelControl::Property::SHADOW;
  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_View_Property_ACCESSIBILITY_NAME_get() {
  return (int)Dali::Toolkit::DevelControl::Property::ACCESSIBILITY_NAME;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_View_Property_ACCESSIBILITY_DESCRIPTION_get() {
  return (int)Dali::Toolkit::DevelControl::Property::ACCESSIBILITY_DESCRIPTION;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_View_Property_ACCESSIBILITY_TRANSLATION_DOMAIN_get() {
  return (int)Dali::Toolkit::DevelControl::Property::ACCESSIBILITY_TRANSLATION_DOMAIN;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_View_Property_ACCESSIBILITY_ROLE_get() {
  return (int)Dali::Toolkit::DevelControl::Property::ACCESSIBILITY_ROLE;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_View_Property_ACCESSIBILITY_HIGHLIGHTABLE_get() {
  return (int)Dali::Toolkit::DevelControl::Property::ACCESSIBILITY_HIGHLIGHTABLE;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_View_Property_ACCESSIBILITY_ATTRIBUTES_get() {
  return (int)Dali::Toolkit::DevelControl::Property::ACCESSIBILITY_ATTRIBUTES;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_View_Property() {
  void * jresult ;
  Dali::Toolkit::Control::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::Control::Property *)new Dali::Toolkit::Control::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_View_Property(void * jarg1) {
  Dali::Toolkit::Control::Property *arg1 = (Dali::Toolkit::Control::Property *) 0 ;

  arg1 = (Dali::Toolkit::Control::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_View_KeyboardFocus() {
  void * jresult ;
  Dali::Toolkit::Control::KeyboardFocus *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::Control::KeyboardFocus *)new Dali::Toolkit::Control::KeyboardFocus();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_View_KeyboardFocus(void * jarg1) {
  Dali::Toolkit::Control::KeyboardFocus *arg1 = (Dali::Toolkit::Control::KeyboardFocus *) 0 ;

  arg1 = (Dali::Toolkit::Control::KeyboardFocus *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_View_New() {
  void * jresult ;
  Dali::Toolkit::Control result;

  {
    try {
      result = Dali::Toolkit::Control::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Control((const Dali::Toolkit::Control &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_View__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::Control *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::Control *)new Dali::Toolkit::Control();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_View__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Control *arg1 = 0 ;
  Dali::Toolkit::Control *result = 0 ;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Control const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Control *)new Dali::Toolkit::Control((Dali::Toolkit::Control const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_View(void * jarg1) {
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_View_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;
  Dali::Toolkit::Control *arg2 = 0 ;
  Dali::Toolkit::Control *result = 0 ;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  arg2 = (Dali::Toolkit::Control *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Control const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Control *) &(arg1)->operator =((Dali::Toolkit::Control const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_View_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::Control result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::Control::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Control((const Dali::Toolkit::Control &)result);
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Control(void * jarg1) {
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) jarg1;
  try {
    delete arg1;
  } CALL_CATCH_EXCEPTION();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_View_SetKeyInputFocus(void * jarg1) {
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  {
    try {
      (arg1)->SetKeyInputFocus();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_View_HasKeyInputFocus(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  {
    try {
      result = (bool)(arg1)->HasKeyInputFocus();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_View_ClearKeyInputFocus(void * jarg1) {
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  {
    try {
      (arg1)->ClearKeyInputFocus();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_View_GetPinchGestureDetector(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;
  Dali::PinchGestureDetector result;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::Control const *)arg1)->GetPinchGestureDetector();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PinchGestureDetector((const Dali::PinchGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_View_GetPanGestureDetector(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;
  Dali::PanGestureDetector result;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::Control const *)arg1)->GetPanGestureDetector();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PanGestureDetector((const Dali::PanGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_View_GetTapGestureDetector(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;
  Dali::TapGestureDetector result;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::Control const *)arg1)->GetTapGestureDetector();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::TapGestureDetector((const Dali::TapGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_View_GetLongPressGestureDetector(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;
  Dali::LongPressGestureDetector result;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::Control const *)arg1)->GetLongPressGestureDetector();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::LongPressGestureDetector((const Dali::LongPressGestureDetector &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_View_SetStyleName(void * jarg1, char * jarg2) {
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      (arg1)->SetStyleName((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }


  //argout typemap for const std::string&

}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_View_GetStyleName(void * jarg1) {
  char * jresult ;
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;
  std::string *result = 0 ;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  {
    try {
      result = (std::string *) &((Dali::Toolkit::Control const *)arg1)->GetStyleName();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = SWIG_csharp_string_callback(result->c_str());
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_View_SetBackgroundColor(void * jarg1, void * jarg2) {
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;
  Dali::Vector4 *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetBackgroundColor((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_View_ClearBackground(void * jarg1) {
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  {
    try {
      (arg1)->ClearBackground();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_View_KeyEventSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;
  Dali::Toolkit::Control::KeyEventSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Control::KeyEventSignalType *) &(arg1)->KeyEventSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_View_KeyInputFocusGainedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;
  Dali::Toolkit::Control::KeyInputFocusSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Control::KeyInputFocusSignalType *) &(arg1)->KeyInputFocusGainedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_View_KeyInputFocusLostSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;
  Dali::Toolkit::Control::KeyInputFocusSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Control::KeyInputFocusSignalType *) &(arg1)->KeyInputFocusLostSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_View__SWIG_2(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Internal::Control *arg1 = 0 ;
  Dali::Toolkit::Control *result = 0 ;

  arg1 = (Dali::Toolkit::Internal::Control *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Internal::Control & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Control *)new Dali::Toolkit::Control(*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_View_GetVisualResourceStatus(void * jarg1, int jarg2)
{
  int jresult;
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;
  arg1 = (Dali::Toolkit::Control *)jarg1;

  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Control & type is null", 0);
    return 0;
  }

  Dali::Property::Index arg2 = 0 ;
  arg2 = (Dali::Property::Index)jarg2;

  Toolkit::Visual::ResourceStatus result;
  {
    try {
      result = arg1->GetVisualResourceStatus(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_View_CreateTransition(void * jarg1, void * jarg2)
{
  void * jresult;
  Dali::Toolkit::Control *arg1 = (Dali::Toolkit::Control *) 0 ;
  arg1 = (Dali::Toolkit::Control *)jarg1;

  Dali::Toolkit::Internal::Control& controlImpl = Dali::Toolkit::Internal::GetImplementation( *arg1 );

  Dali::Toolkit::TransitionData *arg2 = 0 ;
  Dali::Animation result;

  arg2 = (Dali::Toolkit::TransitionData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::TransitionData const & type is null", 0);
    return 0;
  }
  {
    try {
      result = DevelControl::CreateTransition( controlImpl, (Dali::Toolkit::TransitionData const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Animation((const Dali::Animation &)result);
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_View_DoAction(void * jarg1, int jarg2, int jarg3, void * jarg4 )
{
  Dali::Toolkit::Control arg1;
  Dali::Toolkit::Control *argp1  = (Dali::Toolkit::Control *)jarg1;

  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Control & type is null", 0);
  }
  arg1 = *argp1;

  Dali::Property::Index arg2 = 0 ;
  arg2 = (Dali::Property::Index)jarg2;

  Dali::Property::Index arg3 = 0 ;
  arg3 = (Dali::Property::Index)jarg3;

  Dali::Property::Value *arg4 = (Dali::Property::Value *)jarg4;

  {
    try {
      DevelControl::DoAction(arg1, arg2, arg3, *arg4);
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT void* SWIGSTDCALL CSharp_Dali_View_GetVisualProperty(void* control, int propertyIndex, int visualPropertyIndex)
{
  if (!control)
  {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Given control is null", 0);
    return 0;
  }

  void* result = 0;
  try
  {
    Dali::Property property = DevelControl::GetVisualProperty(*((Dali::Toolkit::Control*)control), (Dali::Property::Index)propertyIndex, (Dali::Property::Index)visualPropertyIndex);
    result = new Dali::Property(property.object, property.propertyIndex, property.componentIndex);
  }
  CALL_CATCH_EXCEPTION(0);

  return result;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ResourceReadySignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Control *arg1 = 0 ;
  Dali::Toolkit::Control::ResourceReadySignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Control & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Control::ResourceReadySignalType *) &arg1->ResourceReadySignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_IsResourceReady(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::Control *arg1 = 0 ;
  bool result;

  arg1 = (Dali::Toolkit::Control *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Control const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)arg1->IsResourceReady();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_KeyInputFocusManager() {
  void * jresult ;
  Dali::Toolkit::KeyInputFocusManager *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::KeyInputFocusManager *)new Dali::Toolkit::KeyInputFocusManager();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_KeyInputFocusManager(void * jarg1) {
  Dali::Toolkit::KeyInputFocusManager *arg1 = (Dali::Toolkit::KeyInputFocusManager *) 0 ;

  arg1 = (Dali::Toolkit::KeyInputFocusManager *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_KeyInputFocusManager_Get() {
  void * jresult ;
  Dali::Toolkit::KeyInputFocusManager result;

  {
    try {
      result = Dali::Toolkit::KeyInputFocusManager::Get();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::KeyInputFocusManager((const Dali::Toolkit::KeyInputFocusManager &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_KeyInputFocusManager_SetFocus(void * jarg1, void * jarg2) {
  Dali::Toolkit::KeyInputFocusManager *arg1 = (Dali::Toolkit::KeyInputFocusManager *) 0 ;
  Dali::Toolkit::Control arg2 ;
  Dali::Toolkit::Control *argp2 ;

  arg1 = (Dali::Toolkit::KeyInputFocusManager *)jarg1;
  argp2 = (Dali::Toolkit::Control *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::Control", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetFocus(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_KeyInputFocusManager_GetCurrentFocusControl(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::KeyInputFocusManager *arg1 = (Dali::Toolkit::KeyInputFocusManager *) 0 ;
  Dali::Toolkit::Control result;

  arg1 = (Dali::Toolkit::KeyInputFocusManager *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::KeyInputFocusManager const *)arg1)->GetCurrentFocusControl();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Control((const Dali::Toolkit::Control &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_KeyInputFocusManager_RemoveFocus(void * jarg1, void * jarg2) {
  Dali::Toolkit::KeyInputFocusManager *arg1 = (Dali::Toolkit::KeyInputFocusManager *) 0 ;
  Dali::Toolkit::Control arg2 ;
  Dali::Toolkit::Control *argp2 ;

  arg1 = (Dali::Toolkit::KeyInputFocusManager *)jarg1;
  argp2 = (Dali::Toolkit::Control *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::Control", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->RemoveFocus(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_KeyInputFocusManager_KeyInputFocusChangedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::KeyInputFocusManager *arg1 = (Dali::Toolkit::KeyInputFocusManager *) 0 ;
  Dali::Toolkit::KeyInputFocusManager::KeyInputFocusChangedSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::KeyInputFocusManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::KeyInputFocusManager::KeyInputFocusChangedSignalType *) &(arg1)->KeyInputFocusChangedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Alignment_Padding__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::Alignment::Padding *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::Alignment::Padding *)new Dali::Toolkit::Alignment::Padding();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Alignment_Padding__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Dali::Toolkit::Alignment::Padding *result = 0 ;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  {
    try {
      result = (Dali::Toolkit::Alignment::Padding *)new Dali::Toolkit::Alignment::Padding(arg1,arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Alignment_Padding_left_set(void * jarg1, float jarg2) {
  Dali::Toolkit::Alignment::Padding *arg1 = (Dali::Toolkit::Alignment::Padding *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::Alignment::Padding *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->left = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Alignment_Padding_left_get(void * jarg1) {
  float jresult ;
  Dali::Toolkit::Alignment::Padding *arg1 = (Dali::Toolkit::Alignment::Padding *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::Alignment::Padding *)jarg1;
  result = (float) ((arg1)->left);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Alignment_Padding_right_set(void * jarg1, float jarg2) {
  Dali::Toolkit::Alignment::Padding *arg1 = (Dali::Toolkit::Alignment::Padding *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::Alignment::Padding *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->right = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Alignment_Padding_right_get(void * jarg1) {
  float jresult ;
  Dali::Toolkit::Alignment::Padding *arg1 = (Dali::Toolkit::Alignment::Padding *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::Alignment::Padding *)jarg1;
  result = (float) ((arg1)->right);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Alignment_Padding_top_set(void * jarg1, float jarg2) {
  Dali::Toolkit::Alignment::Padding *arg1 = (Dali::Toolkit::Alignment::Padding *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::Alignment::Padding *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->top = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Alignment_Padding_top_get(void * jarg1) {
  float jresult ;
  Dali::Toolkit::Alignment::Padding *arg1 = (Dali::Toolkit::Alignment::Padding *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::Alignment::Padding *)jarg1;
  result = (float) ((arg1)->top);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Alignment_Padding_bottom_set(void * jarg1, float jarg2) {
  Dali::Toolkit::Alignment::Padding *arg1 = (Dali::Toolkit::Alignment::Padding *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::Alignment::Padding *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->bottom = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Alignment_Padding_bottom_get(void * jarg1) {
  float jresult ;
  Dali::Toolkit::Alignment::Padding *arg1 = (Dali::Toolkit::Alignment::Padding *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::Alignment::Padding *)jarg1;
  result = (float) ((arg1)->bottom);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Alignment_Padding(void * jarg1) {
  Dali::Toolkit::Alignment::Padding *arg1 = (Dali::Toolkit::Alignment::Padding *) 0 ;

  arg1 = (Dali::Toolkit::Alignment::Padding *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Alignment__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::Alignment *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::Alignment *)new Dali::Toolkit::Alignment();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Alignment_New__SWIG_0(int jarg1, int jarg2) {
  void * jresult ;
  Dali::Toolkit::Alignment::Type arg1 ;
  Dali::Toolkit::Alignment::Type arg2 ;
  Dali::Toolkit::Alignment result;

  arg1 = (Dali::Toolkit::Alignment::Type)jarg1;
  arg2 = (Dali::Toolkit::Alignment::Type)jarg2;
  {
    try {
      result = Dali::Toolkit::Alignment::New(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Alignment((const Dali::Toolkit::Alignment &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Alignment_New__SWIG_1(int jarg1) {
  void * jresult ;
  Dali::Toolkit::Alignment::Type arg1 ;
  Dali::Toolkit::Alignment result;

  arg1 = (Dali::Toolkit::Alignment::Type)jarg1;
  {
    try {
      result = Dali::Toolkit::Alignment::New(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Alignment((const Dali::Toolkit::Alignment &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Alignment_New__SWIG_2() {
  void * jresult ;
  Dali::Toolkit::Alignment result;

  {
    try {
      result = Dali::Toolkit::Alignment::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Alignment((const Dali::Toolkit::Alignment &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Alignment__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Alignment *arg1 = 0 ;
  Dali::Toolkit::Alignment *result = 0 ;

  arg1 = (Dali::Toolkit::Alignment *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Alignment const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Alignment *)new Dali::Toolkit::Alignment((Dali::Toolkit::Alignment const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Alignment(void * jarg1) {
  Dali::Toolkit::Alignment *arg1 = (Dali::Toolkit::Alignment *) 0 ;

  arg1 = (Dali::Toolkit::Alignment *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Alignment_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::Alignment result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::Alignment::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Alignment((const Dali::Toolkit::Alignment &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Alignment_SetAlignmentType(void * jarg1, int jarg2) {
  Dali::Toolkit::Alignment *arg1 = (Dali::Toolkit::Alignment *) 0 ;
  Dali::Toolkit::Alignment::Type arg2 ;

  arg1 = (Dali::Toolkit::Alignment *)jarg1;
  arg2 = (Dali::Toolkit::Alignment::Type)jarg2;
  {
    try {
      (arg1)->SetAlignmentType(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Alignment_GetAlignmentType(void * jarg1) {
  int jresult ;
  Dali::Toolkit::Alignment *arg1 = (Dali::Toolkit::Alignment *) 0 ;
  Dali::Toolkit::Alignment::Type result;

  arg1 = (Dali::Toolkit::Alignment *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Alignment::Type)((Dali::Toolkit::Alignment const *)arg1)->GetAlignmentType();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Alignment_SetScaling(void * jarg1, int jarg2) {
  Dali::Toolkit::Alignment *arg1 = (Dali::Toolkit::Alignment *) 0 ;
  Dali::Toolkit::Alignment::Scaling arg2 ;

  arg1 = (Dali::Toolkit::Alignment *)jarg1;
  arg2 = (Dali::Toolkit::Alignment::Scaling)jarg2;
  {
    try {
      (arg1)->SetScaling(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Alignment_GetScaling(void * jarg1) {
  int jresult ;
  Dali::Toolkit::Alignment *arg1 = (Dali::Toolkit::Alignment *) 0 ;
  Dali::Toolkit::Alignment::Scaling result;

  arg1 = (Dali::Toolkit::Alignment *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Alignment::Scaling)((Dali::Toolkit::Alignment const *)arg1)->GetScaling();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Alignment_SetPadding(void * jarg1, void * jarg2) {
  Dali::Toolkit::Alignment *arg1 = (Dali::Toolkit::Alignment *) 0 ;
  Dali::Toolkit::Alignment::Padding *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Alignment *)jarg1;
  arg2 = (Dali::Toolkit::Alignment::Padding *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Alignment::Padding const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetPadding((Dali::Toolkit::Alignment::Padding const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Alignment_GetPadding(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Alignment *arg1 = (Dali::Toolkit::Alignment *) 0 ;
  Dali::Toolkit::Alignment::Padding *result = 0 ;

  arg1 = (Dali::Toolkit::Alignment *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Alignment::Padding *) &((Dali::Toolkit::Alignment const *)arg1)->GetPadding();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Alignment_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::Alignment *arg1 = (Dali::Toolkit::Alignment *) 0 ;
  Dali::Toolkit::Alignment *arg2 = 0 ;
  Dali::Toolkit::Alignment *result = 0 ;

  arg1 = (Dali::Toolkit::Alignment *)jarg1;
  arg2 = (Dali::Toolkit::Alignment *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Alignment const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Alignment *) &(arg1)->operator =((Dali::Toolkit::Alignment const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Button_Property_DISABLED_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Button::Property::DISABLED;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Button_Property_AUTO_REPEATING_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Button::Property::AUTO_REPEATING;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Button_Property_INITIAL_AUTO_REPEATING_DELAY_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Button::Property::INITIAL_AUTO_REPEATING_DELAY;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Button_Property_NEXT_AUTO_REPEATING_DELAY_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Button::Property::NEXT_AUTO_REPEATING_DELAY;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Button_Property_TOGGLABLE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Button::Property::TOGGLABLE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Button_Property_SELECTED_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Button::Property::SELECTED;
  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Button_Property_LABEL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Button::Property::LABEL;
  jresult = (int)result;
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Button_Property() {
  void * jresult ;
  Dali::Toolkit::Button::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::Button::Property *)new Dali::Toolkit::Button::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Button_Property(void * jarg1) {
  Dali::Toolkit::Button::Property *arg1 = (Dali::Toolkit::Button::Property *) 0 ;

  arg1 = (Dali::Toolkit::Button::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Button__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::Button *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::Button *)new Dali::Toolkit::Button();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Button__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Button *arg1 = 0 ;
  Dali::Toolkit::Button *result = 0 ;

  arg1 = (Dali::Toolkit::Button *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Button const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Button *)new Dali::Toolkit::Button((Dali::Toolkit::Button const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Button_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::Button *arg1 = (Dali::Toolkit::Button *) 0 ;
  Dali::Toolkit::Button *arg2 = 0 ;
  Dali::Toolkit::Button *result = 0 ;

  arg1 = (Dali::Toolkit::Button *)jarg1;
  arg2 = (Dali::Toolkit::Button *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Button const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Button *) &(arg1)->operator =((Dali::Toolkit::Button const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Button_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::Button result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::Button::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Button((const Dali::Toolkit::Button &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Button(void * jarg1) {
  Dali::Toolkit::Button *arg1 = (Dali::Toolkit::Button *) 0 ;

  arg1 = (Dali::Toolkit::Button *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Button_PressedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Button *arg1 = (Dali::Toolkit::Button *) 0 ;
  Dali::Toolkit::Button::ButtonSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Button *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Button::ButtonSignalType *) &(arg1)->PressedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Button_ReleasedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Button *arg1 = (Dali::Toolkit::Button *) 0 ;
  Dali::Toolkit::Button::ButtonSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Button *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Button::ButtonSignalType *) &(arg1)->ReleasedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Button_ClickedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Button *arg1 = (Dali::Toolkit::Button *) 0 ;
  Dali::Toolkit::Button::ButtonSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Button *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Button::ButtonSignalType *) &(arg1)->ClickedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Button_StateChangedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Button *arg1 = (Dali::Toolkit::Button *) 0 ;
  Dali::Toolkit::Button::ButtonSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Button *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Button::ButtonSignalType *) &(arg1)->StateChangedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_CheckBoxButton__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::CheckBoxButton *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::CheckBoxButton *)new Dali::Toolkit::CheckBoxButton();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_CheckBoxButton__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::CheckBoxButton *arg1 = 0 ;
  Dali::Toolkit::CheckBoxButton *result = 0 ;

  arg1 = (Dali::Toolkit::CheckBoxButton *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::CheckBoxButton const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::CheckBoxButton *)new Dali::Toolkit::CheckBoxButton((Dali::Toolkit::CheckBoxButton const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CheckBoxButton_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::CheckBoxButton *arg1 = (Dali::Toolkit::CheckBoxButton *) 0 ;
  Dali::Toolkit::CheckBoxButton *arg2 = 0 ;
  Dali::Toolkit::CheckBoxButton *result = 0 ;

  arg1 = (Dali::Toolkit::CheckBoxButton *)jarg1;
  arg2 = (Dali::Toolkit::CheckBoxButton *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::CheckBoxButton const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::CheckBoxButton *) &(arg1)->operator =((Dali::Toolkit::CheckBoxButton const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_CheckBoxButton(void * jarg1) {
  Dali::Toolkit::CheckBoxButton *arg1 = (Dali::Toolkit::CheckBoxButton *) 0 ;

  arg1 = (Dali::Toolkit::CheckBoxButton *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CheckBoxButton_New() {
  void * jresult ;
  Dali::Toolkit::CheckBoxButton result;

  {
    try {
      result = Dali::Toolkit::CheckBoxButton::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::CheckBoxButton((const Dali::Toolkit::CheckBoxButton &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CheckBoxButton_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::CheckBoxButton result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::CheckBoxButton::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::CheckBoxButton((const Dali::Toolkit::CheckBoxButton &)result);
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PushButton_Property_LABEL_PADDING_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::PushButton::Property::LABEL_PADDING;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PushButton_Property_ICON_PADDING_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::PushButton::Property::ICON_PADDING;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PushButton_Property() {
  void * jresult ;
  Dali::Toolkit::PushButton::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::PushButton::Property *)new Dali::Toolkit::PushButton::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PushButton_Property(void * jarg1) {
  Dali::Toolkit::PushButton::Property *arg1 = (Dali::Toolkit::PushButton::Property *) 0 ;

  arg1 = (Dali::Toolkit::PushButton::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PushButton__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::PushButton *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::PushButton *)new Dali::Toolkit::PushButton();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PushButton__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::PushButton *arg1 = 0 ;
  Dali::Toolkit::PushButton *result = 0 ;

  arg1 = (Dali::Toolkit::PushButton *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::PushButton const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::PushButton *)new Dali::Toolkit::PushButton((Dali::Toolkit::PushButton const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PushButton_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::PushButton *arg1 = (Dali::Toolkit::PushButton *) 0 ;
  Dali::Toolkit::PushButton *arg2 = 0 ;
  Dali::Toolkit::PushButton *result = 0 ;

  arg1 = (Dali::Toolkit::PushButton *)jarg1;
  arg2 = (Dali::Toolkit::PushButton *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::PushButton const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::PushButton *) &(arg1)->operator =((Dali::Toolkit::PushButton const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PushButton(void * jarg1) {
  Dali::Toolkit::PushButton *arg1 = (Dali::Toolkit::PushButton *) 0 ;

  arg1 = (Dali::Toolkit::PushButton *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PushButton_New() {
  void * jresult ;
  Dali::Toolkit::PushButton result;

  {
    try {
      result = Dali::Toolkit::PushButton::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::PushButton((const Dali::Toolkit::PushButton &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PushButton_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::PushButton result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::PushButton::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::PushButton((const Dali::Toolkit::PushButton &)result);
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_RadioButton__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::RadioButton *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::RadioButton *)new Dali::Toolkit::RadioButton();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_RadioButton__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::RadioButton *arg1 = 0 ;
  Dali::Toolkit::RadioButton *result = 0 ;

  arg1 = (Dali::Toolkit::RadioButton *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::RadioButton const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::RadioButton *)new Dali::Toolkit::RadioButton((Dali::Toolkit::RadioButton const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RadioButton_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::RadioButton *arg1 = (Dali::Toolkit::RadioButton *) 0 ;
  Dali::Toolkit::RadioButton *arg2 = 0 ;
  Dali::Toolkit::RadioButton *result = 0 ;

  arg1 = (Dali::Toolkit::RadioButton *)jarg1;
  arg2 = (Dali::Toolkit::RadioButton *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::RadioButton const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::RadioButton *) &(arg1)->operator =((Dali::Toolkit::RadioButton const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_RadioButton(void * jarg1) {
  Dali::Toolkit::RadioButton *arg1 = (Dali::Toolkit::RadioButton *) 0 ;

  arg1 = (Dali::Toolkit::RadioButton *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RadioButton_New__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::RadioButton result;

  {
    try {
      result = Dali::Toolkit::RadioButton::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::RadioButton((const Dali::Toolkit::RadioButton &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RadioButton_New__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::Toolkit::RadioButton result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  {
    try {
      result = Dali::Toolkit::RadioButton::New((std::string const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::RadioButton((const Dali::Toolkit::RadioButton &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RadioButton_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::RadioButton result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::RadioButton::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::RadioButton((const Dali::Toolkit::RadioButton &)result);
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_FlexContainer_Property_CONTENT_DIRECTION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::FlexContainer::Property::CONTENT_DIRECTION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_FlexContainer_Property_FLEX_DIRECTION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::FlexContainer::Property::FLEX_DIRECTION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_FlexContainer_Property_FLEX_WRAP_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::FlexContainer::Property::FLEX_WRAP;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_FlexContainer_Property_JUSTIFY_CONTENT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::FlexContainer::Property::JUSTIFY_CONTENT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_FlexContainer_Property_ALIGN_ITEMS_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::FlexContainer::Property::ALIGN_ITEMS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_FlexContainer_Property_ALIGN_CONTENT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::FlexContainer::Property::ALIGN_CONTENT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_FlexContainer_Property() {
  void * jresult ;
  Dali::Toolkit::FlexContainer::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::FlexContainer::Property *)new Dali::Toolkit::FlexContainer::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_FlexContainer_Property(void * jarg1) {
  Dali::Toolkit::FlexContainer::Property *arg1 = (Dali::Toolkit::FlexContainer::Property *) 0 ;

  arg1 = (Dali::Toolkit::FlexContainer::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_FlexContainer_ChildProperty_FLEX_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::FlexContainer::ChildProperty::FLEX;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_FlexContainer_ChildProperty_ALIGN_SELF_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::FlexContainer::ChildProperty::ALIGN_SELF;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_FlexContainer_ChildProperty_FLEX_MARGIN_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::FlexContainer::ChildProperty::FLEX_MARGIN;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_FlexContainer_ChildProperty() {
  void * jresult ;
  Dali::Toolkit::FlexContainer::ChildProperty *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::FlexContainer::ChildProperty *)new Dali::Toolkit::FlexContainer::ChildProperty();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_FlexContainer_ChildProperty(void * jarg1) {
  Dali::Toolkit::FlexContainer::ChildProperty *arg1 = (Dali::Toolkit::FlexContainer::ChildProperty *) 0 ;

  arg1 = (Dali::Toolkit::FlexContainer::ChildProperty *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_FlexContainer__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::FlexContainer *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::FlexContainer *)new Dali::Toolkit::FlexContainer();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_FlexContainer__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::FlexContainer *arg1 = 0 ;
  Dali::Toolkit::FlexContainer *result = 0 ;

  arg1 = (Dali::Toolkit::FlexContainer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::FlexContainer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::FlexContainer *)new Dali::Toolkit::FlexContainer((Dali::Toolkit::FlexContainer const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_FlexContainer_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::FlexContainer *arg1 = (Dali::Toolkit::FlexContainer *) 0 ;
  Dali::Toolkit::FlexContainer *arg2 = 0 ;
  Dali::Toolkit::FlexContainer *result = 0 ;

  arg1 = (Dali::Toolkit::FlexContainer *)jarg1;
  arg2 = (Dali::Toolkit::FlexContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::FlexContainer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::FlexContainer *) &(arg1)->operator =((Dali::Toolkit::FlexContainer const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_FlexContainer(void * jarg1) {
  Dali::Toolkit::FlexContainer *arg1 = (Dali::Toolkit::FlexContainer *) 0 ;

  arg1 = (Dali::Toolkit::FlexContainer *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_FlexContainer_New() {
  void * jresult ;
  Dali::Toolkit::FlexContainer result;

  {
    try {
      result = Dali::Toolkit::FlexContainer::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::FlexContainer((const Dali::Toolkit::FlexContainer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_FlexContainer_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::FlexContainer result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::FlexContainer::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::FlexContainer((const Dali::Toolkit::FlexContainer &)result);
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ImageView_Property_IMAGE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ImageView::Property::IMAGE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ImageView_Property_PRE_MULTIPLIED_ALPHA_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ImageView::Property::PRE_MULTIPLIED_ALPHA;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ImageView_Property_PIXEL_AREA_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ImageView::Property::PIXEL_AREA;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ImageView_Property() {
  void * jresult ;
  Dali::Toolkit::ImageView::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ImageView::Property *)new Dali::Toolkit::ImageView::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ImageView_Property(void * jarg1) {
  Dali::Toolkit::ImageView::Property *arg1 = (Dali::Toolkit::ImageView::Property *) 0 ;

  arg1 = (Dali::Toolkit::ImageView::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ImageView__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::ImageView *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ImageView *)new Dali::Toolkit::ImageView();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ImageView_New__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::ImageView result;

  {
    try {
      result = Dali::Toolkit::ImageView::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ImageView((const Dali::Toolkit::ImageView &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ImageView_New__SWIG_2(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::Toolkit::ImageView result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  {
    try {
      result = Dali::Toolkit::ImageView::New((std::string const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ImageView((const Dali::Toolkit::ImageView &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ImageView_New__SWIG_3(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::ImageDimensions arg2 ;
  Dali::ImageDimensions *argp2 ;
  Dali::Toolkit::ImageView result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = Dali::Toolkit::ImageView::New((std::string const &)*arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ImageView((const Dali::Toolkit::ImageView &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ImageView(void * jarg1) {
  Dali::Toolkit::ImageView *arg1 = (Dali::Toolkit::ImageView *) 0 ;

  arg1 = (Dali::Toolkit::ImageView *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ImageView__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ImageView *arg1 = 0 ;
  Dali::Toolkit::ImageView *result = 0 ;

  arg1 = (Dali::Toolkit::ImageView *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ImageView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::ImageView *)new Dali::Toolkit::ImageView((Dali::Toolkit::ImageView const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ImageView_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::ImageView *arg1 = (Dali::Toolkit::ImageView *) 0 ;
  Dali::Toolkit::ImageView *arg2 = 0 ;
  Dali::Toolkit::ImageView *result = 0 ;

  arg1 = (Dali::Toolkit::ImageView *)jarg1;
  arg2 = (Dali::Toolkit::ImageView *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ImageView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::ImageView *) &(arg1)->operator =((Dali::Toolkit::ImageView const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ImageView_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::ImageView result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::ImageView::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ImageView((const Dali::Toolkit::ImageView &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ImageView_SetImage__SWIG_1(void * jarg1, char * jarg2) {
  Dali::Toolkit::ImageView *arg1 = (Dali::Toolkit::ImageView *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (Dali::Toolkit::ImageView *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      (arg1)->SetImage((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }


  //argout typemap for const std::string&

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ImageView_SetImage__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  Dali::Toolkit::ImageView *arg1 = (Dali::Toolkit::ImageView *) 0 ;
  std::string *arg2 = 0 ;
  Dali::ImageDimensions arg3 ;
  Dali::ImageDimensions *argp3 ;

  arg1 = (Dali::Toolkit::ImageView *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  argp3 = (Dali::ImageDimensions *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return ;
  }
  arg3 = *argp3;
  {
    try {
      (arg1)->SetImage((std::string const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }


  //argout typemap for const std::string&

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Model3dView_Property_GEOMETRY_URL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Model3dView::Property::GEOMETRY_URL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Model3dView_Property_MATERIAL_URL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Model3dView::Property::MATERIAL_URL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Model3dView_Property_IMAGES_URL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Model3dView::Property::IMAGES_URL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Model3dView_Property_ILLUMINATION_TYPE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Model3dView::Property::ILLUMINATION_TYPE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Model3dView_Property_TEXTURE0_URL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Model3dView::Property::TEXTURE0_URL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Model3dView_Property_TEXTURE1_URL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Model3dView::Property::TEXTURE1_URL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Model3dView_Property_TEXTURE2_URL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Model3dView::Property::TEXTURE2_URL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Model3dView_Property_LIGHT_POSITION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Model3dView::Property::LIGHT_POSITION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Model3dView_Property() {
  void * jresult ;
  Dali::Toolkit::Model3dView::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::Model3dView::Property *)new Dali::Toolkit::Model3dView::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Model3dView_Property(void * jarg1) {
  Dali::Toolkit::Model3dView::Property *arg1 = (Dali::Toolkit::Model3dView::Property *) 0 ;

  arg1 = (Dali::Toolkit::Model3dView::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Model3dView_New__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::Model3dView result;

  {
    try {
      result = Dali::Toolkit::Model3dView::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Model3dView((const Dali::Toolkit::Model3dView &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Model3dView_New__SWIG_1(char * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Dali::Toolkit::Model3dView result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str;
  {
    try {
      result = Dali::Toolkit::Model3dView::New((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Model3dView((const Dali::Toolkit::Model3dView &)result);

  //argout typemap for const std::string&


  //argout typemap for const std::string&


  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Model3dView__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::Model3dView *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::Model3dView *)new Dali::Toolkit::Model3dView();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Model3dView(void * jarg1) {
  Dali::Toolkit::Model3dView *arg1 = (Dali::Toolkit::Model3dView *) 0 ;

  arg1 = (Dali::Toolkit::Model3dView *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Model3dView__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Model3dView *arg1 = 0 ;
  Dali::Toolkit::Model3dView *result = 0 ;

  arg1 = (Dali::Toolkit::Model3dView *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Model3dView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Model3dView *)new Dali::Toolkit::Model3dView((Dali::Toolkit::Model3dView const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Model3dView_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::Model3dView *arg1 = (Dali::Toolkit::Model3dView *) 0 ;
  Dali::Toolkit::Model3dView *arg2 = 0 ;
  Dali::Toolkit::Model3dView *result = 0 ;

  arg1 = (Dali::Toolkit::Model3dView *)jarg1;
  arg2 = (Dali::Toolkit::Model3dView *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Model3dView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Model3dView *) &(arg1)->operator =((Dali::Toolkit::Model3dView const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Model3dView_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::Model3dView result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::Model3dView::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Model3dView((const Dali::Toolkit::Model3dView &)result);
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollBar_Property_SCROLL_DIRECTION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollBar::Property::SCROLL_DIRECTION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollBar_Property_INDICATOR_HEIGHT_POLICY_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollBar::Property::INDICATOR_HEIGHT_POLICY;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollBar_Property_INDICATOR_FIXED_HEIGHT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollBar::Property::INDICATOR_FIXED_HEIGHT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollBar_Property_INDICATOR_SHOW_DURATION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollBar::Property::INDICATOR_SHOW_DURATION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollBar_Property_INDICATOR_HIDE_DURATION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollBar::Property::INDICATOR_HIDE_DURATION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollBar_Property_SCROLL_POSITION_INTERVALS_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollBar::Property::SCROLL_POSITION_INTERVALS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollBar_Property_INDICATOR_MINIMUM_HEIGHT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollBar::Property::INDICATOR_MINIMUM_HEIGHT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollBar_Property_INDICATOR_START_PADDING_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollBar::Property::INDICATOR_START_PADDING;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollBar_Property_INDICATOR_END_PADDING_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollBar::Property::INDICATOR_END_PADDING;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ScrollBar_Property() {
  void * jresult ;
  Dali::Toolkit::ScrollBar::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ScrollBar::Property *)new Dali::Toolkit::ScrollBar::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ScrollBar_Property(void * jarg1) {
  Dali::Toolkit::ScrollBar::Property *arg1 = (Dali::Toolkit::ScrollBar::Property *) 0 ;

  arg1 = (Dali::Toolkit::ScrollBar::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ScrollBar__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::ScrollBar *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ScrollBar *)new Dali::Toolkit::ScrollBar();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ScrollBar__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ScrollBar *arg1 = 0 ;
  Dali::Toolkit::ScrollBar *result = 0 ;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ScrollBar const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::ScrollBar *)new Dali::Toolkit::ScrollBar((Dali::Toolkit::ScrollBar const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollBar_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;
  Dali::Toolkit::ScrollBar *arg2 = 0 ;
  Dali::Toolkit::ScrollBar *result = 0 ;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  arg2 = (Dali::Toolkit::ScrollBar *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ScrollBar const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::ScrollBar *) &(arg1)->operator =((Dali::Toolkit::ScrollBar const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ScrollBar(void * jarg1) {
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollBar_New__SWIG_0(int jarg1) {
  void * jresult ;
  Dali::Toolkit::ScrollBar::Direction arg1 ;
  Dali::Toolkit::ScrollBar result;

  arg1 = (Dali::Toolkit::ScrollBar::Direction)jarg1;
  {
    try {
      result = Dali::Toolkit::ScrollBar::New(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ScrollBar((const Dali::Toolkit::ScrollBar &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollBar_New__SWIG_1() {
  void * jresult ;
  Dali::Toolkit::ScrollBar result;

  {
    try {
      result = Dali::Toolkit::ScrollBar::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ScrollBar((const Dali::Toolkit::ScrollBar &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollBar_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::ScrollBar result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::ScrollBar::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ScrollBar((const Dali::Toolkit::ScrollBar &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollBar_SetScrollPropertySource(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;
  Dali::Handle arg2 ;
  Dali::Property::Index arg3 ;
  Dali::Property::Index arg4 ;
  Dali::Property::Index arg5 ;
  Dali::Property::Index arg6 ;
  Dali::Handle *argp2 ;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  argp2 = (Dali::Handle *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Handle", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (Dali::Property::Index)jarg3;
  arg4 = (Dali::Property::Index)jarg4;
  arg5 = (Dali::Property::Index)jarg5;
  arg6 = (Dali::Property::Index)jarg6;
  {
    try {
      (arg1)->SetScrollPropertySource(arg2,arg3,arg4,arg5,arg6);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollBar_SetScrollIndicator(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetScrollIndicator(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollBar_GetScrollIndicator(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;
  Dali::Actor result;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  {
    try {
      result = (arg1)->GetScrollIndicator();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollBar_SetScrollPositionIntervals(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;
  Dali::Vector< float,TypeTraits< float >::IS_TRIVIAL_TYPE==true > *arg2 = 0 ;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  arg2 = (Dali::Vector< float,TypeTraits< float >::IS_TRIVIAL_TYPE==true > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector< float,TypeTraits< float >::IS_TRIVIAL_TYPE==true > const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetScrollPositionIntervals((Dali::Vector< float,TypeTraits< float >::IS_TRIVIAL_TYPE==true > const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollBar_GetScrollPositionIntervals(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  {
    try {
      jresult = new Dali::Vector< float,TypeTraits< float >::IS_TRIVIAL_TYPE==true >((const Dali::Vector< float,TypeTraits< float >::IS_TRIVIAL_TYPE==true > &)(((Dali::Toolkit::ScrollBar const *)arg1)->GetScrollPositionIntervals()));
    } CALL_CATCH_EXCEPTION(0);
  }
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollBar_SetScrollDirection(void * jarg1, int jarg2) {
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;
  Dali::Toolkit::ScrollBar::Direction arg2 ;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  arg2 = (Dali::Toolkit::ScrollBar::Direction)jarg2;
  {
    try {
      (arg1)->SetScrollDirection(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollBar_GetScrollDirection(void * jarg1) {
  int jresult ;
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;
  Dali::Toolkit::ScrollBar::Direction result;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  {
    try {
      result = (Dali::Toolkit::ScrollBar::Direction)((Dali::Toolkit::ScrollBar const *)arg1)->GetScrollDirection();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollBar_SetIndicatorHeightPolicy(void * jarg1, int jarg2) {
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;
  Dali::Toolkit::ScrollBar::IndicatorHeightPolicy arg2 ;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  arg2 = (Dali::Toolkit::ScrollBar::IndicatorHeightPolicy)jarg2;
  {
    try {
      (arg1)->SetIndicatorHeightPolicy(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollBar_GetIndicatorHeightPolicy(void * jarg1) {
  int jresult ;
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;
  Dali::Toolkit::ScrollBar::IndicatorHeightPolicy result;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  {
    try {
      result = (Dali::Toolkit::ScrollBar::IndicatorHeightPolicy)((Dali::Toolkit::ScrollBar const *)arg1)->GetIndicatorHeightPolicy();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollBar_SetIndicatorFixedHeight(void * jarg1, float jarg2) {
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetIndicatorFixedHeight(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ScrollBar_GetIndicatorFixedHeight(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ScrollBar const *)arg1)->GetIndicatorFixedHeight();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollBar_SetIndicatorShowDuration(void * jarg1, float jarg2) {
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetIndicatorShowDuration(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ScrollBar_GetIndicatorShowDuration(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ScrollBar const *)arg1)->GetIndicatorShowDuration();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollBar_SetIndicatorHideDuration(void * jarg1, float jarg2) {
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetIndicatorHideDuration(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ScrollBar_GetIndicatorHideDuration(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ScrollBar const *)arg1)->GetIndicatorHideDuration();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollBar_ShowIndicator(void * jarg1) {
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  {
    try {
      (arg1)->ShowIndicator();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollBar_HideIndicator(void * jarg1) {
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  {
    try {
      (arg1)->HideIndicator();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollBar_PanFinishedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;
  Dali::Toolkit::ScrollBar::PanFinishedSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  {
    try {
      result = (Dali::Toolkit::ScrollBar::PanFinishedSignalType *) &(arg1)->PanFinishedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollBar_ScrollPositionIntervalReachedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ScrollBar *arg1 = (Dali::Toolkit::ScrollBar *) 0 ;
  Dali::Toolkit::ScrollBar::ScrollPositionIntervalReachedSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::ScrollBar *)jarg1;
  {
    try {
      result = (Dali::Toolkit::ScrollBar::ScrollPositionIntervalReachedSignalType *) &(arg1)->ScrollPositionIntervalReachedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Scrollable_Property_OVERSHOOT_EFFECT_COLOR_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Scrollable::Property::OVERSHOOT_EFFECT_COLOR;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Scrollable_Property_OVERSHOOT_ANIMATION_SPEED_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Scrollable::Property::OVERSHOOT_ANIMATION_SPEED;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Scrollable_Property_OVERSHOOT_ENABLED_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Scrollable::Property::OVERSHOOT_ENABLED;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Scrollable_Property_OVERSHOOT_SIZE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Scrollable::Property::OVERSHOOT_SIZE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Scrollable_Property_SCROLL_TO_ALPHA_FUNCTION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Scrollable::Property::SCROLL_TO_ALPHA_FUNCTION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Scrollable_Property_SCROLL_RELATIVE_POSITION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Scrollable::Property::SCROLL_RELATIVE_POSITION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Scrollable_Property_SCROLL_POSITION_MIN_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Scrollable::Property::SCROLL_POSITION_MIN;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Scrollable_Property_SCROLL_POSITION_MIN_X_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Scrollable::Property::SCROLL_POSITION_MIN_X;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Scrollable_Property_SCROLL_POSITION_MIN_Y_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Scrollable::Property::SCROLL_POSITION_MIN_Y;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Scrollable_Property_SCROLL_POSITION_MAX_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Scrollable::Property::SCROLL_POSITION_MAX;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Scrollable_Property_SCROLL_POSITION_MAX_X_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Scrollable::Property::SCROLL_POSITION_MAX_X;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Scrollable_Property_SCROLL_POSITION_MAX_Y_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Scrollable::Property::SCROLL_POSITION_MAX_Y;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Scrollable_Property_CAN_SCROLL_VERTICAL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Scrollable::Property::CAN_SCROLL_VERTICAL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Scrollable_Property_CAN_SCROLL_HORIZONTAL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Scrollable::Property::CAN_SCROLL_HORIZONTAL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Scrollable_Property() {
  void * jresult ;
  Dali::Toolkit::Scrollable::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::Scrollable::Property *)new Dali::Toolkit::Scrollable::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Scrollable_Property(void * jarg1) {
  Dali::Toolkit::Scrollable::Property *arg1 = (Dali::Toolkit::Scrollable::Property *) 0 ;

  arg1 = (Dali::Toolkit::Scrollable::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Scrollable__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::Scrollable *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::Scrollable *)new Dali::Toolkit::Scrollable();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Scrollable__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Scrollable *arg1 = 0 ;
  Dali::Toolkit::Scrollable *result = 0 ;

  arg1 = (Dali::Toolkit::Scrollable *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Scrollable const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Scrollable *)new Dali::Toolkit::Scrollable((Dali::Toolkit::Scrollable const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Scrollable_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::Scrollable *arg1 = (Dali::Toolkit::Scrollable *) 0 ;
  Dali::Toolkit::Scrollable *arg2 = 0 ;
  Dali::Toolkit::Scrollable *result = 0 ;

  arg1 = (Dali::Toolkit::Scrollable *)jarg1;
  arg2 = (Dali::Toolkit::Scrollable *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Scrollable const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Scrollable *) &(arg1)->operator =((Dali::Toolkit::Scrollable const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Scrollable(void * jarg1) {
  Dali::Toolkit::Scrollable *arg1 = (Dali::Toolkit::Scrollable *) 0 ;

  arg1 = (Dali::Toolkit::Scrollable *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Scrollable_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::Scrollable result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::Scrollable::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Scrollable((const Dali::Toolkit::Scrollable &)result);
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Scrollable_IsOvershootEnabled(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::Scrollable *arg1 = (Dali::Toolkit::Scrollable *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::Scrollable *)jarg1;
  {
    try {
      result = (bool)((Dali::Toolkit::Scrollable const *)arg1)->IsOvershootEnabled();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Scrollable_SetOvershootEnabled(void * jarg1, bool jarg2) {
  Dali::Toolkit::Scrollable *arg1 = (Dali::Toolkit::Scrollable *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Toolkit::Scrollable *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetOvershootEnabled(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Scrollable_SetOvershootEffectColor(void * jarg1, void * jarg2) {
  Dali::Toolkit::Scrollable *arg1 = (Dali::Toolkit::Scrollable *) 0 ;
  Dali::Vector4 *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Scrollable *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetOvershootEffectColor((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Scrollable_GetOvershootEffectColor(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Scrollable *arg1 = (Dali::Toolkit::Scrollable *) 0 ;
  Dali::Vector4 result;

  arg1 = (Dali::Toolkit::Scrollable *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::Scrollable const *)arg1)->GetOvershootEffectColor();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Scrollable_SetOvershootAnimationSpeed(void * jarg1, float jarg2) {
  Dali::Toolkit::Scrollable *arg1 = (Dali::Toolkit::Scrollable *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::Scrollable *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetOvershootAnimationSpeed(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Scrollable_GetOvershootAnimationSpeed(void * jarg1) {
  float jresult ;
  Dali::Toolkit::Scrollable *arg1 = (Dali::Toolkit::Scrollable *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::Scrollable *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::Scrollable const *)arg1)->GetOvershootAnimationSpeed();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Scrollable_ScrollStartedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Scrollable *arg1 = (Dali::Toolkit::Scrollable *) 0 ;
  Dali::Toolkit::Scrollable::ScrollStartedSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Scrollable *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Scrollable::ScrollStartedSignalType *) &(arg1)->ScrollStartedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Scrollable_ScrollUpdatedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Scrollable *arg1 = (Dali::Toolkit::Scrollable *) 0 ;
  Dali::Toolkit::Scrollable::ScrollUpdatedSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Scrollable *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Scrollable::ScrollUpdatedSignalType *) &(arg1)->ScrollUpdatedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Scrollable_ScrollCompletedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Scrollable *arg1 = (Dali::Toolkit::Scrollable *) 0 ;
  Dali::Toolkit::Scrollable::ScrollCompletedSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Scrollable *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Scrollable::ScrollCompletedSignalType *) &(arg1)->ScrollCompletedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_IsVertical(int jarg1) {
  bool jresult ;
  Dali::Toolkit::ControlOrientation::Type arg1 ;
  bool result;

  arg1 = (Dali::Toolkit::ControlOrientation::Type)jarg1;
  {
    try {
      result = (bool)Dali::Toolkit::IsVertical(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_IsHorizontal(int jarg1) {
  bool jresult ;
  Dali::Toolkit::ControlOrientation::Type arg1 ;
  bool result;

  arg1 = (Dali::Toolkit::ControlOrientation::Type)jarg1;
  {
    try {
      result = (bool)Dali::Toolkit::IsHorizontal(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ItemRange__SWIG_0(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Dali::Toolkit::ItemRange *result = 0 ;

  arg1 = (unsigned int)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (Dali::Toolkit::ItemRange *)new Dali::Toolkit::ItemRange(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ItemRange__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ItemRange *arg1 = 0 ;
  Dali::Toolkit::ItemRange *result = 0 ;

  arg1 = (Dali::Toolkit::ItemRange *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ItemRange const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::ItemRange *)new Dali::Toolkit::ItemRange((Dali::Toolkit::ItemRange const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemRange_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::ItemRange *arg1 = (Dali::Toolkit::ItemRange *) 0 ;
  Dali::Toolkit::ItemRange *arg2 = 0 ;
  Dali::Toolkit::ItemRange *result = 0 ;

  arg1 = (Dali::Toolkit::ItemRange *)jarg1;
  arg2 = (Dali::Toolkit::ItemRange *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ItemRange const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::ItemRange *) &(arg1)->operator =((Dali::Toolkit::ItemRange const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ItemRange_Within(void * jarg1, unsigned int jarg2) {
  bool jresult ;
  Dali::Toolkit::ItemRange *arg1 = (Dali::Toolkit::ItemRange *) 0 ;
  unsigned int arg2 ;
  bool result;

  arg1 = (Dali::Toolkit::ItemRange *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (bool)(arg1)->Within(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemRange_Intersection(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::ItemRange *arg1 = (Dali::Toolkit::ItemRange *) 0 ;
  Dali::Toolkit::ItemRange *arg2 = 0 ;
  SwigValueWrapper< Dali::Toolkit::ItemRange > result;

  arg1 = (Dali::Toolkit::ItemRange *)jarg1;
  arg2 = (Dali::Toolkit::ItemRange *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ItemRange const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (arg1)->Intersection((Dali::Toolkit::ItemRange const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ItemRange((const Dali::Toolkit::ItemRange &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemRange_begin_set(void * jarg1, unsigned int jarg2) {
  Dali::Toolkit::ItemRange *arg1 = (Dali::Toolkit::ItemRange *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::Toolkit::ItemRange *)jarg1;
  arg2 = (unsigned int)jarg2;
  if (arg1) (arg1)->begin = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_ItemRange_begin_get(void * jarg1) {
  unsigned int jresult ;
  Dali::Toolkit::ItemRange *arg1 = (Dali::Toolkit::ItemRange *) 0 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::ItemRange *)jarg1;
  result = (unsigned int) ((arg1)->begin);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemRange_end_set(void * jarg1, unsigned int jarg2) {
  Dali::Toolkit::ItemRange *arg1 = (Dali::Toolkit::ItemRange *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::Toolkit::ItemRange *)jarg1;
  arg2 = (unsigned int)jarg2;
  if (arg1) (arg1)->end = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_ItemRange_end_get(void * jarg1) {
  unsigned int jresult ;
  Dali::Toolkit::ItemRange *arg1 = (Dali::Toolkit::ItemRange *) 0 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::ItemRange *)jarg1;
  result = (unsigned int) ((arg1)->end);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ItemRange(void * jarg1) {
  Dali::Toolkit::ItemRange *arg1 = (Dali::Toolkit::ItemRange *) 0 ;

  arg1 = (Dali::Toolkit::ItemRange *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ItemLayout(void * jarg1) {
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemLayout_SetOrientation(void * jarg1, int jarg2) {
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  Dali::Toolkit::ControlOrientation::Type arg2 ;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  arg2 = (Dali::Toolkit::ControlOrientation::Type)jarg2;
  {
    try {
      (arg1)->SetOrientation(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ItemLayout_GetOrientation(void * jarg1) {
  int jresult ;
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  Dali::Toolkit::ControlOrientation::Type result;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  {
    try {
      result = (Dali::Toolkit::ControlOrientation::Type)((Dali::Toolkit::ItemLayout const *)arg1)->GetOrientation();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemLayout_SetLayoutProperties(void * jarg1, void * jarg2) {
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  Dali::Property::Map *arg2 = 0 ;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  arg2 = (Dali::Property::Map *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetLayoutProperties((Dali::Property::Map const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemLayout_GetLayoutProperties(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  Dali::Property::Map result;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  {
    try {
      result = (arg1)->GetLayoutProperties();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Property::Map((const Dali::Property::Map &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemLayout_GetItemSize(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  unsigned int arg2 ;
  Dali::Vector3 *arg3 = 0 ;
  Dali::Vector3 *arg4 = 0 ;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (Dali::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  arg4 = (Dali::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 & type is null", 0);
    return ;
  }
  {
    try {
      ((Dali::Toolkit::ItemLayout const *)arg1)->GetItemSize(arg2,(Dali::Vector3 const &)*arg3,*arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemLayout_SetItemSize(void * jarg1, void * jarg2) {
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetItemSize((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ItemLayout_GetMinimumLayoutPosition(void * jarg1, unsigned int jarg2, void * jarg3) {
  float jresult ;
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  unsigned int arg2 ;
  Dali::Vector3 arg3 ;
  Dali::Vector3 *argp3 ;
  float result;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  arg2 = (unsigned int)jarg2;
  argp3 = (Dali::Vector3 *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Vector3", 0);
    return 0;
  }
  arg3 = *argp3;
  {
    try {
      result = (float)((Dali::Toolkit::ItemLayout const *)arg1)->GetMinimumLayoutPosition(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ItemLayout_GetClosestAnchorPosition(void * jarg1, float jarg2) {
  float jresult ;
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  float arg2 ;
  float result;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (float)((Dali::Toolkit::ItemLayout const *)arg1)->GetClosestAnchorPosition(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ItemLayout_GetItemScrollToPosition(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  unsigned int arg2 ;
  float result;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (float)((Dali::Toolkit::ItemLayout const *)arg1)->GetItemScrollToPosition(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemLayout_GetItemsWithinArea(void * jarg1, float jarg2, void * jarg3) {
  void * jresult ;
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  float arg2 ;
  Dali::Vector3 arg3 ;
  Dali::Vector3 *argp3 ;
  SwigValueWrapper< Dali::Toolkit::ItemRange > result;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  arg2 = (float)jarg2;
  argp3 = (Dali::Vector3 *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Vector3", 0);
    return 0;
  }
  arg3 = *argp3;
  {
    try {
      result = ((Dali::Toolkit::ItemLayout const *)arg1)->GetItemsWithinArea(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ItemRange((const Dali::Toolkit::ItemRange &)result);
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ItemLayout_GetClosestOnScreenLayoutPosition(void * jarg1, int jarg2, float jarg3, void * jarg4) {
  float jresult ;
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  int arg2 ;
  float arg3 ;
  Dali::Vector3 *arg4 = 0 ;
  float result;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (float)jarg3;
  arg4 = (Dali::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (float)(arg1)->GetClosestOnScreenLayoutPosition(arg2,arg3,(Dali::Vector3 const &)*arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_ItemLayout_GetReserveItemCount(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  Dali::Vector3 arg2 ;
  Dali::Vector3 *argp2 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  argp2 = (Dali::Vector3 *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Vector3", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (unsigned int)((Dali::Toolkit::ItemLayout const *)arg1)->GetReserveItemCount(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemLayout_GetDefaultItemSize(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  unsigned int arg2 ;
  Dali::Vector3 *arg3 = 0 ;
  Dali::Vector3 *arg4 = 0 ;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (Dali::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  arg4 = (Dali::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 & type is null", 0);
    return ;
  }
  {
    try {
      ((Dali::Toolkit::ItemLayout const *)arg1)->GetDefaultItemSize(arg2,(Dali::Vector3 const &)*arg3,*arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemLayout_GetScrollDirection(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  Dali::Degree result;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::ItemLayout const *)arg1)->GetScrollDirection();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Degree((const Dali::Degree &)result);
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ItemLayout_GetScrollSpeedFactor(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ItemLayout const *)arg1)->GetScrollSpeedFactor();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ItemLayout_GetMaximumSwipeSpeed(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ItemLayout const *)arg1)->GetMaximumSwipeSpeed();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ItemLayout_GetItemFlickAnimationDuration(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ItemLayout const *)arg1)->GetItemFlickAnimationDuration();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ItemLayout_GetNextFocusItemID(void * jarg1, int jarg2, int jarg3, int jarg4, bool jarg5) {
  int jresult ;
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  int arg2 ;
  int arg3 ;
  Dali::Toolkit::Control::KeyboardFocus::Direction arg4 ;
  bool arg5 ;
  int result;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (Dali::Toolkit::Control::KeyboardFocus::Direction)jarg4;
  arg5 = jarg5 ? true : false;
  {
    try {
      result = (int)(arg1)->GetNextFocusItemID(arg2,arg3,arg4,arg5);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ItemLayout_GetFlickSpeedFactor(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ItemLayout const *)arg1)->GetFlickSpeedFactor();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemLayout_ApplyConstraints(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5) {
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  Dali::Actor *arg2 = 0 ;
  int arg3 ;
  Dali::Vector3 *arg4 = 0 ;
  Dali::Actor *arg5 = 0 ;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  arg2 = (Dali::Actor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor & type is null", 0);
    return ;
  }
  arg3 = (int)jarg3;
  arg4 = (Dali::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  arg5 = (Dali::Actor *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->ApplyConstraints(*arg2,arg3,(Dali::Vector3 const &)*arg4,(Dali::Actor const &)*arg5);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemLayout_GetItemPosition(void * jarg1, int jarg2, float jarg3, void * jarg4) {
  void * jresult ;
  Dali::Toolkit::ItemLayout *arg1 = (Dali::Toolkit::ItemLayout *) 0 ;
  int arg2 ;
  float arg3 ;
  Dali::Vector3 *arg4 = 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Toolkit::ItemLayout *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (float)jarg3;
  arg4 = (Dali::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = ((Dali::Toolkit::ItemLayout const *)arg1)->GetItemPosition(arg2,arg3,(Dali::Vector3 const &)*arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_NewItemLayout(int jarg1) {
  void * jresult ;
  Dali::Toolkit::DefaultItemLayout::Type arg1 ;
  SwigValueWrapper< Dali::IntrusivePtr< Dali::Toolkit::ItemLayout > > result;

  arg1 = (Dali::Toolkit::DefaultItemLayout::Type)jarg1;
  {
    try {
      result = Dali::Toolkit::DefaultItemLayout::New(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ItemLayoutPtr((const Dali::Toolkit::ItemLayoutPtr &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ItemFactory(void * jarg1) {
  Dali::Toolkit::ItemFactory *arg1 = (Dali::Toolkit::ItemFactory *) 0 ;

  arg1 = (Dali::Toolkit::ItemFactory *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_ItemFactory_GetNumberOfItems(void * jarg1) {
  unsigned int jresult ;
  Dali::Toolkit::ItemFactory *arg1 = (Dali::Toolkit::ItemFactory *) 0 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::ItemFactory *)jarg1;
  {
    try {
      result = (unsigned int)(arg1)->GetNumberOfItems();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemFactory_NewItem(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Dali::Toolkit::ItemFactory *arg1 = (Dali::Toolkit::ItemFactory *) 0 ;
  unsigned int arg2 ;
  Dali::Actor result;

  arg1 = (Dali::Toolkit::ItemFactory *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (arg1)->NewItem(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemFactory_ItemReleased(void * jarg1, unsigned int jarg2, void * jarg3) {
  Dali::Toolkit::ItemFactory *arg1 = (Dali::Toolkit::ItemFactory *) 0 ;
  unsigned int arg2 ;
  Dali::Actor arg3 ;
  Dali::Actor *argp3 ;

  arg1 = (Dali::Toolkit::ItemFactory *)jarg1;
  arg2 = (unsigned int)jarg2;
  argp3 = (Dali::Actor *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg3 = *argp3;
  {
    try {
      (arg1)->ItemReleased(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemFactory_ItemReleasedSwigExplicitItemFactory(void * jarg1, unsigned int jarg2, void * jarg3) {
  Dali::Toolkit::ItemFactory *arg1 = (Dali::Toolkit::ItemFactory *) 0 ;
  unsigned int arg2 ;
  Dali::Actor arg3 ;
  Dali::Actor *argp3 ;

  arg1 = (Dali::Toolkit::ItemFactory *)jarg1;
  arg2 = (unsigned int)jarg2;
  argp3 = (Dali::Actor *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg3 = *argp3;
  {
    try {
      (arg1)->Dali::Toolkit::ItemFactory::ItemReleased(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ItemFactory() {
  void * jresult ;
  Dali::Toolkit::ItemFactory *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ItemFactory *)new SwigDirector_ItemFactory();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemFactory_director_connect(void *objarg, SwigDirector_ItemFactory::SWIG_Callback0_t callback0, SwigDirector_ItemFactory::SWIG_Callback1_t callback1, SwigDirector_ItemFactory::SWIG_Callback2_t callback2) {
  Dali::Toolkit::ItemFactory *obj = (Dali::Toolkit::ItemFactory *)objarg;
  SwigDirector_ItemFactory *director = dynamic_cast<SwigDirector_ItemFactory *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ItemView_Property_MINIMUM_SWIPE_SPEED_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ItemView::Property::MINIMUM_SWIPE_SPEED;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ItemView_Property_MINIMUM_SWIPE_DISTANCE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ItemView::Property::MINIMUM_SWIPE_DISTANCE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ItemView_Property_WHEEL_SCROLL_DISTANCE_STEP_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ItemView::Property::WHEEL_SCROLL_DISTANCE_STEP;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ItemView_Property_SNAP_TO_ITEM_ENABLED_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ItemView::Property::SNAP_TO_ITEM_ENABLED;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ItemView_Property_REFRESH_INTERVAL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ItemView::Property::REFRESH_INTERVAL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ItemView_Property_LAYOUT_POSITION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ItemView::Property::LAYOUT_POSITION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ItemView_Property_SCROLL_SPEED_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ItemView::Property::SCROLL_SPEED;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ItemView_Property_OVERSHOOT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ItemView::Property::OVERSHOOT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ItemView_Property_SCROLL_DIRECTION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ItemView::Property::SCROLL_DIRECTION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ItemView_Property_LAYOUT_ORIENTATION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ItemView::Property::LAYOUT_ORIENTATION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ItemView_Property_SCROLL_CONTENT_SIZE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ItemView::Property::SCROLL_CONTENT_SIZE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ItemView_Property() {
  void * jresult ;
  Dali::Toolkit::ItemView::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ItemView::Property *)new Dali::Toolkit::ItemView::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ItemView_Property(void * jarg1) {
  Dali::Toolkit::ItemView::Property *arg1 = (Dali::Toolkit::ItemView::Property *) 0 ;

  arg1 = (Dali::Toolkit::ItemView::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ItemView__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::ItemView *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ItemView *)new Dali::Toolkit::ItemView();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ItemView__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ItemView *arg1 = 0 ;
  Dali::Toolkit::ItemView *result = 0 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ItemView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::ItemView *)new Dali::Toolkit::ItemView((Dali::Toolkit::ItemView const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemView_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Toolkit::ItemView *arg2 = 0 ;
  Dali::Toolkit::ItemView *result = 0 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (Dali::Toolkit::ItemView *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ItemView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::ItemView *) &(arg1)->operator =((Dali::Toolkit::ItemView const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ItemView(void * jarg1) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemView_New(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ItemFactory *arg1 = 0 ;
  Dali::Toolkit::ItemView result;

  arg1 = (Dali::Toolkit::ItemFactory *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ItemFactory & type is null", 0);
    return 0;
  }
  {
    try {
      result = Dali::Toolkit::ItemView::New(*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ItemView((const Dali::Toolkit::ItemView &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemView_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::ItemView result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::ItemView::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ItemView((const Dali::Toolkit::ItemView &)result);
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_ItemView_GetLayoutCount(void * jarg1) {
  unsigned int jresult ;
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::Toolkit::ItemView const *)arg1)->GetLayoutCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_AddLayout(void * jarg1, void * jarg2) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Toolkit::ItemLayout *arg2 = 0 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (Dali::Toolkit::ItemLayout *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ItemLayout & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->AddLayout(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_RemoveLayout(void * jarg1, unsigned int jarg2) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      (arg1)->RemoveLayout(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemView_GetLayout(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  unsigned int arg2 ;
  SwigValueWrapper< Dali::IntrusivePtr< Dali::Toolkit::ItemLayout > > result;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = ((Dali::Toolkit::ItemView const *)arg1)->GetLayout(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ItemLayoutPtr((const Dali::Toolkit::ItemLayoutPtr &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemView_GetActiveLayout(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  SwigValueWrapper< Dali::IntrusivePtr< Dali::Toolkit::ItemLayout > > result;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::ItemView const *)arg1)->GetActiveLayout();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ItemLayoutPtr((const Dali::Toolkit::ItemLayoutPtr &)result);
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ItemView_GetCurrentLayoutPosition(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Toolkit::ItemId arg2 ;
  float result;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (Dali::Toolkit::ItemId)jarg2;
  {
    try {
      result = (float)((Dali::Toolkit::ItemView const *)arg1)->GetCurrentLayoutPosition(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_ActivateLayout(void * jarg1, unsigned int jarg2, void * jarg3, float jarg4) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  unsigned int arg2 ;
  Dali::Vector3 arg3 ;
  float arg4 ;
  Dali::Vector3 *argp3 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (unsigned int)jarg2;
  argp3 = (Dali::Vector3 *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Vector3", 0);
    return ;
  }
  arg3 = *argp3;
  arg4 = (float)jarg4;
  {
    try {
      (arg1)->ActivateLayout(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_DeactivateCurrentLayout(void * jarg1) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  {
    try {
      (arg1)->DeactivateCurrentLayout();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_SetMinimumSwipeSpeed(void * jarg1, float jarg2) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetMinimumSwipeSpeed(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ItemView_GetMinimumSwipeSpeed(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ItemView const *)arg1)->GetMinimumSwipeSpeed();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_SetMinimumSwipeDistance(void * jarg1, float jarg2) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetMinimumSwipeDistance(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ItemView_GetMinimumSwipeDistance(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ItemView const *)arg1)->GetMinimumSwipeDistance();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_SetWheelScrollDistanceStep(void * jarg1, float jarg2) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetWheelScrollDistanceStep(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ItemView_GetWheelScrollDistanceStep(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ItemView const *)arg1)->GetWheelScrollDistanceStep();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_SetAnchoring(void * jarg1, bool jarg2) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetAnchoring(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}

//// ========================= end of part 3 =============================

//// ========================== start part 4 ===============================


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ItemView_GetAnchoring(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  {
    try {
      result = (bool)((Dali::Toolkit::ItemView const *)arg1)->GetAnchoring();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_SetAnchoringDuration(void * jarg1, float jarg2) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetAnchoringDuration(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ItemView_GetAnchoringDuration(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ItemView const *)arg1)->GetAnchoringDuration();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_ScrollToItem(void * jarg1, unsigned int jarg2, float jarg3) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Toolkit::ItemId arg2 ;
  float arg3 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (Dali::Toolkit::ItemId)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->ScrollToItem(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_SetRefreshInterval(void * jarg1, float jarg2) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetRefreshInterval(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ItemView_GetRefreshInterval(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ItemView const *)arg1)->GetRefreshInterval();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_Refresh(void * jarg1) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  {
    try {
      (arg1)->Refresh();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemView_GetItem(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Toolkit::ItemId arg2 ;
  Dali::Actor result;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (Dali::Toolkit::ItemId)jarg2;
  {
    try {
      result = ((Dali::Toolkit::ItemView const *)arg1)->GetItem(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_ItemView_GetItemId(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;
  Dali::Toolkit::ItemId result;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (Dali::Toolkit::ItemId)((Dali::Toolkit::ItemView const *)arg1)->GetItemId(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_InsertItem(void * jarg1, void * jarg2, float jarg3) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Toolkit::Item arg2 ;
  float arg3 ;
  Dali::Toolkit::Item *argp2 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  argp2 = (Dali::Toolkit::Item *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::Item", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->InsertItem(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_InsertItems(void * jarg1, void * jarg2, float jarg3) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Toolkit::ItemContainer *arg2 = 0 ;
  float arg3 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (Dali::Toolkit::ItemContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ItemContainer const & type is null", 0);
    return ;
  }
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->InsertItems((Dali::Toolkit::ItemContainer const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_RemoveItem(void * jarg1, unsigned int jarg2, float jarg3) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Toolkit::ItemId arg2 ;
  float arg3 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (Dali::Toolkit::ItemId)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->RemoveItem(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_RemoveItems(void * jarg1, void * jarg2, float jarg3) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Toolkit::ItemIdContainer *arg2 = 0 ;
  float arg3 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (Dali::Toolkit::ItemIdContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ItemIdContainer const & type is null", 0);
    return ;
  }
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->RemoveItems((Dali::Toolkit::ItemIdContainer const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_ReplaceItem(void * jarg1, void * jarg2, float jarg3) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Toolkit::Item arg2 ;
  float arg3 ;
  Dali::Toolkit::Item *argp2 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  argp2 = (Dali::Toolkit::Item *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::Item", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->ReplaceItem(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_ReplaceItems(void * jarg1, void * jarg2, float jarg3) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Toolkit::ItemContainer *arg2 = 0 ;
  float arg3 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (Dali::Toolkit::ItemContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ItemContainer const & type is null", 0);
    return ;
  }
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->ReplaceItems((Dali::Toolkit::ItemContainer const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_SetItemsParentOrigin(void * jarg1, void * jarg2) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetItemsParentOrigin((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemView_GetItemsParentOrigin(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::ItemView const *)arg1)->GetItemsParentOrigin();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_SetItemsAnchorPoint(void * jarg1, void * jarg2) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Vector3 *arg2 = 0 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetItemsAnchorPoint((Dali::Vector3 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemView_GetItemsAnchorPoint(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Vector3 result;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::ItemView const *)arg1)->GetItemsAnchorPoint();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector3((const Dali::Vector3 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemView_GetItemsRange(void * jarg1, void * jarg2) {
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Toolkit::ItemRange *arg2 = 0 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  arg2 = (Dali::Toolkit::ItemRange *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ItemRange & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->GetItemsRange(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemView_LayoutActivatedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ItemView *arg1 = (Dali::Toolkit::ItemView *) 0 ;
  Dali::Toolkit::ItemView::LayoutActivatedSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::ItemView *)jarg1;
  {
    try {
      result = (Dali::Toolkit::ItemView::LayoutActivatedSignalType *) &(arg1)->LayoutActivatedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_MoveActorConstraint(void * jarg1, void * jarg2) {
  Dali::Vector3 *arg1 = 0 ;
  PropertyInputContainer *arg2 = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 & type is null", 0);
    return ;
  }
  arg2 = (PropertyInputContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PropertyInputContainer const & type is null", 0);
    return ;
  }
  {
    try {
      Dali::Toolkit::MoveActorConstraint(*arg1,(PropertyInputContainer const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WrapActorConstraint(void * jarg1, void * jarg2) {
  Dali::Vector3 *arg1 = 0 ;
  PropertyInputContainer *arg2 = 0 ;

  arg1 = (Dali::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 & type is null", 0);
    return ;
  }
  arg2 = (PropertyInputContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PropertyInputContainer const & type is null", 0);
    return ;
  }
  {
    try {
      Dali::Toolkit::WrapActorConstraint(*arg1,(PropertyInputContainer const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ScrollViewEffect() {
  void * jresult ;
  Dali::Toolkit::ScrollViewEffect *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ScrollViewEffect *)new Dali::Toolkit::ScrollViewEffect();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ScrollViewEffect(void * jarg1) {
  Dali::Toolkit::ScrollViewEffect *arg1 = (Dali::Toolkit::ScrollViewEffect *) 0 ;

  arg1 = (Dali::Toolkit::ScrollViewEffect *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollViewPagePathEffect_New(void * jarg1, void * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  Dali::Path arg1 ;
  Dali::Vector3 *arg2 = 0 ;
  Dali::Property::Index arg3 ;
  Dali::Vector3 *arg4 = 0 ;
  unsigned int arg5 ;
  Dali::Path *argp1 ;
  Dali::Toolkit::ScrollViewPagePathEffect result;

  argp1 = (Dali::Path *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Path", 0);
    return 0;
  }
  arg1 = *argp1;
  arg2 = (Dali::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  arg3 = (Dali::Property::Index)jarg3;
  arg4 = (Dali::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector3 const & type is null", 0);
    return 0;
  }
  arg5 = (unsigned int)jarg5;
  {
    try {
      result = Dali::Toolkit::ScrollViewPagePathEffect::New(arg1,(Dali::Vector3 const &)*arg2,arg3,(Dali::Vector3 const &)*arg4,arg5);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ScrollViewPagePathEffect((const Dali::Toolkit::ScrollViewPagePathEffect &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ScrollViewPagePathEffect() {
  void * jresult ;
  Dali::Toolkit::ScrollViewPagePathEffect *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ScrollViewPagePathEffect *)new Dali::Toolkit::ScrollViewPagePathEffect();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollViewPagePathEffect_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::ScrollViewPagePathEffect result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::ScrollViewPagePathEffect::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ScrollViewPagePathEffect((const Dali::Toolkit::ScrollViewPagePathEffect &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollViewPagePathEffect_ApplyToPage(void * jarg1, void * jarg2, unsigned int jarg3) {
  Dali::Toolkit::ScrollViewPagePathEffect *arg1 = (Dali::Toolkit::ScrollViewPagePathEffect *) 0 ;
  Dali::Actor arg2 ;
  unsigned int arg3 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Toolkit::ScrollViewPagePathEffect *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (unsigned int)jarg3;
  {
    try {
      (arg1)->ApplyToPage(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ScrollViewPagePathEffect(void * jarg1) {
  Dali::Toolkit::ScrollViewPagePathEffect *arg1 = (Dali::Toolkit::ScrollViewPagePathEffect *) 0 ;

  arg1 = (Dali::Toolkit::ScrollViewPagePathEffect *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ClampState2D_x_set(void * jarg1, int jarg2) {
  Dali::Toolkit::ClampState2D *arg1 = (Dali::Toolkit::ClampState2D *) 0 ;
  Dali::Toolkit::ClampState arg2 ;

  arg1 = (Dali::Toolkit::ClampState2D *)jarg1;
  arg2 = (Dali::Toolkit::ClampState)jarg2;
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ClampState2D_x_get(void * jarg1) {
  int jresult ;
  Dali::Toolkit::ClampState2D *arg1 = (Dali::Toolkit::ClampState2D *) 0 ;
  Dali::Toolkit::ClampState result;

  arg1 = (Dali::Toolkit::ClampState2D *)jarg1;
  result = (Dali::Toolkit::ClampState) ((arg1)->x);
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ClampState2D_y_set(void * jarg1, int jarg2) {
  Dali::Toolkit::ClampState2D *arg1 = (Dali::Toolkit::ClampState2D *) 0 ;
  Dali::Toolkit::ClampState arg2 ;

  arg1 = (Dali::Toolkit::ClampState2D *)jarg1;
  arg2 = (Dali::Toolkit::ClampState)jarg2;
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ClampState2D_y_get(void * jarg1) {
  int jresult ;
  Dali::Toolkit::ClampState2D *arg1 = (Dali::Toolkit::ClampState2D *) 0 ;
  Dali::Toolkit::ClampState result;

  arg1 = (Dali::Toolkit::ClampState2D *)jarg1;
  result = (Dali::Toolkit::ClampState) ((arg1)->y);
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ClampState2D() {
  void * jresult ;
  Dali::Toolkit::ClampState2D *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ClampState2D *)new Dali::Toolkit::ClampState2D();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ClampState2D(void * jarg1) {
  Dali::Toolkit::ClampState2D *arg1 = (Dali::Toolkit::ClampState2D *) 0 ;

  arg1 = (Dali::Toolkit::ClampState2D *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_RulerDomain__SWIG_0(float jarg1, float jarg2, bool jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  bool arg3 ;
  Dali::Toolkit::RulerDomain *result = 0 ;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = jarg3 ? true : false;
  {
    try {
      result = (Dali::Toolkit::RulerDomain *)new Dali::Toolkit::RulerDomain(arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_RulerDomain__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Dali::Toolkit::RulerDomain *result = 0 ;

  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (Dali::Toolkit::RulerDomain *)new Dali::Toolkit::RulerDomain(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RulerDomain_min_set(void * jarg1, float jarg2) {
  Dali::Toolkit::RulerDomain *arg1 = (Dali::Toolkit::RulerDomain *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::RulerDomain *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->min = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerDomain_min_get(void * jarg1) {
  float jresult ;
  Dali::Toolkit::RulerDomain *arg1 = (Dali::Toolkit::RulerDomain *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::RulerDomain *)jarg1;
  result = (float) ((arg1)->min);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RulerDomain_max_set(void * jarg1, float jarg2) {
  Dali::Toolkit::RulerDomain *arg1 = (Dali::Toolkit::RulerDomain *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::RulerDomain *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->max = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerDomain_max_get(void * jarg1) {
  float jresult ;
  Dali::Toolkit::RulerDomain *arg1 = (Dali::Toolkit::RulerDomain *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::RulerDomain *)jarg1;
  result = (float) ((arg1)->max);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RulerDomain_enabled_set(void * jarg1, bool jarg2) {
  Dali::Toolkit::RulerDomain *arg1 = (Dali::Toolkit::RulerDomain *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Toolkit::RulerDomain *)jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_RulerDomain_enabled_get(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::RulerDomain *arg1 = (Dali::Toolkit::RulerDomain *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::RulerDomain *)jarg1;
  result = (bool) ((arg1)->enabled);
  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerDomain_Clamp__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  Dali::Toolkit::RulerDomain *arg1 = (Dali::Toolkit::RulerDomain *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;

  arg1 = (Dali::Toolkit::RulerDomain *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  {
    try {
      result = (float)((Dali::Toolkit::RulerDomain const *)arg1)->Clamp(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerDomain_Clamp__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  float jresult ;
  Dali::Toolkit::RulerDomain *arg1 = (Dali::Toolkit::RulerDomain *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;

  arg1 = (Dali::Toolkit::RulerDomain *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      result = (float)((Dali::Toolkit::RulerDomain const *)arg1)->Clamp(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerDomain_Clamp__SWIG_2(void * jarg1, float jarg2) {
  float jresult ;
  Dali::Toolkit::RulerDomain *arg1 = (Dali::Toolkit::RulerDomain *) 0 ;
  float arg2 ;
  float result;

  arg1 = (Dali::Toolkit::RulerDomain *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (float)((Dali::Toolkit::RulerDomain const *)arg1)->Clamp(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerDomain_Clamp__SWIG_3(void * jarg1, float jarg2, float jarg3, float jarg4, void * jarg5) {
  float jresult ;
  Dali::Toolkit::RulerDomain *arg1 = (Dali::Toolkit::RulerDomain *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Dali::Toolkit::ClampState *arg5 = 0 ;
  float result;

  arg1 = (Dali::Toolkit::RulerDomain *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (Dali::Toolkit::ClampState *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ClampState & type is null", 0);
    return 0;
  }
  {
    try {
      result = (float)((Dali::Toolkit::RulerDomain const *)arg1)->Clamp(arg2,arg3,arg4,*arg5);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerDomain_GetSize(void * jarg1) {
  float jresult ;
  Dali::Toolkit::RulerDomain *arg1 = (Dali::Toolkit::RulerDomain *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::RulerDomain *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::RulerDomain const *)arg1)->GetSize();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_RulerDomain(void * jarg1) {
  Dali::Toolkit::RulerDomain *arg1 = (Dali::Toolkit::RulerDomain *) 0 ;

  arg1 = (Dali::Toolkit::RulerDomain *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Ruler_Snap__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  float jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      result = (float)((Dali::Toolkit::Ruler const *)arg1)->Snap(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Ruler_Snap__SWIG_1(void * jarg1, float jarg2) {
  float jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  float arg2 ;
  float result;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (float)((Dali::Toolkit::Ruler const *)arg1)->Snap(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Ruler_GetPositionFromPage(void * jarg1, unsigned int jarg2, unsigned int * jarg3, bool jarg4) {
  float jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = 0 ;
  bool arg4 ;
  float result;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (unsigned int *)jarg3;
  arg4 = jarg4 ? true : false;
  {
    try {
      result = (float)((Dali::Toolkit::Ruler const *)arg1)->GetPositionFromPage(arg2,*arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_Ruler_GetPageFromPosition(void * jarg1, float jarg2, bool jarg3) {
  unsigned int jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  float arg2 ;
  bool arg3 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  arg2 = (float)jarg2;
  arg3 = jarg3 ? true : false;
  {
    try {
      result = (unsigned int)((Dali::Toolkit::Ruler const *)arg1)->GetPageFromPosition(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_Ruler_GetTotalPages(void * jarg1) {
  unsigned int jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::Toolkit::Ruler const *)arg1)->GetTotalPages();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Ruler_GetType(void * jarg1) {
  int jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  Dali::Toolkit::Ruler::RulerType result;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Ruler::RulerType)((Dali::Toolkit::Ruler const *)arg1)->GetType();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_Ruler_IsEnabled(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  {
    try {
      result = (bool)((Dali::Toolkit::Ruler const *)arg1)->IsEnabled();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Ruler_Enable(void * jarg1) {
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  {
    try {
      (arg1)->Enable();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Ruler_Disable(void * jarg1) {
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  {
    try {
      (arg1)->Disable();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Ruler_SetDomain(void * jarg1, void * jarg2) {
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  SwigValueWrapper< Dali::Toolkit::RulerDomain > arg2 ;
  Dali::Toolkit::RulerDomain *argp2 ;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  argp2 = (Dali::Toolkit::RulerDomain *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::RulerDomain", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetDomain(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Ruler_GetDomain(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  Dali::Toolkit::RulerDomain *result = 0 ;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  {
    try {
      result = (Dali::Toolkit::RulerDomain *) &((Dali::Toolkit::Ruler const *)arg1)->GetDomain();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Ruler_DisableDomain(void * jarg1) {
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  {
    try {
      (arg1)->DisableDomain();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Ruler_Clamp__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  {
    try {
      result = (float)((Dali::Toolkit::Ruler const *)arg1)->Clamp(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Ruler_Clamp__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  float jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      result = (float)((Dali::Toolkit::Ruler const *)arg1)->Clamp(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Ruler_Clamp__SWIG_2(void * jarg1, float jarg2) {
  float jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  float arg2 ;
  float result;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (float)((Dali::Toolkit::Ruler const *)arg1)->Clamp(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Ruler_Clamp__SWIG_3(void * jarg1, float jarg2, float jarg3, float jarg4, void * jarg5) {
  float jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Dali::Toolkit::ClampState *arg5 = 0 ;
  float result;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (Dali::Toolkit::ClampState *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ClampState & type is null", 0);
    return 0;
  }
  {
    try {
      result = (float)((Dali::Toolkit::Ruler const *)arg1)->Clamp(arg2,arg3,arg4,*arg5);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Ruler_SnapAndClamp__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  float jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float result;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  {
    try {
      result = (float)((Dali::Toolkit::Ruler const *)arg1)->SnapAndClamp(arg2,arg3,arg4,arg5);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Ruler_SnapAndClamp__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  {
    try {
      result = (float)((Dali::Toolkit::Ruler const *)arg1)->SnapAndClamp(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Ruler_SnapAndClamp__SWIG_2(void * jarg1, float jarg2, float jarg3) {
  float jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      result = (float)((Dali::Toolkit::Ruler const *)arg1)->SnapAndClamp(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Ruler_SnapAndClamp__SWIG_3(void * jarg1, float jarg2) {
  float jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  float arg2 ;
  float result;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (float)((Dali::Toolkit::Ruler const *)arg1)->SnapAndClamp(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Ruler_SnapAndClamp__SWIG_4(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, void * jarg6) {
  float jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Dali::Toolkit::ClampState *arg6 = 0 ;
  float result;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (Dali::Toolkit::ClampState *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ClampState & type is null", 0);
    return 0;
  }
  {
    try {
      result = (float)((Dali::Toolkit::Ruler const *)arg1)->SnapAndClamp(arg2,arg3,arg4,arg5,*arg6);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_DefaultRuler() {
  void * jresult ;
  Dali::Toolkit::DefaultRuler *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::DefaultRuler *)new Dali::Toolkit::DefaultRuler();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_DefaultRuler_Snap(void * jarg1, float jarg2, float jarg3) {
  float jresult ;
  Dali::Toolkit::DefaultRuler *arg1 = (Dali::Toolkit::DefaultRuler *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;

  arg1 = (Dali::Toolkit::DefaultRuler *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      result = (float)((Dali::Toolkit::DefaultRuler const *)arg1)->Snap(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_DefaultRuler_GetPositionFromPage(void * jarg1, unsigned int jarg2, unsigned int * jarg3, bool jarg4) {
  float jresult ;
  Dali::Toolkit::DefaultRuler *arg1 = (Dali::Toolkit::DefaultRuler *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = 0 ;
  bool arg4 ;
  float result;

  arg1 = (Dali::Toolkit::DefaultRuler *)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (unsigned int *)jarg3;
  arg4 = jarg4 ? true : false;
  {
    try {
      result = (float)((Dali::Toolkit::DefaultRuler const *)arg1)->GetPositionFromPage(arg2,*arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_DefaultRuler_GetPageFromPosition(void * jarg1, float jarg2, bool jarg3) {
  unsigned int jresult ;
  Dali::Toolkit::DefaultRuler *arg1 = (Dali::Toolkit::DefaultRuler *) 0 ;
  float arg2 ;
  bool arg3 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::DefaultRuler *)jarg1;
  arg2 = (float)jarg2;
  arg3 = jarg3 ? true : false;
  {
    try {
      result = (unsigned int)((Dali::Toolkit::DefaultRuler const *)arg1)->GetPageFromPosition(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_DefaultRuler_GetTotalPages(void * jarg1) {
  unsigned int jresult ;
  Dali::Toolkit::DefaultRuler *arg1 = (Dali::Toolkit::DefaultRuler *) 0 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::DefaultRuler *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::Toolkit::DefaultRuler const *)arg1)->GetTotalPages();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_DefaultRuler(void * jarg1) {
  Dali::Toolkit::DefaultRuler *arg1 = (Dali::Toolkit::DefaultRuler *) 0 ;

  arg1 = (Dali::Toolkit::DefaultRuler *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_FixedRuler__SWIG_0(float jarg1) {
  void * jresult ;
  float arg1 ;
  Dali::Toolkit::FixedRuler *result = 0 ;

  arg1 = (float)jarg1;
  {
    try {
      result = (Dali::Toolkit::FixedRuler *)new Dali::Toolkit::FixedRuler(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_FixedRuler__SWIG_1() {
  void * jresult ;
  Dali::Toolkit::FixedRuler *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::FixedRuler *)new Dali::Toolkit::FixedRuler();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_FixedRuler_Snap(void * jarg1, float jarg2, float jarg3) {
  float jresult ;
  Dali::Toolkit::FixedRuler *arg1 = (Dali::Toolkit::FixedRuler *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;

  arg1 = (Dali::Toolkit::FixedRuler *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      result = (float)((Dali::Toolkit::FixedRuler const *)arg1)->Snap(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_FixedRuler_GetPositionFromPage(void * jarg1, unsigned int jarg2, unsigned int * jarg3, bool jarg4) {
  float jresult ;
  Dali::Toolkit::FixedRuler *arg1 = (Dali::Toolkit::FixedRuler *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = 0 ;
  bool arg4 ;
  float result;

  arg1 = (Dali::Toolkit::FixedRuler *)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (unsigned int *)jarg3;
  arg4 = jarg4 ? true : false;
  {
    try {
      result = (float)((Dali::Toolkit::FixedRuler const *)arg1)->GetPositionFromPage(arg2,*arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_FixedRuler_GetPageFromPosition(void * jarg1, float jarg2, bool jarg3) {
  unsigned int jresult ;
  Dali::Toolkit::FixedRuler *arg1 = (Dali::Toolkit::FixedRuler *) 0 ;
  float arg2 ;
  bool arg3 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::FixedRuler *)jarg1;
  arg2 = (float)jarg2;
  arg3 = jarg3 ? true : false;
  {
    try {
      result = (unsigned int)((Dali::Toolkit::FixedRuler const *)arg1)->GetPageFromPosition(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_FixedRuler_GetTotalPages(void * jarg1) {
  unsigned int jresult ;
  Dali::Toolkit::FixedRuler *arg1 = (Dali::Toolkit::FixedRuler *) 0 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::FixedRuler *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::Toolkit::FixedRuler const *)arg1)->GetTotalPages();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_FixedRuler(void * jarg1) {
  Dali::Toolkit::FixedRuler *arg1 = (Dali::Toolkit::FixedRuler *) 0 ;

  arg1 = (Dali::Toolkit::FixedRuler *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_ClampEvent_scale_set(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView::ClampEvent *arg1 = (Dali::Toolkit::ScrollView::ClampEvent *) 0 ;
  Dali::Toolkit::ClampState2D *arg2 = (Dali::Toolkit::ClampState2D *) 0 ;

  arg1 = (Dali::Toolkit::ScrollView::ClampEvent *)jarg1;
  arg2 = (Dali::Toolkit::ClampState2D *)jarg2;
  if (arg1) (arg1)->scale = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollView_ClampEvent_scale_get(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ScrollView::ClampEvent *arg1 = (Dali::Toolkit::ScrollView::ClampEvent *) 0 ;
  Dali::Toolkit::ClampState2D *result = 0 ;

  arg1 = (Dali::Toolkit::ScrollView::ClampEvent *)jarg1;
  result = (Dali::Toolkit::ClampState2D *)& ((arg1)->scale);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_ClampEvent_position_set(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView::ClampEvent *arg1 = (Dali::Toolkit::ScrollView::ClampEvent *) 0 ;
  Dali::Toolkit::ClampState2D *arg2 = (Dali::Toolkit::ClampState2D *) 0 ;

  arg1 = (Dali::Toolkit::ScrollView::ClampEvent *)jarg1;
  arg2 = (Dali::Toolkit::ClampState2D *)jarg2;
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollView_ClampEvent_position_get(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ScrollView::ClampEvent *arg1 = (Dali::Toolkit::ScrollView::ClampEvent *) 0 ;
  Dali::Toolkit::ClampState2D *result = 0 ;

  arg1 = (Dali::Toolkit::ScrollView::ClampEvent *)jarg1;
  result = (Dali::Toolkit::ClampState2D *)& ((arg1)->position);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_ClampEvent_rotation_set(void * jarg1, int jarg2) {
  Dali::Toolkit::ScrollView::ClampEvent *arg1 = (Dali::Toolkit::ScrollView::ClampEvent *) 0 ;
  Dali::Toolkit::ClampState arg2 ;

  arg1 = (Dali::Toolkit::ScrollView::ClampEvent *)jarg1;
  arg2 = (Dali::Toolkit::ClampState)jarg2;
  if (arg1) (arg1)->rotation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_ClampEvent_rotation_get(void * jarg1) {
  int jresult ;
  Dali::Toolkit::ScrollView::ClampEvent *arg1 = (Dali::Toolkit::ScrollView::ClampEvent *) 0 ;
  Dali::Toolkit::ClampState result;

  arg1 = (Dali::Toolkit::ScrollView::ClampEvent *)jarg1;
  result = (Dali::Toolkit::ClampState) ((arg1)->rotation);
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ScrollView_ClampEvent() {
  void * jresult ;
  Dali::Toolkit::ScrollView::ClampEvent *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ScrollView::ClampEvent *)new Dali::Toolkit::ScrollView::ClampEvent();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ScrollView_ClampEvent(void * jarg1) {
  Dali::Toolkit::ScrollView::ClampEvent *arg1 = (Dali::Toolkit::ScrollView::ClampEvent *) 0 ;

  arg1 = (Dali::Toolkit::ScrollView::ClampEvent *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SnapEvent_type_set(void * jarg1, int jarg2) {
  Dali::Toolkit::ScrollView::SnapEvent *arg1 = (Dali::Toolkit::ScrollView::SnapEvent *) 0 ;
  Dali::Toolkit::SnapType arg2 ;

  arg1 = (Dali::Toolkit::ScrollView::SnapEvent *)jarg1;
  arg2 = (Dali::Toolkit::SnapType)jarg2;
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_SnapEvent_type_get(void * jarg1) {
  int jresult ;
  Dali::Toolkit::ScrollView::SnapEvent *arg1 = (Dali::Toolkit::ScrollView::SnapEvent *) 0 ;
  Dali::Toolkit::SnapType result;

  arg1 = (Dali::Toolkit::ScrollView::SnapEvent *)jarg1;
  result = (Dali::Toolkit::SnapType) ((arg1)->type);
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SnapEvent_position_set(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView::SnapEvent *arg1 = (Dali::Toolkit::ScrollView::SnapEvent *) 0 ;
  Dali::Vector2 *arg2 = (Dali::Vector2 *) 0 ;

  arg1 = (Dali::Toolkit::ScrollView::SnapEvent *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollView_SnapEvent_position_get(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ScrollView::SnapEvent *arg1 = (Dali::Toolkit::ScrollView::SnapEvent *) 0 ;
  Dali::Vector2 *result = 0 ;

  arg1 = (Dali::Toolkit::ScrollView::SnapEvent *)jarg1;
  result = (Dali::Vector2 *)& ((arg1)->position);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SnapEvent_duration_set(void * jarg1, float jarg2) {
  Dali::Toolkit::ScrollView::SnapEvent *arg1 = (Dali::Toolkit::ScrollView::SnapEvent *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::ScrollView::SnapEvent *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->duration = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ScrollView_SnapEvent_duration_get(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ScrollView::SnapEvent *arg1 = (Dali::Toolkit::ScrollView::SnapEvent *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ScrollView::SnapEvent *)jarg1;
  result = (float) ((arg1)->duration);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ScrollView_SnapEvent() {
  void * jresult ;
  Dali::Toolkit::ScrollView::SnapEvent *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ScrollView::SnapEvent *)new Dali::Toolkit::ScrollView::SnapEvent();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ScrollView_SnapEvent(void * jarg1) {
  Dali::Toolkit::ScrollView::SnapEvent *arg1 = (Dali::Toolkit::ScrollView::SnapEvent *) 0 ;

  arg1 = (Dali::Toolkit::ScrollView::SnapEvent *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_WRAP_ENABLED_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::WRAP_ENABLED;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_PANNING_ENABLED_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::PANNING_ENABLED;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_AXIS_AUTO_LOCK_ENABLED_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::AXIS_AUTO_LOCK_ENABLED;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_WHEEL_SCROLL_DISTANCE_STEP_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::WHEEL_SCROLL_DISTANCE_STEP;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_SCROLL_MODE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::SCROLL_MODE;
  jresult = (int)result;
  return jresult;
}

SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_SCROLL_POSITION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::SCROLL_POSITION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_SCROLL_PRE_POSITION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::SCROLL_PRE_POSITION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_SCROLL_PRE_POSITION_X_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::SCROLL_PRE_POSITION_X;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_SCROLL_PRE_POSITION_Y_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::SCROLL_PRE_POSITION_Y;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_SCROLL_PRE_POSITION_MAX_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::SCROLL_PRE_POSITION_MAX;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_SCROLL_PRE_POSITION_MAX_X_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::SCROLL_PRE_POSITION_MAX_X;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_SCROLL_PRE_POSITION_MAX_Y_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::SCROLL_PRE_POSITION_MAX_Y;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_OVERSHOOT_X_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::OVERSHOOT_X;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_OVERSHOOT_Y_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::OVERSHOOT_Y;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_SCROLL_FINAL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::SCROLL_FINAL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_SCROLL_FINAL_X_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::SCROLL_FINAL_X;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_SCROLL_FINAL_Y_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::SCROLL_FINAL_Y;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_WRAP_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::WRAP;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_PANNING_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::PANNING;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_SCROLLING_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::SCROLLING;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_SCROLL_DOMAIN_SIZE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::SCROLL_DOMAIN_SIZE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_SCROLL_DOMAIN_SIZE_X_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::SCROLL_DOMAIN_SIZE_X;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_SCROLL_DOMAIN_SIZE_Y_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::SCROLL_DOMAIN_SIZE_Y;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_SCROLL_DOMAIN_OFFSET_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::SCROLL_DOMAIN_OFFSET;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_SCROLL_POSITION_DELTA_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::SCROLL_POSITION_DELTA;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_Property_START_PAGE_POSITION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ScrollView::Property::START_PAGE_POSITION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ScrollView_Property() {
  void * jresult ;
  Dali::Toolkit::ScrollView::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ScrollView::Property *)new Dali::Toolkit::ScrollView::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ScrollView_Property(void * jarg1) {
  Dali::Toolkit::ScrollView::Property *arg1 = (Dali::Toolkit::ScrollView::Property *) 0 ;

  arg1 = (Dali::Toolkit::ScrollView::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ScrollView__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::ScrollView *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ScrollView *)new Dali::Toolkit::ScrollView();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ScrollView__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ScrollView *arg1 = 0 ;
  Dali::Toolkit::ScrollView *result = 0 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ScrollView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::ScrollView *)new Dali::Toolkit::ScrollView((Dali::Toolkit::ScrollView const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollView_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Toolkit::ScrollView *arg2 = 0 ;
  Dali::Toolkit::ScrollView *result = 0 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (Dali::Toolkit::ScrollView *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ScrollView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::ScrollView *) &(arg1)->operator =((Dali::Toolkit::ScrollView const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ScrollView(void * jarg1) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollView_New() {
  void * jresult ;
  Dali::Toolkit::ScrollView result;

  {
    try {
      result = Dali::Toolkit::ScrollView::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ScrollView((const Dali::Toolkit::ScrollView &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollView_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::ScrollView result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::ScrollView::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ScrollView((const Dali::Toolkit::ScrollView &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollView_GetScrollSnapAlphaFunction(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::AlphaFunction result;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::ScrollView const *)arg1)->GetScrollSnapAlphaFunction();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::AlphaFunction((const Dali::AlphaFunction &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetScrollSnapAlphaFunction(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::AlphaFunction arg2 ;
  Dali::AlphaFunction *argp2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  argp2 = (Dali::AlphaFunction *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::AlphaFunction", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetScrollSnapAlphaFunction(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollView_GetScrollFlickAlphaFunction(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::AlphaFunction result;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::ScrollView const *)arg1)->GetScrollFlickAlphaFunction();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::AlphaFunction((const Dali::AlphaFunction &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetScrollFlickAlphaFunction(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::AlphaFunction arg2 ;
  Dali::AlphaFunction *argp2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  argp2 = (Dali::AlphaFunction *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::AlphaFunction", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetScrollFlickAlphaFunction(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ScrollView_GetScrollSnapDuration(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ScrollView const *)arg1)->GetScrollSnapDuration();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetScrollSnapDuration(void * jarg1, float jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetScrollSnapDuration(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ScrollView_GetScrollFlickDuration(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ScrollView const *)arg1)->GetScrollFlickDuration();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetScrollFlickDuration(void * jarg1, float jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetScrollFlickDuration(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetRulerX(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Toolkit::RulerPtr arg2 ;
  Dali::Toolkit::RulerPtr *argp2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  argp2 = (Dali::Toolkit::RulerPtr *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::RulerPtr", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetRulerX(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetRulerY(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Toolkit::RulerPtr arg2 ;
  Dali::Toolkit::RulerPtr *argp2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  argp2 = (Dali::Toolkit::RulerPtr *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::RulerPtr", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetRulerY(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetScrollSensitive(void * jarg1, bool jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetScrollSensitive(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetMaxOvershoot(void * jarg1, float jarg2, float jarg3) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  float arg2 ;
  float arg3 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->SetMaxOvershoot(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetSnapOvershootAlphaFunction(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::AlphaFunction arg2 ;
  Dali::AlphaFunction *argp2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  argp2 = (Dali::AlphaFunction *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::AlphaFunction", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetSnapOvershootAlphaFunction(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetSnapOvershootDuration(void * jarg1, float jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetSnapOvershootDuration(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetActorAutoSnap(void * jarg1, bool jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetActorAutoSnap(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetWrapMode(void * jarg1, bool jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetWrapMode(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ScrollView_GetScrollUpdateDistance(void * jarg1) {
  int jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  int result;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      result = (int)((Dali::Toolkit::ScrollView const *)arg1)->GetScrollUpdateDistance();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetScrollUpdateDistance(void * jarg1, int jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  int arg2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      (arg1)->SetScrollUpdateDistance(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ScrollView_GetAxisAutoLock(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      result = (bool)((Dali::Toolkit::ScrollView const *)arg1)->GetAxisAutoLock();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetAxisAutoLock(void * jarg1, bool jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetAxisAutoLock(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ScrollView_GetAxisAutoLockGradient(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ScrollView const *)arg1)->GetAxisAutoLockGradient();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetAxisAutoLockGradient(void * jarg1, float jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetAxisAutoLockGradient(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ScrollView_GetFrictionCoefficient(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ScrollView const *)arg1)->GetFrictionCoefficient();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetFrictionCoefficient(void * jarg1, float jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetFrictionCoefficient(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ScrollView_GetFlickSpeedCoefficient(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ScrollView const *)arg1)->GetFlickSpeedCoefficient();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetFlickSpeedCoefficient(void * jarg1, float jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetFlickSpeedCoefficient(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollView_GetMinimumDistanceForFlick(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::ScrollView const *)arg1)->GetMinimumDistanceForFlick();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetMinimumDistanceForFlick(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Vector2 *arg2 = 0 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetMinimumDistanceForFlick((Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ScrollView_GetMinimumSpeedForFlick(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ScrollView const *)arg1)->GetMinimumSpeedForFlick();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetMinimumSpeedForFlick(void * jarg1, float jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetMinimumSpeedForFlick(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_ScrollView_GetMaxFlickSpeed(void * jarg1) {
  float jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  float result;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::ScrollView const *)arg1)->GetMaxFlickSpeed();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetMaxFlickSpeed(void * jarg1, float jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->SetMaxFlickSpeed(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollView_GetWheelScrollDistanceStep(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::ScrollView const *)arg1)->GetWheelScrollDistanceStep();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetWheelScrollDistanceStep(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Vector2 arg2 ;
  Dali::Vector2 *argp2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  argp2 = (Dali::Vector2 *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Vector2", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetWheelScrollDistanceStep(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollView_GetCurrentScrollPosition(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::ScrollView const *)arg1)->GetCurrentScrollPosition();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_ScrollView_GetCurrentPage(void * jarg1) {
  unsigned int jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::Toolkit::ScrollView const *)arg1)->GetCurrentPage();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_ScrollTo__SWIG_0(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Vector2 *arg2 = 0 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->ScrollTo((Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_ScrollTo__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  float arg3 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->ScrollTo((Dali::Vector2 const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_ScrollTo__SWIG_2(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  float arg3 ;
  Dali::AlphaFunction arg4 ;
  Dali::AlphaFunction *argp4 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  arg3 = (float)jarg3;
  argp4 = (Dali::AlphaFunction *)jarg4;
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::AlphaFunction", 0);
    return ;
  }
  arg4 = *argp4;
  {
    try {
      (arg1)->ScrollTo((Dali::Vector2 const &)*arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_ScrollTo__SWIG_3(void * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  float arg3 ;
  Dali::Toolkit::DirectionBias arg4 ;
  Dali::Toolkit::DirectionBias arg5 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  arg3 = (float)jarg3;
  arg4 = (Dali::Toolkit::DirectionBias)jarg4;
  arg5 = (Dali::Toolkit::DirectionBias)jarg5;
  {
    try {
      (arg1)->ScrollTo((Dali::Vector2 const &)*arg2,arg3,arg4,arg5);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_ScrollTo__SWIG_4(void * jarg1, void * jarg2, float jarg3, void * jarg4, int jarg5, int jarg6) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Vector2 *arg2 = 0 ;
  float arg3 ;
  Dali::AlphaFunction arg4 ;
  Dali::Toolkit::DirectionBias arg5 ;
  Dali::Toolkit::DirectionBias arg6 ;
  Dali::AlphaFunction *argp4 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  arg3 = (float)jarg3;
  argp4 = (Dali::AlphaFunction *)jarg4;
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::AlphaFunction", 0);
    return ;
  }
  arg4 = *argp4;
  arg5 = (Dali::Toolkit::DirectionBias)jarg5;
  arg6 = (Dali::Toolkit::DirectionBias)jarg6;
  {
    try {
      (arg1)->ScrollTo((Dali::Vector2 const &)*arg2,arg3,arg4,arg5,arg6);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_ScrollTo__SWIG_5(void * jarg1, unsigned int jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      (arg1)->ScrollTo(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_ScrollTo__SWIG_6(void * jarg1, unsigned int jarg2, float jarg3) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  unsigned int arg2 ;
  float arg3 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->ScrollTo(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_ScrollTo__SWIG_7(void * jarg1, unsigned int jarg2, float jarg3, int jarg4) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  Dali::Toolkit::DirectionBias arg4 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (float)jarg3;
  arg4 = (Dali::Toolkit::DirectionBias)jarg4;
  {
    try {
      (arg1)->ScrollTo(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_ScrollTo__SWIG_8(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Actor *arg2 = 0 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (Dali::Actor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->ScrollTo(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_ScrollTo__SWIG_9(void * jarg1, void * jarg2, float jarg3) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Actor *arg2 = 0 ;
  float arg3 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  arg2 = (Dali::Actor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor & type is null", 0);
    return ;
  }
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->ScrollTo(*arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ScrollView_ScrollToSnapPoint(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      result = (bool)(arg1)->ScrollToSnapPoint();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_ApplyConstraintToChildren(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Constraint arg2 ;
  Dali::Constraint *argp2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  argp2 = (Dali::Constraint *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Constraint", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->ApplyConstraintToChildren(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_RemoveConstraintsFromChildren(void * jarg1) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      (arg1)->RemoveConstraintsFromChildren();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_ApplyEffect(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Toolkit::ScrollViewEffect arg2 ;
  Dali::Toolkit::ScrollViewEffect *argp2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  argp2 = (Dali::Toolkit::ScrollViewEffect *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::ScrollViewEffect", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->ApplyEffect(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_RemoveEffect(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Toolkit::ScrollViewEffect arg2 ;
  Dali::Toolkit::ScrollViewEffect *argp2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  argp2 = (Dali::Toolkit::ScrollViewEffect *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::ScrollViewEffect", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->RemoveEffect(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_RemoveAllEffects(void * jarg1) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      (arg1)->RemoveAllEffects();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_BindActor(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->BindActor(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_UnbindActor(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->UnbindActor(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetScrollingDirection__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Radian arg2 ;
  Dali::Radian arg3 ;
  Dali::Radian *argp2 ;
  Dali::Radian *argp3 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return ;
  }
  arg2 = *argp2;
  argp3 = (Dali::Radian *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return ;
  }
  arg3 = *argp3;
  {
    try {
      (arg1)->SetScrollingDirection(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_SetScrollingDirection__SWIG_1(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Radian arg2 ;
  Dali::Radian *argp2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetScrollingDirection(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollView_RemoveScrollingDirection(void * jarg1, void * jarg2) {
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Radian arg2 ;
  Dali::Radian *argp2 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  argp2 = (Dali::Radian *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Radian", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->RemoveScrollingDirection(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ScrollView_SnapStartedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ScrollView *arg1 = (Dali::Toolkit::ScrollView *) 0 ;
  Dali::Toolkit::ScrollView::SnapStartedSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::ScrollView *)jarg1;
  {
    try {
      result = (Dali::Toolkit::ScrollView::SnapStartedSignalType *) &(arg1)->SnapStartedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TableView_Property_ROWS_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TableView::Property::ROWS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TableView_Property_COLUMNS_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TableView::Property::COLUMNS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TableView_Property_CELL_PADDING_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TableView::Property::CELL_PADDING;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TableView_Property_LAYOUT_ROWS_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TableView::Property::LAYOUT_ROWS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TableView_Property_LAYOUT_COLUMNS_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TableView::Property::LAYOUT_COLUMNS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TableView_Property() {
  void * jresult ;
  Dali::Toolkit::TableView::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::TableView::Property *)new Dali::Toolkit::TableView::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TableView_Property(void * jarg1) {
  Dali::Toolkit::TableView::Property *arg1 = (Dali::Toolkit::TableView::Property *) 0 ;

  arg1 = (Dali::Toolkit::TableView::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TableView_ChildProperty_CELL_INDEX_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TableView::ChildProperty::CELL_INDEX;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TableView_ChildProperty_ROW_SPAN_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TableView::ChildProperty::ROW_SPAN;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TableView_ChildProperty_COLUMN_SPAN_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TableView::ChildProperty::COLUMN_SPAN;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TableView_ChildProperty_CELL_HORIZONTAL_ALIGNMENT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TableView::ChildProperty::CELL_HORIZONTAL_ALIGNMENT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TableView_ChildProperty_CELL_VERTICAL_ALIGNMENT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TableView::ChildProperty::CELL_VERTICAL_ALIGNMENT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TableView_ChildProperty() {
  void * jresult ;
  Dali::Toolkit::TableView::ChildProperty *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::TableView::ChildProperty *)new Dali::Toolkit::TableView::ChildProperty();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TableView_ChildProperty(void * jarg1) {
  Dali::Toolkit::TableView::ChildProperty *arg1 = (Dali::Toolkit::TableView::ChildProperty *) 0 ;

  arg1 = (Dali::Toolkit::TableView::ChildProperty *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TableView_CellPosition__SWIG_0(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  Dali::Toolkit::TableView::CellPosition *result = 0 ;

  arg1 = (unsigned int)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (unsigned int)jarg3;
  arg4 = (unsigned int)jarg4;
  {
    try {
      result = (Dali::Toolkit::TableView::CellPosition *)new Dali::Toolkit::TableView::CellPosition(arg1,arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TableView_CellPosition__SWIG_1(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Dali::Toolkit::TableView::CellPosition *result = 0 ;

  arg1 = (unsigned int)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (unsigned int)jarg3;
  {
    try {
      result = (Dali::Toolkit::TableView::CellPosition *)new Dali::Toolkit::TableView::CellPosition(arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TableView_CellPosition__SWIG_2(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Dali::Toolkit::TableView::CellPosition *result = 0 ;

  arg1 = (unsigned int)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (Dali::Toolkit::TableView::CellPosition *)new Dali::Toolkit::TableView::CellPosition(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TableView_CellPosition__SWIG_3(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  Dali::Toolkit::TableView::CellPosition *result = 0 ;

  arg1 = (unsigned int)jarg1;
  {
    try {
      result = (Dali::Toolkit::TableView::CellPosition *)new Dali::Toolkit::TableView::CellPosition(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TableView_CellPosition__SWIG_4() {
  void * jresult ;
  Dali::Toolkit::TableView::CellPosition *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::TableView::CellPosition *)new Dali::Toolkit::TableView::CellPosition();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_CellPosition_rowIndex_set(void * jarg1, unsigned int jarg2) {
  Dali::Toolkit::TableView::CellPosition *arg1 = (Dali::Toolkit::TableView::CellPosition *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::Toolkit::TableView::CellPosition *)jarg1;
  arg2 = (unsigned int)jarg2;
  if (arg1) (arg1)->rowIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_TableView_CellPosition_rowIndex_get(void * jarg1) {
  unsigned int jresult ;
  Dali::Toolkit::TableView::CellPosition *arg1 = (Dali::Toolkit::TableView::CellPosition *) 0 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::TableView::CellPosition *)jarg1;
  result = (unsigned int) ((arg1)->rowIndex);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_CellPosition_columnIndex_set(void * jarg1, unsigned int jarg2) {
  Dali::Toolkit::TableView::CellPosition *arg1 = (Dali::Toolkit::TableView::CellPosition *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::Toolkit::TableView::CellPosition *)jarg1;
  arg2 = (unsigned int)jarg2;
  if (arg1) (arg1)->columnIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_TableView_CellPosition_columnIndex_get(void * jarg1) {
  unsigned int jresult ;
  Dali::Toolkit::TableView::CellPosition *arg1 = (Dali::Toolkit::TableView::CellPosition *) 0 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::TableView::CellPosition *)jarg1;
  result = (unsigned int) ((arg1)->columnIndex);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_CellPosition_rowSpan_set(void * jarg1, unsigned int jarg2) {
  Dali::Toolkit::TableView::CellPosition *arg1 = (Dali::Toolkit::TableView::CellPosition *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::Toolkit::TableView::CellPosition *)jarg1;
  arg2 = (unsigned int)jarg2;
  if (arg1) (arg1)->rowSpan = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_TableView_CellPosition_rowSpan_get(void * jarg1) {
  unsigned int jresult ;
  Dali::Toolkit::TableView::CellPosition *arg1 = (Dali::Toolkit::TableView::CellPosition *) 0 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::TableView::CellPosition *)jarg1;
  result = (unsigned int) ((arg1)->rowSpan);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_CellPosition_columnSpan_set(void * jarg1, unsigned int jarg2) {
  Dali::Toolkit::TableView::CellPosition *arg1 = (Dali::Toolkit::TableView::CellPosition *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::Toolkit::TableView::CellPosition *)jarg1;
  arg2 = (unsigned int)jarg2;
  if (arg1) (arg1)->columnSpan = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_TableView_CellPosition_columnSpan_get(void * jarg1) {
  unsigned int jresult ;
  Dali::Toolkit::TableView::CellPosition *arg1 = (Dali::Toolkit::TableView::CellPosition *) 0 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::TableView::CellPosition *)jarg1;
  result = (unsigned int) ((arg1)->columnSpan);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TableView_CellPosition(void * jarg1) {
  Dali::Toolkit::TableView::CellPosition *arg1 = (Dali::Toolkit::TableView::CellPosition *) 0 ;

  arg1 = (Dali::Toolkit::TableView::CellPosition *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TableView__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::TableView *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::TableView *)new Dali::Toolkit::TableView();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TableView__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::TableView *arg1 = 0 ;
  Dali::Toolkit::TableView *result = 0 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::TableView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::TableView *)new Dali::Toolkit::TableView((Dali::Toolkit::TableView const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TableView_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  Dali::Toolkit::TableView *arg2 = 0 ;
  Dali::Toolkit::TableView *result = 0 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (Dali::Toolkit::TableView *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::TableView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::TableView *) &(arg1)->operator =((Dali::Toolkit::TableView const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TableView(void * jarg1) {
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TableView_New(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Dali::Toolkit::TableView result;

  arg1 = (unsigned int)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = Dali::Toolkit::TableView::New(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::TableView((const Dali::Toolkit::TableView &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TableView_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::TableView result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::TableView::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::TableView((const Dali::Toolkit::TableView &)result);
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_TableView_AddChild(void * jarg1, void * jarg2, void * jarg3) {
  bool jresult ;
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  Dali::Actor arg2 ;
  Dali::Toolkit::TableView::CellPosition arg3 ;
  Dali::Actor *argp2 ;
  Dali::Toolkit::TableView::CellPosition *argp3 ;
  bool result;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg2 = *argp2;
  argp3 = (Dali::Toolkit::TableView::CellPosition *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::TableView::CellPosition", 0);
    return 0;
  }
  arg3 = *argp3;
  {
    try {
      result = (bool)(arg1)->AddChild(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TableView_GetChildAt(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  Dali::Toolkit::TableView::CellPosition arg2 ;
  Dali::Toolkit::TableView::CellPosition *argp2 ;
  Dali::Actor result;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  argp2 = (Dali::Toolkit::TableView::CellPosition *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::TableView::CellPosition", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (arg1)->GetChildAt(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TableView_RemoveChildAt(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  Dali::Toolkit::TableView::CellPosition arg2 ;
  Dali::Toolkit::TableView::CellPosition *argp2 ;
  Dali::Actor result;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  argp2 = (Dali::Toolkit::TableView::CellPosition *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::TableView::CellPosition", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (arg1)->RemoveChildAt(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_TableView_FindChildPosition(void * jarg1, void * jarg2, void * jarg3) {
  bool jresult ;
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  Dali::Actor arg2 ;
  Dali::Toolkit::TableView::CellPosition *arg3 = 0 ;
  Dali::Actor *argp2 ;
  bool result;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::Toolkit::TableView::CellPosition *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::TableView::CellPosition & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)(arg1)->FindChildPosition(arg2,*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_InsertRow(void * jarg1, unsigned int jarg2) {
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      (arg1)->InsertRow(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_DeleteRow__SWIG_0(void * jarg1, unsigned int jarg2) {
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      (arg1)->DeleteRow(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_DeleteRow__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3) {
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;
  std::vector< Dali::Actor > *arg3 = 0 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (std::vector< Dali::Actor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Dali::Actor > & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->DeleteRow(arg2,*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_InsertColumn(void * jarg1, unsigned int jarg2) {
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      (arg1)->InsertColumn(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_DeleteColumn__SWIG_0(void * jarg1, unsigned int jarg2) {
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      (arg1)->DeleteColumn(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_DeleteColumn__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3) {
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;
  std::vector< Dali::Actor > *arg3 = 0 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (std::vector< Dali::Actor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Dali::Actor > & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->DeleteColumn(arg2,*arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_Resize__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (unsigned int)jarg3;
  {
    try {
      (arg1)->Resize(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_Resize__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::vector< Dali::Actor > *arg4 = 0 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (unsigned int)jarg3;
  arg4 = (std::vector< Dali::Actor > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Dali::Actor > & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->Resize(arg2,arg3,*arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_SetCellPadding(void * jarg1, void * jarg2) {
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  Dali::Size arg2 ;
  Dali::Size *argp2 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  argp2 = (Dali::Size *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Size", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetCellPadding(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TableView_GetCellPadding(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  Dali::Size result;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  {
    try {
      result = (arg1)->GetCellPadding();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Size((const Dali::Size &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_SetFitHeight(void * jarg1, unsigned int jarg2) {
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      (arg1)->SetFitHeight(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_TableView_IsFitHeight(void * jarg1, unsigned int jarg2) {
  bool jresult ;
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;
  bool result;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (bool)((Dali::Toolkit::TableView const *)arg1)->IsFitHeight(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_SetFitWidth(void * jarg1, unsigned int jarg2) {
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      (arg1)->SetFitWidth(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_TableView_IsFitWidth(void * jarg1, unsigned int jarg2) {
  bool jresult ;
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;
  bool result;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (bool)((Dali::Toolkit::TableView const *)arg1)->IsFitWidth(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_SetFixedHeight(void * jarg1, unsigned int jarg2, float jarg3) {
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;
  float arg3 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->SetFixedHeight(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_TableView_GetFixedHeight(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;
  float result;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (float)((Dali::Toolkit::TableView const *)arg1)->GetFixedHeight(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_SetRelativeHeight(void * jarg1, unsigned int jarg2, float jarg3) {
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;
  float arg3 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->SetRelativeHeight(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_TableView_GetRelativeHeight(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;
  float result;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (float)((Dali::Toolkit::TableView const *)arg1)->GetRelativeHeight(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_SetFixedWidth(void * jarg1, unsigned int jarg2, float jarg3) {
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;
  float arg3 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->SetFixedWidth(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_TableView_GetFixedWidth(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;
  float result;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (float)((Dali::Toolkit::TableView const *)arg1)->GetFixedWidth(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_SetRelativeWidth(void * jarg1, unsigned int jarg2, float jarg3) {
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;
  float arg3 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->SetRelativeWidth(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_TableView_GetRelativeWidth(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int arg2 ;
  float result;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (float)((Dali::Toolkit::TableView const *)arg1)->GetRelativeWidth(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_TableView_GetRows(void * jarg1) {
  unsigned int jresult ;
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  {
    try {
      result = (unsigned int)(arg1)->GetRows();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_TableView_GetColumns(void * jarg1) {
  unsigned int jresult ;
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  {
    try {
      result = (unsigned int)(arg1)->GetColumns();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_TableView_SetCellAlignment(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  Dali::Toolkit::TableView *arg1 = (Dali::Toolkit::TableView *) 0 ;
  Dali::Toolkit::TableView::CellPosition arg2 ;
  Dali::HorizontalAlignment::Type arg3 ;
  Dali::VerticalAlignment::Type arg4 ;
  Dali::Toolkit::TableView::CellPosition *argp2 ;

  arg1 = (Dali::Toolkit::TableView *)jarg1;
  argp2 = (Dali::Toolkit::TableView::CellPosition *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::TableView::CellPosition", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (Dali::HorizontalAlignment::Type)jarg3;
  arg4 = (Dali::VerticalAlignment::Type)jarg4;
  {
    try {
      (arg1)->SetCellAlignment(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_DEFAULT_RENDERING_BACKEND_get() {
  unsigned int jresult ;
  unsigned int result;

  result = (unsigned int)(unsigned int)Dali::Toolkit::DevelText::DEFAULT_RENDERING_BACKEND;
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_TEXT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::TEXT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_FONT_FAMILY_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::FONT_FAMILY;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_FONT_STYLE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::FONT_STYLE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_POINT_SIZE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::POINT_SIZE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_MULTI_LINE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::MULTI_LINE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_HORIZONTAL_ALIGNMENT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::HORIZONTAL_ALIGNMENT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_VERTICAL_ALIGNMENT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::VERTICAL_ALIGNMENT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_TEXT_COLOR_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::TEXT_COLOR;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_ENABLE_MARKUP_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::ENABLE_MARKUP;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_ENABLE_AUTO_SCROLL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::ENABLE_AUTO_SCROLL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_AUTO_SCROLL_SPEED_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::AUTO_SCROLL_SPEED;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_AUTO_SCROLL_LOOP_COUNT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::AUTO_SCROLL_LOOP_COUNT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_AUTO_SCROLL_GAP_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::AUTO_SCROLL_GAP;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_LINE_SPACING_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::LINE_SPACING;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_UNDERLINE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::UNDERLINE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_SHADOW_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::SHADOW;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_EMBOSS_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::EMBOSS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_TextLabel_Property_OUTLINE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::TextLabel::Property::OUTLINE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TextLabel_Property() {
  void * jresult ;
  Dali::Toolkit::TextLabel::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::TextLabel::Property *)new Dali::Toolkit::TextLabel::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TextLabel_Property(void * jarg1) {
  Dali::Toolkit::TextLabel::Property *arg1 = (Dali::Toolkit::TextLabel::Property *) 0 ;

  arg1 = (Dali::Toolkit::TextLabel::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TextLabel_New__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::TextLabel result;

  {
    try {
      result = Dali::Toolkit::TextLabel::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::TextLabel((const Dali::Toolkit::TextLabel &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TextLabel_New__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::Toolkit::TextLabel result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  {
    try {
      result = Dali::Toolkit::TextLabel::New((std::string const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::TextLabel((const Dali::Toolkit::TextLabel &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TextLabel__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::TextLabel *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::TextLabel *)new Dali::Toolkit::TextLabel();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_TextLabel__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::TextLabel *arg1 = 0 ;
  Dali::Toolkit::TextLabel *result = 0 ;

  arg1 = (Dali::Toolkit::TextLabel *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::TextLabel const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::TextLabel *)new Dali::Toolkit::TextLabel((Dali::Toolkit::TextLabel const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TextLabel_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::TextLabel *arg1 = (Dali::Toolkit::TextLabel *) 0 ;
  Dali::Toolkit::TextLabel *arg2 = 0 ;
  Dali::Toolkit::TextLabel *result = 0 ;

  arg1 = (Dali::Toolkit::TextLabel *)jarg1;
  arg2 = (Dali::Toolkit::TextLabel *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::TextLabel const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::TextLabel *) &(arg1)->operator =((Dali::Toolkit::TextLabel const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_TextLabel(void * jarg1) {
  Dali::Toolkit::TextLabel *arg1 = (Dali::Toolkit::TextLabel *) 0 ;

  arg1 = (Dali::Toolkit::TextLabel *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_TextLabel_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::TextLabel result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::TextLabel::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::TextLabel((const Dali::Toolkit::TextLabel &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_AccessibilityManager() {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::AccessibilityManager *)new Dali::Toolkit::AccessibilityManager();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_AccessibilityManager(void * jarg1) {
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_Get() {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager result;

  {
    try {
      result = Dali::Toolkit::AccessibilityManager::Get();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::AccessibilityManager((const Dali::Toolkit::AccessibilityManager &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AccessibilityManager_SetAccessibilityAttribute(void * jarg1, void * jarg2, int jarg3, char * jarg4) {
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Actor arg2 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityAttribute arg3 ;
  std::string *arg4 = 0 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (Dali::Toolkit::AccessibilityManager::AccessibilityAttribute)jarg3;
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str;
  {
    try {
      (arg1)->SetAccessibilityAttribute(arg2,arg3,(std::string const &)*arg4);
    } CALL_CATCH_EXCEPTION();
  }


  //argout typemap for const std::string&

}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_AccessibilityManager_GetAccessibilityAttribute(void * jarg1, void * jarg2, int jarg3) {
  char * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Actor arg2 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityAttribute arg3 ;
  Dali::Actor *argp2 ;
  std::string result;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::Toolkit::AccessibilityManager::AccessibilityAttribute)jarg3;
  {
    try {
      result = ((Dali::Toolkit::AccessibilityManager const *)arg1)->GetAccessibilityAttribute(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = SWIG_csharp_string_callback((&result)->c_str());
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AccessibilityManager_SetFocusOrder(void * jarg1, void * jarg2, unsigned int jarg3) {
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Actor arg2 ;
  unsigned int arg3 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (unsigned int)jarg3;
  {
    try {
      (arg1)->SetFocusOrder(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_AccessibilityManager_GetFocusOrder(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (unsigned int)((Dali::Toolkit::AccessibilityManager const *)arg1)->GetFocusOrder(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_AccessibilityManager_GenerateNewFocusOrder(void * jarg1) {
  unsigned int jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::Toolkit::AccessibilityManager const *)arg1)->GenerateNewFocusOrder();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_GetActorByFocusOrder(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  unsigned int arg2 ;
  Dali::Actor result;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (arg1)->GetActorByFocusOrder(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_AccessibilityManager_SetCurrentFocusActor(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;
  bool result;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)(arg1)->SetCurrentFocusActor(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_GetCurrentFocusActor(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Actor result;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (arg1)->GetCurrentFocusActor();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_GetCurrentFocusGroup(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Actor result;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (arg1)->GetCurrentFocusGroup();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_AccessibilityManager_GetCurrentFocusOrder(void * jarg1) {
  unsigned int jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (unsigned int)(arg1)->GetCurrentFocusOrder();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_AccessibilityManager_MoveFocusForward(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (bool)(arg1)->MoveFocusForward();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_AccessibilityManager_MoveFocusBackward(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (bool)(arg1)->MoveFocusBackward();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AccessibilityManager_ClearFocus(void * jarg1) {
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      (arg1)->ClearFocus();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AccessibilityManager_Reset(void * jarg1) {
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      (arg1)->Reset();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AccessibilityManager_SetFocusGroup(void * jarg1, void * jarg2, bool jarg3) {
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Actor arg2 ;
  bool arg3 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = jarg3 ? true : false;
  {
    try {
      (arg1)->SetFocusGroup(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_AccessibilityManager_IsFocusGroup(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;
  bool result;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)((Dali::Toolkit::AccessibilityManager const *)arg1)->IsFocusGroup(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AccessibilityManager_SetGroupMode(void * jarg1, bool jarg2) {
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetGroupMode(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_AccessibilityManager_GetGroupMode(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (bool)((Dali::Toolkit::AccessibilityManager const *)arg1)->GetGroupMode();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AccessibilityManager_SetWrapMode(void * jarg1, bool jarg2) {
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  bool arg2 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  arg2 = jarg2 ? true : false;
  {
    try {
      (arg1)->SetWrapMode(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_AccessibilityManager_GetWrapMode(void * jarg1) {
  bool jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  bool result;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (bool)((Dali::Toolkit::AccessibilityManager const *)arg1)->GetWrapMode();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AccessibilityManager_SetFocusIndicatorActor(void * jarg1, void * jarg2) {
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetFocusIndicatorActor(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_GetFocusIndicatorActor(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Actor result;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (arg1)->GetFocusIndicatorActor();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_GetFocusGroup(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;
  Dali::Actor result;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (arg1)->GetFocusGroup(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_GetReadPosition(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Vector2 result;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::AccessibilityManager const *)arg1)->GetReadPosition();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector2((const Dali::Vector2 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_FocusChangedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::FocusChangedSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::FocusChangedSignalType *) &(arg1)->FocusChangedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_FocusOvershotSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::FocusOvershotSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::FocusOvershotSignalType *) &(arg1)->FocusOvershotSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_FocusedActorActivatedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::FocusedActorActivatedSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::FocusedActorActivatedSignalType *) &(arg1)->FocusedActorActivatedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_StatusChangedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->StatusChangedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionNextSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionNextSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionPreviousSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionPreviousSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionActivateSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionActivateSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionReadSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionReadSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionOverSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionOverSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionReadNextSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionReadNextSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionReadPreviousSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionReadPreviousSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionUpSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionUpSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionDownSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionDownSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionClearFocusSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionClearFocusSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionBackSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionBackSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionScrollUpSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionScrollUpSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionScrollDownSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionScrollDownSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionPageLeftSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionPageLeftSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionPageRightSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionPageRightSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionPageUpSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionPageUpSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionPageDownSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionPageDownSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionMoveToFirstSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionMoveToFirstSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionMoveToLastSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionMoveToLastSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionReadFromTopSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionReadFromTopSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionReadFromNextSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionReadFromNextSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionZoomSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionZoomSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionReadPauseResumeSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionReadPauseResumeSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionStartStopSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionSignalType *) &(arg1)->ActionStartStopSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AccessibilityManager_ActionScrollSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AccessibilityManager *arg1 = (Dali::Toolkit::AccessibilityManager *) 0 ;
  Dali::Toolkit::AccessibilityManager::AccessibilityActionScrollSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AccessibilityManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AccessibilityManager::AccessibilityActionScrollSignalType *) &(arg1)->ActionScrollSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_StyleManager() {
  void * jresult ;
  Dali::Toolkit::StyleManager *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::StyleManager *)new Dali::Toolkit::StyleManager();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_StyleManager(void * jarg1) {
  Dali::Toolkit::StyleManager *arg1 = (Dali::Toolkit::StyleManager *) 0 ;

  arg1 = (Dali::Toolkit::StyleManager *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_StyleManager_Get() {
  void * jresult ;
  Dali::Toolkit::StyleManager result;

  {
    try {
      result = Dali::Toolkit::StyleManager::Get();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::StyleManager((const Dali::Toolkit::StyleManager &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_StyleManager_ApplyTheme(void * jarg1, char * jarg2) {
  Dali::Toolkit::StyleManager *arg1 = (Dali::Toolkit::StyleManager *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (Dali::Toolkit::StyleManager *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      (arg1)->ApplyTheme((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }


  //argout typemap for const std::string&

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_StyleManager_ApplyDefaultTheme(void * jarg1) {
  Dali::Toolkit::StyleManager *arg1 = (Dali::Toolkit::StyleManager *) 0 ;

  arg1 = (Dali::Toolkit::StyleManager *)jarg1;
  {
    try {
      (arg1)->ApplyDefaultTheme();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_StyleManager_SetStyleConstant(void * jarg1, char * jarg2, void * jarg3) {
  Dali::Toolkit::StyleManager *arg1 = (Dali::Toolkit::StyleManager *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Value *arg3 = 0 ;

  arg1 = (Dali::Toolkit::StyleManager *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Property::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Value const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetStyleConstant((std::string const &)*arg2,(Dali::Property::Value const &)*arg3);
    } CALL_CATCH_EXCEPTION();
  }


  //argout typemap for const std::string&

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_StyleManager_GetStyleConstant(void * jarg1, char * jarg2, void * jarg3) {
  bool jresult ;
  Dali::Toolkit::StyleManager *arg1 = (Dali::Toolkit::StyleManager *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Property::Value *arg3 = 0 ;
  bool result;

  arg1 = (Dali::Toolkit::StyleManager *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Property::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Value & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)(arg1)->GetStyleConstant((std::string const &)*arg2,*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_StyleManager_ApplyStyle(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  Dali::Toolkit::StyleManager *arg1 = (Dali::Toolkit::StyleManager *) 0 ;
  Dali::Toolkit::Control arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  Dali::Toolkit::Control *argp2 ;

  arg1 = (Dali::Toolkit::StyleManager *)jarg1;
  argp2 = (Dali::Toolkit::Control *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::Control", 0);
    return ;
  }
  arg2 = *argp2;
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str;
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str;
  {
    try {
      (arg1)->ApplyStyle(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } CALL_CATCH_EXCEPTION();
  }


  //argout typemap for const std::string&


  //argout typemap for const std::string&

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_StyleManager_StyleChangedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::StyleManager *arg1 = (Dali::Toolkit::StyleManager *) 0 ;
  Dali::Toolkit::StyleManager::StyleChangedSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::StyleManager *)jarg1;
  {
    try {
      result = (Dali::Toolkit::StyleManager::StyleChangedSignalType *) &(arg1)->StyleChangedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Slider_Property_LOWER_BOUND_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Slider::Property::LOWER_BOUND;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Slider_Property_UPPER_BOUND_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Slider::Property::UPPER_BOUND;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Slider_Property_VALUE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Slider::Property::VALUE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Slider_Property_TRACK_VISUAL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Slider::Property::TRACK_VISUAL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Slider_Property_HANDLE_VISUAL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Slider::Property::HANDLE_VISUAL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Slider_Property_PROGRESS_VISUAL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Slider::Property::PROGRESS_VISUAL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Slider_Property_POPUP_VISUAL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Slider::Property::POPUP_VISUAL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Slider_Property_POPUP_ARROW_VISUAL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Slider::Property::POPUP_ARROW_VISUAL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Slider_Property_DISABLED_COLOR_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Slider::Property::DISABLED_COLOR;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Slider_Property_VALUE_PRECISION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Slider::Property::VALUE_PRECISION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Slider_Property_SHOW_POPUP_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Slider::Property::SHOW_POPUP;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Slider_Property_SHOW_VALUE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Slider::Property::SHOW_VALUE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Slider_Property_MARKS_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Slider::Property::MARKS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Slider_Property_SNAP_TO_MARKS_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Slider::Property::SNAP_TO_MARKS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Slider_Property_MARK_TOLERANCE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Slider::Property::MARK_TOLERANCE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Slider_Property() {
  void * jresult ;
  Dali::Toolkit::Slider::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::Slider::Property *)new Dali::Toolkit::Slider::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Slider_Property(void * jarg1) {
  Dali::Toolkit::Slider::Property *arg1 = (Dali::Toolkit::Slider::Property *) 0 ;

  arg1 = (Dali::Toolkit::Slider::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Slider_New() {
  void * jresult ;
  Dali::Toolkit::Slider result;

  {
    try {
      result = Dali::Toolkit::Slider::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Slider((const Dali::Toolkit::Slider &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Slider__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::Slider *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::Slider *)new Dali::Toolkit::Slider();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Slider__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Slider *arg1 = 0 ;
  Dali::Toolkit::Slider *result = 0 ;

  arg1 = (Dali::Toolkit::Slider *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Slider const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Slider *)new Dali::Toolkit::Slider((Dali::Toolkit::Slider const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Slider_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::Slider *arg1 = (Dali::Toolkit::Slider *) 0 ;
  Dali::Toolkit::Slider *arg2 = 0 ;
  Dali::Toolkit::Slider *result = 0 ;

  arg1 = (Dali::Toolkit::Slider *)jarg1;
  arg2 = (Dali::Toolkit::Slider *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Slider const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Slider *) &(arg1)->operator =((Dali::Toolkit::Slider const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Slider(void * jarg1) {
  Dali::Toolkit::Slider *arg1 = (Dali::Toolkit::Slider *) 0 ;

  arg1 = (Dali::Toolkit::Slider *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Slider_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::Slider result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::Slider::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Slider((const Dali::Toolkit::Slider &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Slider_ValueChangedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Slider *arg1 = (Dali::Toolkit::Slider *) 0 ;
  Dali::Toolkit::Slider::ValueChangedSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Slider *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Slider::ValueChangedSignalType *) &(arg1)->ValueChangedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Slider_SlidingFinishedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Slider *arg1 = (Dali::Toolkit::Slider *) 0 ;
  Dali::Toolkit::Slider::ValueChangedSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Slider *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Slider::ValueChangedSignalType *) &(arg1)->SlidingFinishedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Slider_MarkReachedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Slider *arg1 = (Dali::Toolkit::Slider *) 0 ;
  Dali::Toolkit::Slider::MarkReachedSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Slider *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Slider::MarkReachedSignalType *) &(arg1)->MarkReachedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_VideoView_Property_VIDEO_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::VideoView::Property::VIDEO;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_VideoView_Property_LOOPING_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::VideoView::Property::LOOPING;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_VideoView_Property_MUTED_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::VideoView::Property::MUTED;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_VideoView_Property_VOLUME_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::VideoView::Property::VOLUME;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_VideoView_Property_UNDERLAY_get() {
  int result;

  result = (int)Dali::Toolkit::VideoView::Property::UNDERLAY;

  return result;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VideoView_Property() {
  void * jresult ;
  Dali::Toolkit::VideoView::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::VideoView::Property *)new Dali::Toolkit::VideoView::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_VideoView_Property(void * jarg1) {
  Dali::Toolkit::VideoView::Property *arg1 = (Dali::Toolkit::VideoView::Property *) 0 ;

  arg1 = (Dali::Toolkit::VideoView::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VideoView_New__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::VideoView result;

  {
    try {
      result = Dali::Toolkit::VideoView::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::VideoView((const Dali::Toolkit::VideoView &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VideoView_New__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::Toolkit::VideoView result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  {
    try {
      result = Dali::Toolkit::VideoView::New((std::string const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::VideoView((const Dali::Toolkit::VideoView &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VideoView_New__SWIG_2(bool swCodec) {
  void * jresult ;
  Dali::Toolkit::VideoView result;
  {
    try {
      result = Dali::Toolkit::VideoView::New(swCodec);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::VideoView((const Dali::Toolkit::VideoView &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VideoView_New__SWIG_3(char * jarg1, bool swCodec) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::Toolkit::VideoView result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  {
    try {
      result = Dali::Toolkit::VideoView::New((std::string const &)*arg1, swCodec);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::VideoView((const Dali::Toolkit::VideoView &)result);

  //argout typemap for const std::string&

  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VideoView_New__SWIG_4(unsigned int jarg1) {
  void * jresult ;
  Dali::VideoSyncMode syncMode;
  Dali::Toolkit::VideoView result;

  syncMode = static_cast<Dali::VideoSyncMode>(jarg1);

  {
    try {
      result = Dali::Toolkit::DevelVideoView::New(syncMode);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::VideoView((const Dali::Toolkit::VideoView &)result);

  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VideoView__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::VideoView *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::VideoView *)new Dali::Toolkit::VideoView();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_VideoView(void * jarg1) {
  Dali::Toolkit::VideoView *arg1 = (Dali::Toolkit::VideoView *) 0 ;

  arg1 = (Dali::Toolkit::VideoView *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VideoView__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::VideoView *arg1 = 0 ;
  Dali::Toolkit::VideoView *result = 0 ;

  arg1 = (Dali::Toolkit::VideoView *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::VideoView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::VideoView *)new Dali::Toolkit::VideoView((Dali::Toolkit::VideoView const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VideoView_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::VideoView *arg1 = (Dali::Toolkit::VideoView *) 0 ;
  Dali::Toolkit::VideoView *arg2 = 0 ;
  Dali::Toolkit::VideoView *result = 0 ;

  arg1 = (Dali::Toolkit::VideoView *)jarg1;
  arg2 = (Dali::Toolkit::VideoView *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::VideoView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::VideoView *) &(arg1)->operator =((Dali::Toolkit::VideoView const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VideoView_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::VideoView result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::VideoView::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::VideoView((const Dali::Toolkit::VideoView &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VideoView_Play(void * jarg1) {
  Dali::Toolkit::VideoView *arg1 = (Dali::Toolkit::VideoView *) 0 ;

  arg1 = (Dali::Toolkit::VideoView *)jarg1;
  {
    try {
      (arg1)->Play();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VideoView_Pause(void * jarg1) {
  Dali::Toolkit::VideoView *arg1 = (Dali::Toolkit::VideoView *) 0 ;

  arg1 = (Dali::Toolkit::VideoView *)jarg1;
  {
    try {
      (arg1)->Pause();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VideoView_Stop(void * jarg1) {
  Dali::Toolkit::VideoView *arg1 = (Dali::Toolkit::VideoView *) 0 ;

  arg1 = (Dali::Toolkit::VideoView *)jarg1;
  {
    try {
      (arg1)->Stop();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VideoView_Forward(void * jarg1, int jarg2) {
  Dali::Toolkit::VideoView *arg1 = (Dali::Toolkit::VideoView *) 0 ;
  int arg2 ;

  arg1 = (Dali::Toolkit::VideoView *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      (arg1)->Forward(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VideoView_Backward(void * jarg1, int jarg2) {
  Dali::Toolkit::VideoView *arg1 = (Dali::Toolkit::VideoView *) 0 ;
  int arg2 ;

  arg1 = (Dali::Toolkit::VideoView *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      (arg1)->Backward(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VideoView_FinishedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::VideoView *arg1 = (Dali::Toolkit::VideoView *) 0 ;
  Dali::Toolkit::VideoView::VideoViewSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::VideoView *)jarg1;
  {
    try {
      result = (Dali::Toolkit::VideoView::VideoViewSignalType *) &(arg1)->FinishedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VideoView_GetNativePlayerHandle(void * jarg1)
{
  Dali::Toolkit::VideoView *arg1 = (Dali::Toolkit::VideoView *)jarg1;
  if( arg1 == nullptr )
  {
    DALI_LOG_ERROR("VideoView is nullptr!");
    return nullptr;
  }
  void * ret = nullptr;
  {
    try{

      Dali::Any result = Toolkit::DevelVideoView::GetMediaPlayer( *arg1 );
      ret = Dali::AnyCast< void * >( result );

    } CALL_CATCH_EXCEPTION(0);
  }
  return ret;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CameraView_New__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  Dali::Toolkit::CameraView result;

  Dali::Any arg1(jarg1);
  Dali::Toolkit::CameraView::DisplayType arg2 = static_cast<Dali::Toolkit::CameraView::DisplayType>(jarg2);
  {
    try {
      result = Dali::Toolkit::CameraView::New(arg1, arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::CameraView((const Dali::Toolkit::CameraView &)result);
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_CameraView__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::CameraView *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::CameraView *)new Dali::Toolkit::CameraView();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_CameraView(void * jarg1) {
  Dali::Toolkit::CameraView *arg1 = (Dali::Toolkit::CameraView *) 0 ;

  arg1 = (Dali::Toolkit::CameraView *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_CameraView__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::CameraView *arg1 = 0 ;
  Dali::Toolkit::CameraView *result = 0 ;

  arg1 = (Dali::Toolkit::CameraView *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::CameraView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::CameraView *)new Dali::Toolkit::CameraView((Dali::Toolkit::CameraView const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CameraView_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::CameraView *arg1 = (Dali::Toolkit::CameraView *) 0 ;
  Dali::Toolkit::CameraView *arg2 = 0 ;
  Dali::Toolkit::CameraView *result = 0 ;

  arg1 = (Dali::Toolkit::CameraView *)jarg1;
  arg2 = (Dali::Toolkit::CameraView *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::CameraView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::CameraView *) &(arg1)->operator =((Dali::Toolkit::CameraView const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CameraView_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::CameraView result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::CameraView::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::CameraView((const Dali::Toolkit::CameraView &)result);
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CameraView_Update(void * jarg1) {
  Dali::Toolkit::CameraView *arg1 = (Dali::Toolkit::CameraView *) 0 ;

  arg1 = (Dali::Toolkit::CameraView *)jarg1;
  {
    try {
      (arg1)->Update();
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VideoView_PlayAnimation(void * jarg1, void * jarg2)
{
  Dali::Toolkit::VideoView *arg1 = (Dali::Toolkit::VideoView*)jarg1;
  if(arg1 == nullptr)
  {
    DALI_LOG_ERROR("VideoView is nullptr!");
    return;
  }
  Dali::Animation *arg2 = (Dali::Animation*)jarg2;
  if(arg2 == nullptr)
  {
    DALI_LOG_ERROR("Animation is nullptr!");
    return;
  }

  {
    try{

      Toolkit::DevelVideoView::PlayAnimation(*arg1, *arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_TITLE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::TITLE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_CONTENT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::CONTENT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_FOOTER_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::FOOTER;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_DISPLAY_STATE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::DISPLAY_STATE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_TOUCH_TRANSPARENT_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::TOUCH_TRANSPARENT;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_TAIL_VISIBILITY_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::TAIL_VISIBILITY;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_TAIL_POSITION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::TAIL_POSITION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_CONTEXTUAL_MODE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::CONTEXTUAL_MODE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_ANIMATION_DURATION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::ANIMATION_DURATION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_ANIMATION_MODE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::ANIMATION_MODE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_ENTRY_ANIMATION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::ENTRY_ANIMATION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_EXIT_ANIMATION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::EXIT_ANIMATION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_AUTO_HIDE_DELAY_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::AUTO_HIDE_DELAY;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_BACKING_ENABLED_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::BACKING_ENABLED;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_BACKING_COLOR_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::BACKING_COLOR;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_POPUP_BACKGROUND_IMAGE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::POPUP_BACKGROUND_IMAGE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_POPUP_BACKGROUND_BORDER_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::POPUP_BACKGROUND_BORDER;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_TAIL_UP_IMAGE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::TAIL_UP_IMAGE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_TAIL_DOWN_IMAGE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::TAIL_DOWN_IMAGE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_TAIL_LEFT_IMAGE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::TAIL_LEFT_IMAGE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_Property_TAIL_RIGHT_IMAGE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::Popup::Property::TAIL_RIGHT_IMAGE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Popup_Property() {
  void * jresult ;
  Dali::Toolkit::Popup::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::Popup::Property *)new Dali::Toolkit::Popup::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Popup_Property(void * jarg1) {
  Dali::Toolkit::Popup::Property *arg1 = (Dali::Toolkit::Popup::Property *) 0 ;

  arg1 = (Dali::Toolkit::Popup::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Popup__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::Popup *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::Popup *)new Dali::Toolkit::Popup();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Popup_New() {
  void * jresult ;
  Dali::Toolkit::Popup result;

  {
    try {
      result = Dali::Toolkit::Popup::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Popup((const Dali::Toolkit::Popup &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Popup(void * jarg1) {
  Dali::Toolkit::Popup *arg1 = (Dali::Toolkit::Popup *) 0 ;

  arg1 = (Dali::Toolkit::Popup *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Popup__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Popup *arg1 = 0 ;
  Dali::Toolkit::Popup *result = 0 ;

  arg1 = (Dali::Toolkit::Popup *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Popup const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Popup *)new Dali::Toolkit::Popup((Dali::Toolkit::Popup const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Popup_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::Popup *arg1 = (Dali::Toolkit::Popup *) 0 ;
  Dali::Toolkit::Popup *arg2 = 0 ;
  Dali::Toolkit::Popup *result = 0 ;

  arg1 = (Dali::Toolkit::Popup *)jarg1;
  arg2 = (Dali::Toolkit::Popup *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Popup const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Popup *) &(arg1)->operator =((Dali::Toolkit::Popup const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Popup_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::Popup result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::Popup::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Popup((const Dali::Toolkit::Popup &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Popup_SetTitle(void * jarg1, void * jarg2) {
  Dali::Toolkit::Popup *arg1 = (Dali::Toolkit::Popup *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Toolkit::Popup *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetTitle(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Popup_GetTitle(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Popup *arg1 = (Dali::Toolkit::Popup *) 0 ;
  Dali::Actor result;

  arg1 = (Dali::Toolkit::Popup *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::Popup const *)arg1)->GetTitle();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Popup_SetContent(void * jarg1, void * jarg2) {
  Dali::Toolkit::Popup *arg1 = (Dali::Toolkit::Popup *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Toolkit::Popup *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetContent(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Popup_GetContent(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Popup *arg1 = (Dali::Toolkit::Popup *) 0 ;
  Dali::Actor result;

  arg1 = (Dali::Toolkit::Popup *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::Popup const *)arg1)->GetContent();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Popup_SetFooter(void * jarg1, void * jarg2) {
  Dali::Toolkit::Popup *arg1 = (Dali::Toolkit::Popup *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Toolkit::Popup *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->SetFooter(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Popup_GetFooter(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Popup *arg1 = (Dali::Toolkit::Popup *) 0 ;
  Dali::Actor result;

  arg1 = (Dali::Toolkit::Popup *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::Popup const *)arg1)->GetFooter();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Popup_SetDisplayState(void * jarg1, int jarg2) {
  Dali::Toolkit::Popup *arg1 = (Dali::Toolkit::Popup *) 0 ;
  Dali::Toolkit::Popup::DisplayState arg2 ;

  arg1 = (Dali::Toolkit::Popup *)jarg1;
  arg2 = (Dali::Toolkit::Popup::DisplayState)jarg2;
  {
    try {
      (arg1)->SetDisplayState(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_Popup_GetDisplayState(void * jarg1) {
  int jresult ;
  Dali::Toolkit::Popup *arg1 = (Dali::Toolkit::Popup *) 0 ;
  Dali::Toolkit::Popup::DisplayState result;

  arg1 = (Dali::Toolkit::Popup *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Popup::DisplayState)((Dali::Toolkit::Popup const *)arg1)->GetDisplayState();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Popup_OutsideTouchedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Popup *arg1 = (Dali::Toolkit::Popup *) 0 ;
  Dali::Toolkit::Popup::TouchedOutsideSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Popup *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Popup::TouchedOutsideSignalType *) &(arg1)->OutsideTouchedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Popup_ShowingSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Popup *arg1 = (Dali::Toolkit::Popup *) 0 ;
  Dali::Toolkit::Popup::DisplayStateChangeSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Popup *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Popup::DisplayStateChangeSignalType *) &(arg1)->ShowingSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Popup_ShownSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Popup *arg1 = (Dali::Toolkit::Popup *) 0 ;
  Dali::Toolkit::Popup::DisplayStateChangeSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Popup *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Popup::DisplayStateChangeSignalType *) &(arg1)->ShownSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Popup_HidingSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Popup *arg1 = (Dali::Toolkit::Popup *) 0 ;
  Dali::Toolkit::Popup::DisplayStateChangeSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Popup *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Popup::DisplayStateChangeSignalType *) &(arg1)->HidingSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Popup_HiddenSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Popup *arg1 = (Dali::Toolkit::Popup *) 0 ;
  Dali::Toolkit::Popup::DisplayStateChangeSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::Popup *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Popup::DisplayStateChangeSignalType *) &(arg1)->HiddenSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ProgressBar_Property_PROGRESS_VALUE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ProgressBar::Property::PROGRESS_VALUE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ProgressBar_Property_SECONDARY_PROGRESS_VALUE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ProgressBar::Property::SECONDARY_PROGRESS_VALUE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ProgressBar_Property_INDETERMINATE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ProgressBar::Property::INDETERMINATE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ProgressBar_Property_TRACK_VISUAL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ProgressBar::Property::TRACK_VISUAL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ProgressBar_Property_PROGRESS_VISUAL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ProgressBar::Property::PROGRESS_VISUAL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ProgressBar_Property_SECONDARY_PROGRESS_VISUAL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ProgressBar::Property::SECONDARY_PROGRESS_VISUAL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ProgressBar_Property_INDETERMINATE_VISUAL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ProgressBar::Property::INDETERMINATE_VISUAL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ProgressBar_Property_INDETERMINATE_VISUAL_ANIMATION_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ProgressBar::Property::INDETERMINATE_VISUAL_ANIMATION;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ProgressBar_Property_LABEL_VISUAL_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ProgressBar::Property::LABEL_VISUAL;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ProgressBar_Property() {
  void * jresult ;
  Dali::Toolkit::ProgressBar::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ProgressBar::Property *)new Dali::Toolkit::ProgressBar::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ProgressBar_Property(void * jarg1) {
  Dali::Toolkit::ProgressBar::Property *arg1 = (Dali::Toolkit::ProgressBar::Property *) 0 ;

  arg1 = (Dali::Toolkit::ProgressBar::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ProgressBar_New() {
  void * jresult ;
  Dali::Toolkit::ProgressBar result;

  {
    try {
      result = Dali::Toolkit::ProgressBar::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ProgressBar((const Dali::Toolkit::ProgressBar &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ProgressBar__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::ProgressBar *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ProgressBar *)new Dali::Toolkit::ProgressBar();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ProgressBar__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ProgressBar *arg1 = 0 ;
  Dali::Toolkit::ProgressBar *result = 0 ;

  arg1 = (Dali::Toolkit::ProgressBar *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ProgressBar const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::ProgressBar *)new Dali::Toolkit::ProgressBar((Dali::Toolkit::ProgressBar const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ProgressBar_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::ProgressBar *arg1 = (Dali::Toolkit::ProgressBar *) 0 ;
  Dali::Toolkit::ProgressBar *arg2 = 0 ;
  Dali::Toolkit::ProgressBar *result = 0 ;

  arg1 = (Dali::Toolkit::ProgressBar *)jarg1;
  arg2 = (Dali::Toolkit::ProgressBar *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ProgressBar const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::ProgressBar *) &(arg1)->operator =((Dali::Toolkit::ProgressBar const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ProgressBar(void * jarg1) {
  Dali::Toolkit::ProgressBar *arg1 = (Dali::Toolkit::ProgressBar *) 0 ;

  arg1 = (Dali::Toolkit::ProgressBar *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ProgressBar_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::ProgressBar result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::ProgressBar::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ProgressBar((const Dali::Toolkit::ProgressBar &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ProgressBar_ValueChangedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ProgressBar *arg1 = (Dali::Toolkit::ProgressBar *) 0 ;
  Dali::Toolkit::ProgressBar::ValueChangedSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::ProgressBar *)jarg1;
  {
    try {
      result = (Dali::Toolkit::ProgressBar::ValueChangedSignalType *) &(arg1)->ValueChangedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_GaussianBlurView__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::GaussianBlurView *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::GaussianBlurView *)new Dali::Toolkit::GaussianBlurView();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_GaussianBlurView__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::GaussianBlurView *arg1 = 0 ;
  Dali::Toolkit::GaussianBlurView *result = 0 ;

  arg1 = (Dali::Toolkit::GaussianBlurView *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::GaussianBlurView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::GaussianBlurView *)new Dali::Toolkit::GaussianBlurView((Dali::Toolkit::GaussianBlurView const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GaussianBlurView_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::GaussianBlurView *arg1 = (Dali::Toolkit::GaussianBlurView *) 0 ;
  Dali::Toolkit::GaussianBlurView *arg2 = 0 ;
  Dali::Toolkit::GaussianBlurView *result = 0 ;

  arg1 = (Dali::Toolkit::GaussianBlurView *)jarg1;
  arg2 = (Dali::Toolkit::GaussianBlurView *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::GaussianBlurView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::GaussianBlurView *) &(arg1)->operator =((Dali::Toolkit::GaussianBlurView const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_GaussianBlurView(void * jarg1) {
  Dali::Toolkit::GaussianBlurView *arg1 = (Dali::Toolkit::GaussianBlurView *) 0 ;

  arg1 = (Dali::Toolkit::GaussianBlurView *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GaussianBlurView_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::GaussianBlurView result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::GaussianBlurView::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::GaussianBlurView((const Dali::Toolkit::GaussianBlurView &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GaussianBlurView_New__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::GaussianBlurView result;

  {
    try {
      result = Dali::Toolkit::GaussianBlurView::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::GaussianBlurView((const Dali::Toolkit::GaussianBlurView &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GaussianBlurView_New__SWIG_1(unsigned int jarg1, float jarg2, int jarg3, float jarg4, float jarg5, bool jarg6) {
  void * jresult ;
  unsigned int arg1 ;
  float arg2 ;
  Dali::Pixel::Format arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  Dali::Toolkit::GaussianBlurView result;

  arg1 = (unsigned int)jarg1;
  arg2 = (float)jarg2;
  arg3 = (Dali::Pixel::Format)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = jarg6 ? true : false;
  {
    try {
      result = Dali::Toolkit::GaussianBlurView::New(arg1,arg2,arg3,arg4,arg5,arg6);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::GaussianBlurView((const Dali::Toolkit::GaussianBlurView &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GaussianBlurView_New__SWIG_2(unsigned int jarg1, float jarg2, int jarg3, float jarg4, float jarg5) {
  void * jresult ;
  unsigned int arg1 ;
  float arg2 ;
  Dali::Pixel::Format arg3 ;
  float arg4 ;
  float arg5 ;
  Dali::Toolkit::GaussianBlurView result;

  arg1 = (unsigned int)jarg1;
  arg2 = (float)jarg2;
  arg3 = (Dali::Pixel::Format)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  {
    try {
      result = Dali::Toolkit::GaussianBlurView::New(arg1,arg2,arg3,arg4,arg5);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::GaussianBlurView((const Dali::Toolkit::GaussianBlurView &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_GaussianBlurView_Add(void * jarg1, void * jarg2) {
  Dali::Toolkit::GaussianBlurView *arg1 = (Dali::Toolkit::GaussianBlurView *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Toolkit::GaussianBlurView *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->Add(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_GaussianBlurView_Remove(void * jarg1, void * jarg2) {
  Dali::Toolkit::GaussianBlurView *arg1 = (Dali::Toolkit::GaussianBlurView *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Toolkit::GaussianBlurView *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->Remove(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_GaussianBlurView_Activate(void * jarg1) {
  Dali::Toolkit::GaussianBlurView *arg1 = (Dali::Toolkit::GaussianBlurView *) 0 ;

  arg1 = (Dali::Toolkit::GaussianBlurView *)jarg1;
  {
    try {
      (arg1)->Activate();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_GaussianBlurView_ActivateOnce(void * jarg1) {
  Dali::Toolkit::GaussianBlurView *arg1 = (Dali::Toolkit::GaussianBlurView *) 0 ;

  arg1 = (Dali::Toolkit::GaussianBlurView *)jarg1;
  {
    try {
      (arg1)->ActivateOnce();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_GaussianBlurView_Deactivate(void * jarg1) {
  Dali::Toolkit::GaussianBlurView *arg1 = (Dali::Toolkit::GaussianBlurView *) 0 ;

  arg1 = (Dali::Toolkit::GaussianBlurView *)jarg1;
  {
    try {
      (arg1)->Deactivate();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_GaussianBlurView_SetUserImageAndOutputRenderTarget(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Toolkit::GaussianBlurView *arg1 = (Dali::Toolkit::GaussianBlurView *) 0 ;
  Dali::Texture arg2 ;
  Dali::FrameBuffer arg3 ;
  Dali::Texture *argp2 ;
  Dali::FrameBuffer *argp3 ;

  arg1 = (Dali::Toolkit::GaussianBlurView *)jarg1;
  argp2 = (Dali::Texture *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Texture", 0);
    return ;
  }
  arg2 = *argp2;
  argp3 = (Dali::FrameBuffer *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::FrameBuffer", 0);
    return ;
  }
  arg3 = *argp3;
  {
    try {
      (arg1)->SetUserImageAndOutputRenderTarget(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_GaussianBlurView_GetBlurStrengthPropertyIndex(void * jarg1) {
  int jresult ;
  Dali::Toolkit::GaussianBlurView *arg1 = (Dali::Toolkit::GaussianBlurView *) 0 ;
  Dali::Property::Index result;

  arg1 = (Dali::Toolkit::GaussianBlurView *)jarg1;
  {
    try {
      result = (Dali::Property::Index)((Dali::Toolkit::GaussianBlurView const *)arg1)->GetBlurStrengthPropertyIndex();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GaussianBlurView_GetBlurredRenderTarget(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::GaussianBlurView *arg1 = (Dali::Toolkit::GaussianBlurView *) 0 ;
  Dali::FrameBuffer result;

  arg1 = (Dali::Toolkit::GaussianBlurView *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::GaussianBlurView const *)arg1)->GetBlurredRenderTarget();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::FrameBuffer((const Dali::FrameBuffer &)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_GaussianBlurView_SetBackgroundColor(void * jarg1, void * jarg2) {
  Dali::Toolkit::GaussianBlurView *arg1 = (Dali::Toolkit::GaussianBlurView *) 0 ;
  Dali::Vector4 *arg2 = 0 ;

  arg1 = (Dali::Toolkit::GaussianBlurView *)jarg1;
  arg2 = (Dali::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector4 const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->SetBackgroundColor((Dali::Vector4 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GaussianBlurView_GetBackgroundColor(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::GaussianBlurView *arg1 = (Dali::Toolkit::GaussianBlurView *) 0 ;
  Dali::Vector4 result;

  arg1 = (Dali::Toolkit::GaussianBlurView *)jarg1;
  {
    try {
      result = ((Dali::Toolkit::GaussianBlurView const *)arg1)->GetBackgroundColor();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Vector4((const Dali::Vector4 &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GaussianBlurView_FinishedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::GaussianBlurView *arg1 = (Dali::Toolkit::GaussianBlurView *) 0 ;
  Dali::Toolkit::GaussianBlurView::GaussianBlurViewSignal *result = 0 ;

  arg1 = (Dali::Toolkit::GaussianBlurView *)jarg1;
  {
    try {
      result = (Dali::Toolkit::GaussianBlurView::GaussianBlurViewSignal *) &(arg1)->FinishedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PageFactory(void * jarg1) {
  Dali::Toolkit::PageFactory *arg1 = (Dali::Toolkit::PageFactory *) 0 ;

  arg1 = (Dali::Toolkit::PageFactory *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_PageFactory_GetNumberOfPages(void * jarg1) {
  unsigned int jresult ;
  Dali::Toolkit::PageFactory *arg1 = (Dali::Toolkit::PageFactory *) 0 ;
  unsigned int result;

  arg1 = (Dali::Toolkit::PageFactory *)jarg1;
  {
    try {
      result = (unsigned int)(arg1)->GetNumberOfPages();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PageFactory_NewPage(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Dali::Toolkit::PageFactory *arg1 = (Dali::Toolkit::PageFactory *) 0 ;
  unsigned int arg2 ;
  Dali::Texture result;

  arg1 = (Dali::Toolkit::PageFactory *)jarg1;
  arg2 = (unsigned int)jarg2;
  {
    try {
      result = (arg1)->NewPage(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Texture((const Dali::Texture &)result);
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PageTurnView_Property_VIEW_PAGE_SIZE_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::PageTurnView::Property::VIEW_PAGE_SIZE;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PageTurnView_Property_CURRENT_PAGE_ID_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::PageTurnView::Property::CURRENT_PAGE_ID;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PageTurnView_Property_SPINE_SHADOW_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::PageTurnView::Property::SPINE_SHADOW;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PageTurnView_Property() {
  void * jresult ;
  Dali::Toolkit::PageTurnView::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::PageTurnView::Property *)new Dali::Toolkit::PageTurnView::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PageTurnView_Property(void * jarg1) {
  Dali::Toolkit::PageTurnView::Property *arg1 = (Dali::Toolkit::PageTurnView::Property *) 0 ;

  arg1 = (Dali::Toolkit::PageTurnView::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PageTurnView__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::PageTurnView *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::PageTurnView *)new Dali::Toolkit::PageTurnView();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PageTurnView__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::PageTurnView *arg1 = 0 ;
  Dali::Toolkit::PageTurnView *result = 0 ;

  arg1 = (Dali::Toolkit::PageTurnView *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::PageTurnView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::PageTurnView *)new Dali::Toolkit::PageTurnView((Dali::Toolkit::PageTurnView const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PageTurnView_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::PageTurnView *arg1 = (Dali::Toolkit::PageTurnView *) 0 ;
  Dali::Toolkit::PageTurnView *arg2 = 0 ;
  Dali::Toolkit::PageTurnView *result = 0 ;

  arg1 = (Dali::Toolkit::PageTurnView *)jarg1;
  arg2 = (Dali::Toolkit::PageTurnView *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::PageTurnView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::PageTurnView *) &(arg1)->operator =((Dali::Toolkit::PageTurnView const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PageTurnView(void * jarg1) {
  Dali::Toolkit::PageTurnView *arg1 = (Dali::Toolkit::PageTurnView *) 0 ;

  arg1 = (Dali::Toolkit::PageTurnView *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PageTurnView_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::PageTurnView result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::PageTurnView::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::PageTurnView((const Dali::Toolkit::PageTurnView &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PageTurnView_PageTurnStartedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::PageTurnView *arg1 = (Dali::Toolkit::PageTurnView *) 0 ;
  Dali::Toolkit::PageTurnView::PageTurnSignal *result = 0 ;

  arg1 = (Dali::Toolkit::PageTurnView *)jarg1;
  {
    try {
      result = (Dali::Toolkit::PageTurnView::PageTurnSignal *) &(arg1)->PageTurnStartedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PageTurnView_PageTurnFinishedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::PageTurnView *arg1 = (Dali::Toolkit::PageTurnView *) 0 ;
  Dali::Toolkit::PageTurnView::PageTurnSignal *result = 0 ;

  arg1 = (Dali::Toolkit::PageTurnView *)jarg1;
  {
    try {
      result = (Dali::Toolkit::PageTurnView::PageTurnSignal *) &(arg1)->PageTurnFinishedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PageTurnView_PagePanStartedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::PageTurnView *arg1 = (Dali::Toolkit::PageTurnView *) 0 ;
  Dali::Toolkit::PageTurnView::PagePanSignal *result = 0 ;

  arg1 = (Dali::Toolkit::PageTurnView *)jarg1;
  {
    try {
      result = (Dali::Toolkit::PageTurnView::PagePanSignal *) &(arg1)->PagePanStartedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PageTurnView_PagePanFinishedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::PageTurnView *arg1 = (Dali::Toolkit::PageTurnView *) 0 ;
  Dali::Toolkit::PageTurnView::PagePanSignal *result = 0 ;

  arg1 = (Dali::Toolkit::PageTurnView *)jarg1;
  {
    try {
      result = (Dali::Toolkit::PageTurnView::PagePanSignal *) &(arg1)->PagePanFinishedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PageTurnLandscapeView__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::PageTurnLandscapeView *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::PageTurnLandscapeView *)new Dali::Toolkit::PageTurnLandscapeView();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PageTurnLandscapeView__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::PageTurnLandscapeView *arg1 = 0 ;
  Dali::Toolkit::PageTurnLandscapeView *result = 0 ;

  arg1 = (Dali::Toolkit::PageTurnLandscapeView *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::PageTurnLandscapeView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::PageTurnLandscapeView *)new Dali::Toolkit::PageTurnLandscapeView((Dali::Toolkit::PageTurnLandscapeView const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PageTurnLandscapeView_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::PageTurnLandscapeView *arg1 = (Dali::Toolkit::PageTurnLandscapeView *) 0 ;
  Dali::Toolkit::PageTurnLandscapeView *arg2 = 0 ;
  Dali::Toolkit::PageTurnLandscapeView *result = 0 ;

  arg1 = (Dali::Toolkit::PageTurnLandscapeView *)jarg1;
  arg2 = (Dali::Toolkit::PageTurnLandscapeView *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::PageTurnLandscapeView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::PageTurnLandscapeView *) &(arg1)->operator =((Dali::Toolkit::PageTurnLandscapeView const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PageTurnLandscapeView(void * jarg1) {
  Dali::Toolkit::PageTurnLandscapeView *arg1 = (Dali::Toolkit::PageTurnLandscapeView *) 0 ;

  arg1 = (Dali::Toolkit::PageTurnLandscapeView *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PageTurnLandscapeView_New(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::PageFactory *arg1 = 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::Toolkit::PageTurnLandscapeView result;

  arg1 = (Dali::Toolkit::PageFactory *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::PageFactory & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = Dali::Toolkit::PageTurnLandscapeView::New(*arg1,(Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::PageTurnLandscapeView((const Dali::Toolkit::PageTurnLandscapeView &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PageTurnLandscapeView_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::PageTurnLandscapeView result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::PageTurnLandscapeView::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::PageTurnLandscapeView((const Dali::Toolkit::PageTurnLandscapeView &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PageTurnPortraitView__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::PageTurnPortraitView *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::PageTurnPortraitView *)new Dali::Toolkit::PageTurnPortraitView();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PageTurnPortraitView__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::PageTurnPortraitView *arg1 = 0 ;
  Dali::Toolkit::PageTurnPortraitView *result = 0 ;

  arg1 = (Dali::Toolkit::PageTurnPortraitView *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::PageTurnPortraitView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::PageTurnPortraitView *)new Dali::Toolkit::PageTurnPortraitView((Dali::Toolkit::PageTurnPortraitView const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PageTurnPortraitView_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::PageTurnPortraitView *arg1 = (Dali::Toolkit::PageTurnPortraitView *) 0 ;
  Dali::Toolkit::PageTurnPortraitView *arg2 = 0 ;
  Dali::Toolkit::PageTurnPortraitView *result = 0 ;

  arg1 = (Dali::Toolkit::PageTurnPortraitView *)jarg1;
  arg2 = (Dali::Toolkit::PageTurnPortraitView *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::PageTurnPortraitView const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::PageTurnPortraitView *) &(arg1)->operator =((Dali::Toolkit::PageTurnPortraitView const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PageTurnPortraitView(void * jarg1) {
  Dali::Toolkit::PageTurnPortraitView *arg1 = (Dali::Toolkit::PageTurnPortraitView *) 0 ;

  arg1 = (Dali::Toolkit::PageTurnPortraitView *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PageTurnPortraitView_New(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::PageFactory *arg1 = 0 ;
  Dali::Vector2 *arg2 = 0 ;
  Dali::Toolkit::PageTurnPortraitView result;

  arg1 = (Dali::Toolkit::PageFactory *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::PageFactory & type is null", 0);
    return 0;
  }
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return 0;
  }
  {
    try {
      result = Dali::Toolkit::PageTurnPortraitView::New(*arg1,(Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::PageTurnPortraitView((const Dali::Toolkit::PageTurnPortraitView &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PageTurnPortraitView_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::PageTurnPortraitView result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::PageTurnPortraitView::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::PageTurnPortraitView((const Dali::Toolkit::PageTurnPortraitView &)result);
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ToggleButton_Property_STATE_VISUALS_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ToggleButton::Property::STATE_VISUALS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ToggleButton_Property_TOOLTIPS_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ToggleButton::Property::TOOLTIPS;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ToggleButton_Property_CURRENT_STATE_INDEX_get() {
  int jresult ;
  int result;

  result = (int)Dali::Toolkit::ToggleButton::Property::CURRENT_STATE_INDEX;
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ToggleButton_Property() {
  void * jresult ;
  Dali::Toolkit::ToggleButton::Property *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ToggleButton::Property *)new Dali::Toolkit::ToggleButton::Property();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ToggleButton_Property(void * jarg1) {
  Dali::Toolkit::ToggleButton::Property *arg1 = (Dali::Toolkit::ToggleButton::Property *) 0 ;

  arg1 = (Dali::Toolkit::ToggleButton::Property *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ToggleButton__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::ToggleButton *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::ToggleButton *)new Dali::Toolkit::ToggleButton();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ToggleButton__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::ToggleButton *arg1 = 0 ;
  Dali::Toolkit::ToggleButton *result = 0 ;

  arg1 = (Dali::Toolkit::ToggleButton *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ToggleButton const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::ToggleButton *)new Dali::Toolkit::ToggleButton((Dali::Toolkit::ToggleButton const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ToggleButton_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::ToggleButton *arg1 = (Dali::Toolkit::ToggleButton *) 0 ;
  Dali::Toolkit::ToggleButton *arg2 = 0 ;
  Dali::Toolkit::ToggleButton *result = 0 ;

  arg1 = (Dali::Toolkit::ToggleButton *)jarg1;
  arg2 = (Dali::Toolkit::ToggleButton *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ToggleButton const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::ToggleButton *) &(arg1)->operator =((Dali::Toolkit::ToggleButton const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ToggleButton(void * jarg1) {
  Dali::Toolkit::ToggleButton *arg1 = (Dali::Toolkit::ToggleButton *) 0 ;

  arg1 = (Dali::Toolkit::ToggleButton *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ToggleButton_New() {
  void * jresult ;
  Dali::Toolkit::ToggleButton result;

  {
    try {
      result = Dali::Toolkit::ToggleButton::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ToggleButton((const Dali::Toolkit::ToggleButton &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ToggleButton_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::ToggleButton result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::ToggleButton::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::ToggleButton((const Dali::Toolkit::ToggleButton &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VisualBase__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::Visual::Base *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::Visual::Base *)new Dali::Toolkit::Visual::Base();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_VisualBase(void * jarg1) {
  Dali::Toolkit::Visual::Base *arg1 = (Dali::Toolkit::Visual::Base *) 0 ;

  arg1 = (Dali::Toolkit::Visual::Base *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VisualBase__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Visual::Base *arg1 = 0 ;
  Dali::Toolkit::Visual::Base *result = 0 ;

  arg1 = (Dali::Toolkit::Visual::Base *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Visual::Base const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Visual::Base *)new Dali::Toolkit::Visual::Base((Dali::Toolkit::Visual::Base const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VisualBase_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::Visual::Base *arg1 = (Dali::Toolkit::Visual::Base *) 0 ;
  Dali::Toolkit::Visual::Base *arg2 = 0 ;
  Dali::Toolkit::Visual::Base *result = 0 ;

  arg1 = (Dali::Toolkit::Visual::Base *)jarg1;
  arg2 = (Dali::Toolkit::Visual::Base *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::Visual::Base const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::Visual::Base *) &(arg1)->operator =((Dali::Toolkit::Visual::Base const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VisualBase_SetName(void * jarg1, char * jarg2) {
  Dali::Toolkit::Visual::Base *arg1 = (Dali::Toolkit::Visual::Base *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Visual::Base *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      (arg1)->SetName((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }


  //argout typemap for const std::string&

}


SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_VisualBase_GetName(void * jarg1) {
  char * jresult ;
  Dali::Toolkit::Visual::Base *arg1 = (Dali::Toolkit::Visual::Base *) 0 ;
  std::string *result = 0 ;

  arg1 = (Dali::Toolkit::Visual::Base *)jarg1;
  {
    try {
      result = (std::string *) &(arg1)->GetName();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = SWIG_csharp_string_callback(result->c_str());
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VisualBase_SetTransformAndSize(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Toolkit::Visual::Base *arg1 = (Dali::Toolkit::Visual::Base *) 0 ;
  Dali::Property::Map *arg2 = 0 ;
  Dali::Size arg3 ;
  Dali::Size *argp3 ;

  arg1 = (Dali::Toolkit::Visual::Base *)jarg1;
  arg2 = (Dali::Property::Map *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map const & type is null", 0);
    return ;
  }
  argp3 = (Dali::Size *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Size", 0);
    return ;
  }
  arg3 = *argp3;
  {
    try {
      (arg1)->SetTransformAndSize((Dali::Property::Map const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_VisualBase_GetHeightForWidth(void * jarg1, float jarg2) {
  float jresult ;
  Dali::Toolkit::Visual::Base *arg1 = (Dali::Toolkit::Visual::Base *) 0 ;
  float arg2 ;
  float result;

  arg1 = (Dali::Toolkit::Visual::Base *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (float)(arg1)->GetHeightForWidth(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_VisualBase_GetWidthForHeight(void * jarg1, float jarg2) {
  float jresult ;
  Dali::Toolkit::Visual::Base *arg1 = (Dali::Toolkit::Visual::Base *) 0 ;
  float arg2 ;
  float result;

  arg1 = (Dali::Toolkit::Visual::Base *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (float)(arg1)->GetWidthForHeight(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VisualBase_GetNaturalSize(void * jarg1, void * jarg2) {
  Dali::Toolkit::Visual::Base *arg1 = (Dali::Toolkit::Visual::Base *) 0 ;
  Dali::Vector2 *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Visual::Base *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->GetNaturalSize(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VisualBase_SetDepthIndex(void * jarg1, int jarg2) {
  Dali::Toolkit::Visual::Base *arg1 = (Dali::Toolkit::Visual::Base *) 0 ;
  float arg2 ;

  arg1 = (Dali::Toolkit::Visual::Base *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      (arg1)->SetDepthIndex(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_VisualBase_GetDepthIndex(void * jarg1) {
  int jresult ;
  Dali::Toolkit::Visual::Base *arg1 = (Dali::Toolkit::Visual::Base *) 0 ;
  int result;

  arg1 = (Dali::Toolkit::Visual::Base *)jarg1;
  {
    try {
      result = (float)((Dali::Toolkit::Visual::Base const *)arg1)->GetDepthIndex();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VisualBase_CreatePropertyMap(void * jarg1, void * jarg2) {
  Dali::Toolkit::Visual::Base *arg1 = (Dali::Toolkit::Visual::Base *) 0 ;
  Dali::Property::Map *arg2 = 0 ;

  arg1 = (Dali::Toolkit::Visual::Base *)jarg1;
  arg2 = (Dali::Property::Map *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map & type is null", 0);
    return ;
  }
  {
    try {
      ((Dali::Toolkit::Visual::Base const *)arg1)->CreatePropertyMap(*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VisualFactory_Get() {
  void * jresult ;
  Dali::Toolkit::VisualFactory result;

  {
    try {
      result = Dali::Toolkit::VisualFactory::Get();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::VisualFactory((const Dali::Toolkit::VisualFactory &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VisualFactory__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::VisualFactory *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::VisualFactory *)new Dali::Toolkit::VisualFactory();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_VisualFactory(void * jarg1) {
  Dali::Toolkit::VisualFactory *arg1 = (Dali::Toolkit::VisualFactory *) 0 ;

  arg1 = (Dali::Toolkit::VisualFactory *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VisualFactory__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::VisualFactory *arg1 = 0 ;
  Dali::Toolkit::VisualFactory *result = 0 ;

  arg1 = (Dali::Toolkit::VisualFactory *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::VisualFactory const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::VisualFactory *)new Dali::Toolkit::VisualFactory((Dali::Toolkit::VisualFactory const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VisualFactory_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::VisualFactory *arg1 = (Dali::Toolkit::VisualFactory *) 0 ;
  Dali::Toolkit::VisualFactory *arg2 = 0 ;
  Dali::Toolkit::VisualFactory *result = 0 ;

  arg1 = (Dali::Toolkit::VisualFactory *)jarg1;
  arg2 = (Dali::Toolkit::VisualFactory *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::VisualFactory const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::VisualFactory *) &(arg1)->operator =((Dali::Toolkit::VisualFactory const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VisualFactory_CreateVisual__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::VisualFactory *arg1 = (Dali::Toolkit::VisualFactory *) 0 ;
  Dali::Property::Map *arg2 = 0 ;
  Dali::Toolkit::Visual::Base result;

  arg1 = (Dali::Toolkit::VisualFactory *)jarg1;
  arg2 = (Dali::Property::Map *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Property::Map const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (arg1)->CreateVisual((Dali::Property::Map const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Visual::Base((const Dali::Toolkit::Visual::Base &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_VisualFactory_CreateVisual__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Dali::Toolkit::VisualFactory *arg1 = (Dali::Toolkit::VisualFactory *) 0 ;
  std::string *arg2 = 0 ;
  Dali::ImageDimensions arg3 ;
  Dali::ImageDimensions *argp3 ;
  Dali::Toolkit::Visual::Base result;

  arg1 = (Dali::Toolkit::VisualFactory *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  argp3 = (Dali::ImageDimensions *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg3 = *argp3;
  {
    try {
      result = (arg1)->CreateVisual((std::string const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::Visual::Base((const Dali::Toolkit::Visual::Base &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_AsyncImageLoader__SWIG_0() {
  void * jresult ;
  Dali::Toolkit::AsyncImageLoader *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::AsyncImageLoader *)new Dali::Toolkit::AsyncImageLoader();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_AsyncImageLoader(void * jarg1) {
  Dali::Toolkit::AsyncImageLoader *arg1 = (Dali::Toolkit::AsyncImageLoader *) 0 ;

  arg1 = (Dali::Toolkit::AsyncImageLoader *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_AsyncImageLoader__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AsyncImageLoader *arg1 = 0 ;
  Dali::Toolkit::AsyncImageLoader *result = 0 ;

  arg1 = (Dali::Toolkit::AsyncImageLoader *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::AsyncImageLoader const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::AsyncImageLoader *)new Dali::Toolkit::AsyncImageLoader((Dali::Toolkit::AsyncImageLoader const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AsyncImageLoader_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Toolkit::AsyncImageLoader *arg1 = (Dali::Toolkit::AsyncImageLoader *) 0 ;
  Dali::Toolkit::AsyncImageLoader *arg2 = 0 ;
  Dali::Toolkit::AsyncImageLoader *result = 0 ;

  arg1 = (Dali::Toolkit::AsyncImageLoader *)jarg1;
  arg2 = (Dali::Toolkit::AsyncImageLoader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::AsyncImageLoader const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Toolkit::AsyncImageLoader *) &(arg1)->operator =((Dali::Toolkit::AsyncImageLoader const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AsyncImageLoader_New() {
  void * jresult ;
  Dali::Toolkit::AsyncImageLoader result;

  {
    try {
      result = Dali::Toolkit::AsyncImageLoader::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::AsyncImageLoader((const Dali::Toolkit::AsyncImageLoader &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AsyncImageLoader_DownCast(void * jarg1) {
  void * jresult ;
  Dali::BaseHandle arg1 ;
  Dali::BaseHandle *argp1 ;
  Dali::Toolkit::AsyncImageLoader result;

  argp1 = (Dali::BaseHandle *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::BaseHandle", 0);
    return 0;
  }
  arg1 = *argp1;
  {
    try {
      result = Dali::Toolkit::AsyncImageLoader::DownCast(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Toolkit::AsyncImageLoader((const Dali::Toolkit::AsyncImageLoader &)result);
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_AsyncImageLoader_Load__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Dali::Toolkit::AsyncImageLoader *arg1 = (Dali::Toolkit::AsyncImageLoader *) 0 ;
  std::string *arg2 = 0 ;
  uint32_t result;

  arg1 = (Dali::Toolkit::AsyncImageLoader *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      result = (arg1)->Load((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_AsyncImageLoader_Load__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Dali::Toolkit::AsyncImageLoader *arg1 = (Dali::Toolkit::AsyncImageLoader *) 0 ;
  std::string *arg2 = 0 ;
  Dali::ImageDimensions arg3 ;
  Dali::ImageDimensions *argp3 ;
  uint32_t result;

  arg1 = (Dali::Toolkit::AsyncImageLoader *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  argp3 = (Dali::ImageDimensions *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg3 = *argp3;
  {
    try {
      result = (arg1)->Load((std::string const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_AsyncImageLoader_Load__SWIG_2(void * jarg1, char * jarg2, void * jarg3, int jarg4, int jarg5, bool jarg6) {
  unsigned int jresult ;
  Dali::Toolkit::AsyncImageLoader *arg1 = (Dali::Toolkit::AsyncImageLoader *) 0 ;
  std::string *arg2 = 0 ;
  Dali::ImageDimensions arg3 ;
  Dali::FittingMode::Type arg4 ;
  Dali::SamplingMode::Type arg5 ;
  bool arg6 ;
  Dali::ImageDimensions *argp3 ;
  uint32_t result;

  arg1 = (Dali::Toolkit::AsyncImageLoader *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  argp3 = (Dali::ImageDimensions *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg3 = *argp3;
  arg4 = (Dali::FittingMode::Type)jarg4;
  arg5 = (Dali::SamplingMode::Type)jarg5;
  arg6 = jarg6 ? true : false;
  {
    try {
      result = (arg1)->Load((std::string const &)*arg2,arg3,arg4,arg5,arg6);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_AsyncImageLoader_Cancel(void * jarg1, unsigned int jarg2) {
  bool jresult ;
  Dali::Toolkit::AsyncImageLoader *arg1 = (Dali::Toolkit::AsyncImageLoader *) 0 ;
  uint32_t arg2 ;
  bool result;

  arg1 = (Dali::Toolkit::AsyncImageLoader *)jarg1;
  arg2 = (uint32_t)jarg2;
  {
    try {
      result = (bool)(arg1)->Cancel(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AsyncImageLoader_CancelAll(void * jarg1) {
  Dali::Toolkit::AsyncImageLoader *arg1 = (Dali::Toolkit::AsyncImageLoader *) 0 ;

  arg1 = (Dali::Toolkit::AsyncImageLoader *)jarg1;
  {
    try {
      (arg1)->CancelAll();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_AsyncImageLoader_ImageLoadedSignal(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::AsyncImageLoader *arg1 = (Dali::Toolkit::AsyncImageLoader *) 0 ;
  Dali::Toolkit::AsyncImageLoader::ImageLoadedSignalType *result = 0 ;

  arg1 = (Dali::Toolkit::AsyncImageLoader *)jarg1;
  {
    try {
      result = (Dali::Toolkit::AsyncImageLoader::ImageLoadedSignalType *) &(arg1)->ImageLoadedSignal();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LoadImageSynchronously__SWIG_0(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::PixelData result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  {
    try {
      result = Dali::Toolkit::SyncImageLoader::Load((std::string const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PixelData((const Dali::PixelData &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LoadImageSynchronously__SWIG_1(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::ImageDimensions arg2 ;
  Dali::ImageDimensions *argp2 ;
  Dali::PixelData result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = Dali::Toolkit::SyncImageLoader::Load((std::string const &)*arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PixelData((const Dali::PixelData &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LoadImageSynchronously__SWIG_2(char * jarg1, void * jarg2, int jarg3, int jarg4, bool jarg5) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::ImageDimensions arg2 ;
  Dali::FittingMode::Type arg3 ;
  Dali::SamplingMode::Type arg4 ;
  bool arg5 ;
  Dali::ImageDimensions *argp2 ;
  Dali::PixelData result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::FittingMode::Type)jarg3;
  arg4 = (Dali::SamplingMode::Type)jarg4;
  arg5 = jarg5 ? true : false;
  {
    try {
      result = Dali::Toolkit::SyncImageLoader::Load((std::string const &)*arg1,arg2,arg3,arg4,arg5);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::PixelData((const Dali::PixelData &)result);

  //argout typemap for const std::string&

  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_CustomAlgorithmInterface(void * jarg1) {
  Dali::Toolkit::DevelKeyboardFocusManager::CustomAlgorithmInterface *arg1 = (Dali::Toolkit::DevelKeyboardFocusManager::CustomAlgorithmInterface *) 0 ;

  arg1 = (Dali::Toolkit::DevelKeyboardFocusManager::CustomAlgorithmInterface *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_CustomAlgorithmInterface_GetNextFocusableActor(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  Dali::Toolkit::DevelKeyboardFocusManager::CustomAlgorithmInterface *arg1 = (Dali::Toolkit::DevelKeyboardFocusManager::CustomAlgorithmInterface *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor arg3 ;
  Dali::Toolkit::Control::KeyboardFocus::Direction arg4 ;
  Dali::Actor *argp2 ;
  Dali::Actor *argp3 ;
  Dali::Actor result;

  arg1 = (Dali::Toolkit::DevelKeyboardFocusManager::CustomAlgorithmInterface *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg2 = *argp2;
  argp3 = (Dali::Actor *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg3 = *argp3;
  arg4 = (Dali::Toolkit::Control::KeyboardFocus::Direction)jarg4;
  {
    try {
      result = (arg1)->GetNextFocusableActor(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_CustomAlgorithmInterface() {
  void * jresult ;
  Dali::Toolkit::DevelKeyboardFocusManager::CustomAlgorithmInterface *result = 0 ;

  {
    try {
      result = (Dali::Toolkit::DevelKeyboardFocusManager::CustomAlgorithmInterface *)new SwigDirector_CustomAlgorithmInterface();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_FrameCallbackInterface_director_connect(void *objarg, SwigDirector_FrameCallbackInterface::SWIG_Callback0_t callback0) {
  Dali::FrameCallbackInterface *obj = (Dali::FrameCallbackInterface *)objarg;
  SwigDirector_FrameCallbackInterface *director = dynamic_cast<SwigDirector_FrameCallbackInterface *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_FrameCallbackInterface() {
  void * jresult ;
  Dali::FrameCallbackInterface *result = 0 ;

  {
    try {
      result =(Dali::FrameCallbackInterface *) new SwigDirector_FrameCallbackInterface();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_FrameCallbackInterface_GetPosition(void * updateProxy, unsigned int id,  void* position) {
  Dali::UpdateProxy *proxy = (Dali::UpdateProxy*)updateProxy;
  Dali::Vector3* vector3 = (Dali::Vector3 *)position;
  return proxy->GetPosition(id, *vector3);
}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_FrameCallbackInterface_SetPosition(void * updateProxy, unsigned int id, void* position) {
  Dali::UpdateProxy *proxy = (Dali::UpdateProxy*)updateProxy;
  Dali::Vector3* vector3 = (Dali::Vector3 *)position;
  return proxy->SetPosition(id, *vector3);
}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_FrameCallbackInterface_BakePosition(void * updateProxy, unsigned int id, void* position) {
  Dali::UpdateProxy *proxy = (Dali::UpdateProxy*)updateProxy;
  Dali::Vector3* vector3 = (Dali::Vector3 *)position;
  return proxy->BakePosition(id, *vector3);
}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_FrameCallbackInterface_GetSize(void * updateProxy, unsigned int id, void* size) {
  Dali::UpdateProxy *proxy = (Dali::UpdateProxy*)updateProxy;
  Dali::Vector3* vector3 = (Dali::Vector3 *)size;
  return proxy->GetSize(id, *vector3);
}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_FrameCallbackInterface_SetSize(void * updateProxy, unsigned int id, void* size) {
  Dali::UpdateProxy *proxy = (Dali::UpdateProxy*)updateProxy;
  Dali::Vector3* vector3 = (Dali::Vector3 *)size;
  return proxy->SetSize(id, *vector3);
}
SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_FrameCallbackInterface_BakeSize(void * updateProxy, unsigned int id, void* size) {
  Dali::UpdateProxy *proxy = (Dali::UpdateProxy*)updateProxy;
  Dali::Vector3* vector3 = (Dali::Vector3 *)size;
  return proxy->BakeSize(id, *vector3);
}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_FrameCallbackInterface_GetPositionAndSize(void * updateProxy, unsigned int id, void* position, void* size) {
  Dali::UpdateProxy *proxy = (Dali::UpdateProxy*)updateProxy;
  Dali::Vector3* vector3_pos = (Dali::Vector3 *)position;
  Dali::Vector3* vector3_size = (Dali::Vector3 *)size;
  return proxy->GetPositionAndSize(id, *vector3_pos, *vector3_size);
}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_FrameCallbackInterface_GetScale(void * updateProxy, unsigned int id, void* scale) {
  Dali::UpdateProxy *proxy = (Dali::UpdateProxy*)updateProxy;
  Dali::Vector3* vector3 = (Dali::Vector3 *)scale;
  return proxy->GetScale(id,* vector3);
}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_FrameCallbackInterface_SetScale(void * updateProxy, unsigned int id, void* scale) {
  Dali::UpdateProxy *proxy = (Dali::UpdateProxy*)updateProxy;
  Dali::Vector3* vector3 = (Dali::Vector3 *)scale;
  return proxy->SetScale(id, *vector3);
}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_FrameCallbackInterface_BakeScale(void * updateProxy, unsigned int id, void* scale) {
  Dali::UpdateProxy *proxy = (Dali::UpdateProxy*)updateProxy;
  Dali::Vector3* vector3 = (Dali::Vector3 *)scale;
  return proxy->BakeScale(id, *vector3);
}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_FrameCallbackInterface_GetColor(void * updateProxy, unsigned int id, void* color) {
  Dali::UpdateProxy *proxy = (Dali::UpdateProxy*)updateProxy;
  Dali::Vector4* vector4 = (Dali::Vector4 *)color;
  return proxy->GetColor(id, *vector4);
}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_FrameCallbackInterface_SetColor(void * updateProxy, unsigned int id, void* color) {
  Dali::UpdateProxy *proxy = (Dali::UpdateProxy*)updateProxy;
  Dali::Vector4* vector4 = (Dali::Vector4 *)color;
  return proxy->SetColor(id, *vector4);
}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_FrameCallbackInterface_BakeColor(void * updateProxy, unsigned int id, void* color) {
  Dali::UpdateProxy *proxy = (Dali::UpdateProxy*)updateProxy;
  Dali::Vector4* vector4 = (Dali::Vector4 *)color;
  return proxy->BakeColor(id, *vector4);
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_FrameCallbackInterface_AddFrameCallback(void * jarg1, void* jarg2, void* jarg3) {
  Dali::FrameCallbackInterface *obj = (Dali::FrameCallbackInterface *)jarg2;
  SwigDirector_FrameCallbackInterface *arg2 = dynamic_cast<SwigDirector_FrameCallbackInterface *>(obj);

  Dali::Stage *arg1 = (Dali::Stage *) 0;
  Dali::Actor *arg3 = 0;

  arg1 = (Dali::Stage *)jarg1;
  arg3 = (Dali::Actor *)jarg3;

  DevelStage::AddFrameCallback( *arg1, *arg2, *arg3 );
  return;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_FrameCallbackInterface_RemoveFrameCallback(void * jarg1, void* jarg2) {

  Dali::FrameCallbackInterface *obj = (Dali::FrameCallbackInterface *)jarg2;
  SwigDirector_FrameCallbackInterface *arg2 = dynamic_cast<SwigDirector_FrameCallbackInterface *>(obj);

  Dali::Stage *arg1 = (Dali::Stage *) 0;

  arg1 = (Dali::Stage *)jarg1;

  DevelStage::RemoveFrameCallback( *arg1, *arg2 );
  return;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_CustomAlgorithmInterface_director_connect(void *objarg, SwigDirector_CustomAlgorithmInterface::SWIG_Callback0_t callback0) {
  Dali::Toolkit::DevelKeyboardFocusManager::CustomAlgorithmInterface *obj = (Dali::Toolkit::DevelKeyboardFocusManager::CustomAlgorithmInterface *)objarg;
  SwigDirector_CustomAlgorithmInterface *director = dynamic_cast<SwigDirector_CustomAlgorithmInterface *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_SetCustomAlgorithm(void * jarg1, void * jarg2) {
  KeyboardFocusManager arg1 ;
  Dali::Toolkit::DevelKeyboardFocusManager::CustomAlgorithmInterface *arg2 = 0 ;
  KeyboardFocusManager *argp1 ;

  argp1 = (KeyboardFocusManager *)jarg1;
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null KeyboardFocusManager", 0);
    return ;
  }
  arg1 = *argp1;
  arg2 = (Dali::Toolkit::DevelKeyboardFocusManager::CustomAlgorithmInterface *)jarg2;
  //Null checking of arg2 is removed. arg2's null set means resetting so it can be a null value.
  {
    try {
      Dali::Toolkit::DevelKeyboardFocusManager::SetCustomAlgorithm(arg1,*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemIdContainer_Clear(void * jarg1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;

  arg1 = (std::vector< unsigned int > *)jarg1;
  {
    try {
      (arg1)->clear();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemIdContainer_Add(void * jarg1, unsigned int jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;

  arg1 = (std::vector< unsigned int > *)jarg1;
  temp2 = (unsigned int)jarg2;
  arg2 = &temp2;
  {
    try {
      (arg1)->push_back((unsigned int const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ItemIdContainer_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;

  arg1 = (std::vector< unsigned int > *)jarg1;
  {
    try {
      result = ((std::vector< unsigned int > const *)arg1)->size();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ItemIdContainer_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;

  arg1 = (std::vector< unsigned int > *)jarg1;
  {
    try {
      result = ((std::vector< unsigned int > const *)arg1)->capacity();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemIdContainer_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;

  arg1 = (std::vector< unsigned int > *)jarg1;
  arg2 = (std::vector< unsigned int >::size_type)jarg2;
  {
    try {
      (arg1)->reserve(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ItemIdContainer__SWIG_0() {
  void * jresult ;
  std::vector< unsigned int > *result = 0 ;

  {
    try {
      result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ItemIdContainer__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< unsigned int > *arg1 = 0 ;
  std::vector< unsigned int > *result = 0 ;

  arg1 = (std::vector< unsigned int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (std::vector< unsigned int > *)new std::vector< unsigned int >((std::vector< unsigned int > const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ItemIdContainer__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< unsigned int > *result = 0 ;

  arg1 = (int)jarg1;
  {
    try {
      try {
        result = (std::vector< unsigned int > *)new_std_vector_Sl_unsigned_SS_int_Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_ItemIdContainer_getitemcopy(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  unsigned int result;

  arg1 = (std::vector< unsigned int > *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      try {
        result = (unsigned int)std_vector_Sl_unsigned_SS_int_Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_ItemIdContainer_getitem(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  unsigned int *result = 0 ;

  arg1 = (std::vector< unsigned int > *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      try {
        result = (unsigned int *) &std_vector_Sl_unsigned_SS_int_Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = *result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemIdContainer_setitem(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;

  arg1 = (std::vector< unsigned int > *)jarg1;
  arg2 = (int)jarg2;
  temp3 = (unsigned int)jarg3;
  arg3 = &temp3;
  {
    try {
      try {
        std_vector_Sl_unsigned_SS_int_Sg__setitem(arg1,arg2,(unsigned int const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemIdContainer_AddRange(void * jarg1, void * jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ;

  arg1 = (std::vector< unsigned int > *)jarg1;
  arg2 = (std::vector< unsigned int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  }
  {
    try {
      std_vector_Sl_unsigned_SS_int_Sg__AddRange(arg1,(std::vector< unsigned int > const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemIdContainer_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned int > *result = 0 ;

  arg1 = (std::vector< unsigned int > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  {
    try {
      try {
        result = (std::vector< unsigned int > *)std_vector_Sl_unsigned_SS_int_Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemIdContainer_Insert(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;

  arg1 = (std::vector< unsigned int > *)jarg1;
  arg2 = (int)jarg2;
  temp3 = (unsigned int)jarg3;
  arg3 = &temp3;
  {
    try {
      try {
        std_vector_Sl_unsigned_SS_int_Sg__Insert(arg1,arg2,(unsigned int const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemIdContainer_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int > *arg3 = 0 ;

  arg1 = (std::vector< unsigned int > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (std::vector< unsigned int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  }
  {
    try {
      try {
        std_vector_Sl_unsigned_SS_int_Sg__InsertRange(arg1,arg2,(std::vector< unsigned int > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemIdContainer_RemoveAt(void * jarg1, int jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;

  arg1 = (std::vector< unsigned int > *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      try {
        std_vector_Sl_unsigned_SS_int_Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemIdContainer_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  int arg3 ;

  arg1 = (std::vector< unsigned int > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  {
    try {
      try {
        std_vector_Sl_unsigned_SS_int_Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemIdContainer_Repeat(unsigned int jarg1, int jarg2) {
  void * jresult ;
  unsigned int *arg1 = 0 ;
  int arg2 ;
  unsigned int temp1 ;
  std::vector< unsigned int > *result = 0 ;

  temp1 = (unsigned int)jarg1;
  arg1 = &temp1;
  arg2 = (int)jarg2;
  {
    try {
      try {
        result = (std::vector< unsigned int > *)std_vector_Sl_unsigned_SS_int_Sg__Repeat((unsigned int const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemIdContainer_Reverse__SWIG_0(void * jarg1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;

  arg1 = (std::vector< unsigned int > *)jarg1;
  {
    try {
      std_vector_Sl_unsigned_SS_int_Sg__Reverse__SWIG_0(arg1);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemIdContainer_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  int arg3 ;

  arg1 = (std::vector< unsigned int > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  {
    try {
      try {
        std_vector_Sl_unsigned_SS_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemIdContainer_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int > *arg3 = 0 ;

  arg1 = (std::vector< unsigned int > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (std::vector< unsigned int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  }
  {
    try {
      try {
        std_vector_Sl_unsigned_SS_int_Sg__SetRange(arg1,arg2,(std::vector< unsigned int > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ItemIdContainer_Contains(void * jarg1, unsigned int jarg2) {
  bool jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;

  arg1 = (std::vector< unsigned int > *)jarg1;
  temp2 = (unsigned int)jarg2;
  arg2 = &temp2;
  {
    try {
      result = (bool)std_vector_Sl_unsigned_SS_int_Sg__Contains(arg1,(unsigned int const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ItemIdContainer_IndexOf(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  int result;

  arg1 = (std::vector< unsigned int > *)jarg1;
  temp2 = (unsigned int)jarg2;
  arg2 = &temp2;
  {
    try {
      result = (int)std_vector_Sl_unsigned_SS_int_Sg__IndexOf(arg1,(unsigned int const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_ItemIdContainer_LastIndexOf(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  int result;

  arg1 = (std::vector< unsigned int > *)jarg1;
  temp2 = (unsigned int)jarg2;
  arg2 = &temp2;
  {
    try {
      result = (int)std_vector_Sl_unsigned_SS_int_Sg__LastIndexOf(arg1,(unsigned int const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ItemIdContainer_Remove(void * jarg1, unsigned int jarg2) {
  bool jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;

  arg1 = (std::vector< unsigned int > *)jarg1;
  temp2 = (unsigned int)jarg2;
  arg2 = &temp2;
  {
    try {
      result = (bool)std_vector_Sl_unsigned_SS_int_Sg__Remove(arg1,(unsigned int const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ItemIdContainer(void * jarg1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;

  arg1 = (std::vector< unsigned int > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Item__SWIG_0() {
  void * jresult ;
  std::pair< unsigned int,Dali::Actor > *result = 0 ;

  {
    try {
      result = (std::pair< unsigned int,Dali::Actor > *)new std::pair< unsigned int,Dali::Actor >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Item__SWIG_1(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Dali::Actor arg2 ;
  Dali::Actor *argp2 ;
  std::pair< unsigned int,Dali::Actor > *result = 0 ;

  arg1 = (unsigned int)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (std::pair< unsigned int,Dali::Actor > *)new std::pair< unsigned int,Dali::Actor >(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Item__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< unsigned int,Dali::Actor > *arg1 = 0 ;
  std::pair< unsigned int,Dali::Actor > *result = 0 ;

  arg1 = (std::pair< unsigned int,Dali::Actor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< unsigned int,Dali::Actor > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (std::pair< unsigned int,Dali::Actor > *)new std::pair< unsigned int,Dali::Actor >((std::pair< unsigned int,Dali::Actor > const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Item_first_set(void * jarg1, unsigned int jarg2) {
  std::pair< unsigned int,Dali::Actor > *arg1 = (std::pair< unsigned int,Dali::Actor > *) 0 ;
  unsigned int arg2 ;

  arg1 = (std::pair< unsigned int,Dali::Actor > *)jarg1;
  arg2 = (unsigned int)jarg2;
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_Item_first_get(void * jarg1) {
  unsigned int jresult ;
  std::pair< unsigned int,Dali::Actor > *arg1 = (std::pair< unsigned int,Dali::Actor > *) 0 ;
  unsigned int result;

  arg1 = (std::pair< unsigned int,Dali::Actor > *)jarg1;
  result = (unsigned int) ((arg1)->first);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_Item_second_set(void * jarg1, void * jarg2) {
  std::pair< unsigned int,Dali::Actor > *arg1 = (std::pair< unsigned int,Dali::Actor > *) 0 ;
  Dali::Actor *arg2 = (Dali::Actor *) 0 ;

  arg1 = (std::pair< unsigned int,Dali::Actor > *)jarg1;
  arg2 = (Dali::Actor *)jarg2;
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Item_second_get(void * jarg1) {
  void * jresult ;
  std::pair< unsigned int,Dali::Actor > *arg1 = (std::pair< unsigned int,Dali::Actor > *) 0 ;
  Dali::Actor *result = 0 ;

  arg1 = (std::pair< unsigned int,Dali::Actor > *)jarg1;
  result = (Dali::Actor *)& ((arg1)->second);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Item(void * jarg1) {
  std::pair< unsigned int,Dali::Actor > *arg1 = (std::pair< unsigned int,Dali::Actor > *) 0 ;

  arg1 = (std::pair< unsigned int,Dali::Actor > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemContainer_Clear(void * jarg1) {
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  {
    try {
      (arg1)->clear();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemContainer_Add(void * jarg1, void * jarg2) {
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;
  std::pair< unsigned int,Dali::Actor > *arg2 = 0 ;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  arg2 = (std::pair< unsigned int,Dali::Actor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< unsigned int,Dali::Actor > const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->push_back((std::pair< unsigned int,Dali::Actor > const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ItemContainer_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;
  std::vector< std::pair< unsigned int,Dali::Actor > >::size_type result;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  {
    try {
      result = ((std::vector< std::pair< unsigned int,Dali::Actor > > const *)arg1)->size();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ItemContainer_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;
  std::vector< std::pair< unsigned int,Dali::Actor > >::size_type result;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  {
    try {
      result = ((std::vector< std::pair< unsigned int,Dali::Actor > > const *)arg1)->capacity();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemContainer_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;
  std::vector< std::pair< unsigned int,Dali::Actor > >::size_type arg2 ;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  arg2 = (std::vector< std::pair< unsigned int,Dali::Actor > >::size_type)jarg2;
  {
    try {
      (arg1)->reserve(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ItemContainer__SWIG_0() {
  void * jresult ;
  std::vector< std::pair< unsigned int,Dali::Actor > > *result = 0 ;

  {
    try {
      result = (std::vector< std::pair< unsigned int,Dali::Actor > > *)new std::vector< std::pair< unsigned int,Dali::Actor > >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ItemContainer__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = 0 ;
  std::vector< std::pair< unsigned int,Dali::Actor > > *result = 0 ;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< unsigned int,Dali::Actor > > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (std::vector< std::pair< unsigned int,Dali::Actor > > *)new std::vector< std::pair< unsigned int,Dali::Actor > >((std::vector< std::pair< unsigned int,Dali::Actor > > const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ItemContainer__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::pair< unsigned int,Dali::Actor > > *result = 0 ;

  arg1 = (int)jarg1;
  {
    try {
      try {
        result = (std::vector< std::pair< unsigned int,Dali::Actor > > *)new_std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemContainer_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;
  int arg2 ;
  std::pair< unsigned int,Dali::Actor > result;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      try {
        result = std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new std::pair< unsigned int,Dali::Actor >((const std::pair< unsigned int,Dali::Actor > &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemContainer_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;
  int arg2 ;
  std::pair< unsigned int,Dali::Actor > *result = 0 ;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      try {
        result = (std::pair< unsigned int,Dali::Actor > *) &std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemContainer_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;
  int arg2 ;
  std::pair< unsigned int,Dali::Actor > *arg3 = 0 ;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (std::pair< unsigned int,Dali::Actor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< unsigned int,Dali::Actor > const & type is null", 0);
    return ;
  }
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__setitem(arg1,arg2,(std::pair< unsigned int,Dali::Actor > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemContainer_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg2 = 0 ;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  arg2 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< unsigned int,Dali::Actor > > const & type is null", 0);
    return ;
  }
  {
    try {
      std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__AddRange(arg1,(std::vector< std::pair< unsigned int,Dali::Actor > > const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemContainer_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::pair< unsigned int,Dali::Actor > > *result = 0 ;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  {
    try {
      try {
        result = (std::vector< std::pair< unsigned int,Dali::Actor > > *)std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemContainer_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;
  int arg2 ;
  std::pair< unsigned int,Dali::Actor > *arg3 = 0 ;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (std::pair< unsigned int,Dali::Actor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< unsigned int,Dali::Actor > const & type is null", 0);
    return ;
  }
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__Insert(arg1,arg2,(std::pair< unsigned int,Dali::Actor > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemContainer_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg3 = 0 ;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< unsigned int,Dali::Actor > > const & type is null", 0);
    return ;
  }
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::pair< unsigned int,Dali::Actor > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemContainer_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;
  int arg2 ;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemContainer_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;
  int arg2 ;
  int arg3 ;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ItemContainer_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::pair< unsigned int,Dali::Actor > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::pair< unsigned int,Dali::Actor > > *result = 0 ;

  arg1 = (std::pair< unsigned int,Dali::Actor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< unsigned int,Dali::Actor > const & type is null", 0);
    return 0;
  }
  arg2 = (int)jarg2;
  {
    try {
      try {
        result = (std::vector< std::pair< unsigned int,Dali::Actor > > *)std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__Repeat((std::pair< unsigned int,Dali::Actor > const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemContainer_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  {
    try {
      std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__Reverse__SWIG_0(arg1);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemContainer_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;
  int arg2 ;
  int arg3 ;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ItemContainer_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg3 = 0 ;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< unsigned int,Dali::Actor > > const & type is null", 0);
    return ;
  }
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_Dali_Actor_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::pair< unsigned int,Dali::Actor > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ItemContainer(void * jarg1) {
  std::vector< std::pair< unsigned int,Dali::Actor > > *arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *) 0 ;

  arg1 = (std::vector< std::pair< unsigned int,Dali::Actor > > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorContainer_Clear(void * jarg1) {
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  {
    try {
      (arg1)->clear();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorContainer_Add(void * jarg1, void * jarg2) {
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;
  Dali::Actor *arg2 = 0 ;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  arg2 = (Dali::Actor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor const & type is null", 0);
    return ;
  }
  {
    try {
      (arg1)->push_back((Dali::Actor const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ActorContainer_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;
  std::vector< Dali::Actor >::size_type result;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  {
    try {
      result = ((std::vector< Dali::Actor > const *)arg1)->size();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ActorContainer_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;
  std::vector< Dali::Actor >::size_type result;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  {
    try {
      result = ((std::vector< Dali::Actor > const *)arg1)->capacity();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorContainer_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;
  std::vector< Dali::Actor >::size_type arg2 ;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  arg2 = (std::vector< Dali::Actor >::size_type)jarg2;
  {
    try {
      (arg1)->reserve(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ActorContainer__SWIG_0() {
  void * jresult ;
  std::vector< Dali::Actor > *result = 0 ;

  {
    try {
      result = (std::vector< Dali::Actor > *)new std::vector< Dali::Actor >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ActorContainer__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Dali::Actor > *arg1 = 0 ;
  std::vector< Dali::Actor > *result = 0 ;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Dali::Actor > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (std::vector< Dali::Actor > *)new std::vector< Dali::Actor >((std::vector< Dali::Actor > const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ActorContainer__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Dali::Actor > *result = 0 ;

  arg1 = (int)jarg1;
  {
    try {
      try {
        result = (std::vector< Dali::Actor > *)new_std_vector_Sl_Dali_Actor_Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ActorContainer_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;
  int arg2 ;
  Dali::Actor result;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      try {
        result = std_vector_Sl_Dali_Actor_Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Actor((const Dali::Actor &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ActorContainer_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;
  int arg2 ;
  Dali::Actor *result = 0 ;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      try {
        result = (Dali::Actor *) &std_vector_Sl_Dali_Actor_Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorContainer_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;
  int arg2 ;
  Dali::Actor *arg3 = 0 ;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (Dali::Actor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor const & type is null", 0);
    return ;
  }
  {
    try {
      try {
        std_vector_Sl_Dali_Actor_Sg__setitem(arg1,arg2,(Dali::Actor const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorContainer_AddRange(void * jarg1, void * jarg2) {
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;
  std::vector< Dali::Actor > *arg2 = 0 ;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  arg2 = (std::vector< Dali::Actor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Dali::Actor > const & type is null", 0);
    return ;
  }
  {
    try {
      std_vector_Sl_Dali_Actor_Sg__AddRange(arg1,(std::vector< Dali::Actor > const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ActorContainer_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Dali::Actor > *result = 0 ;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  {
    try {
      try {
        result = (std::vector< Dali::Actor > *)std_vector_Sl_Dali_Actor_Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorContainer_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;
  int arg2 ;
  Dali::Actor *arg3 = 0 ;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (Dali::Actor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor const & type is null", 0);
    return ;
  }
  {
    try {
      try {
        std_vector_Sl_Dali_Actor_Sg__Insert(arg1,arg2,(Dali::Actor const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorContainer_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;
  int arg2 ;
  std::vector< Dali::Actor > *arg3 = 0 ;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (std::vector< Dali::Actor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Dali::Actor > const & type is null", 0);
    return ;
  }
  {
    try {
      try {
        std_vector_Sl_Dali_Actor_Sg__InsertRange(arg1,arg2,(std::vector< Dali::Actor > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorContainer_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;
  int arg2 ;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  arg2 = (int)jarg2;
  {
    try {
      try {
        std_vector_Sl_Dali_Actor_Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorContainer_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;
  int arg2 ;
  int arg3 ;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  {
    try {
      try {
        std_vector_Sl_Dali_Actor_Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_ActorContainer_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Dali::Actor *arg1 = 0 ;
  int arg2 ;
  std::vector< Dali::Actor > *result = 0 ;

  arg1 = (Dali::Actor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Actor const & type is null", 0);
    return 0;
  }
  arg2 = (int)jarg2;
  {
    try {
      try {
        result = (std::vector< Dali::Actor > *)std_vector_Sl_Dali_Actor_Sg__Repeat((Dali::Actor const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }

    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorContainer_Reverse__SWIG_0(void * jarg1) {
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  {
    try {
      std_vector_Sl_Dali_Actor_Sg__Reverse__SWIG_0(arg1);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorContainer_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;
  int arg2 ;
  int arg3 ;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  {
    try {
      try {
        std_vector_Sl_Dali_Actor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ActorContainer_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;
  int arg2 ;
  std::vector< Dali::Actor > *arg3 = 0 ;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (std::vector< Dali::Actor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Dali::Actor > const & type is null", 0);
    return ;
  }
  {
    try {
      try {
        std_vector_Sl_Dali_Actor_Sg__SetRange(arg1,arg2,(std::vector< Dali::Actor > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }

    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ActorContainer(void * jarg1) {
  std::vector< Dali::Actor > *arg1 = (std::vector< Dali::Actor > *) 0 ;

  arg1 = (std::vector< Dali::Actor > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_AccessibilityActionSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp_Dali_Toolkit_AccessibilityManager_SA__SP__Sg__Empty((Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_AccessibilityActionSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_bool_Sp_Dali_Toolkit_AccessibilityManager_SA__SP__Sg__GetConnectionCount((Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AccessibilityActionSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *) 0 ;
  bool (*arg2)(Dali::Toolkit::AccessibilityManager &) = (bool (*)(Dali::Toolkit::AccessibilityManager &)) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *)jarg1;
  arg2 = (bool (*)(Dali::Toolkit::AccessibilityManager &))jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp_Dali_Toolkit_AccessibilityManager_SA__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AccessibilityActionSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *) 0 ;
  bool (*arg2)(Dali::Toolkit::AccessibilityManager &) = (bool (*)(Dali::Toolkit::AccessibilityManager &)) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *)jarg1;
  arg2 = (bool (*)(Dali::Toolkit::AccessibilityManager &))jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp_Dali_Toolkit_AccessibilityManager_SA__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_AccessibilityActionSignal_Emit(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *) 0 ;
  Dali::Toolkit::AccessibilityManager *arg2 = 0 ;
  bool result;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *)jarg1;
  arg2 = (Dali::Toolkit::AccessibilityManager *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::AccessibilityManager & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp_Dali_Toolkit_AccessibilityManager_SA__SP__Sg__Emit(arg1,*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_AccessibilityActionSignal() {
  void * jresult ;
  Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *)new Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_AccessibilityActionSignal(void * jarg1) {
  Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::AccessibilityManager &) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_AccessibilityFocusOvershotSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Toolkit_AccessibilityManager_FocusOvershotDirection_SP__Sg__Empty((Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_AccessibilityFocusOvershotSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Toolkit_AccessibilityManager_FocusOvershotDirection_SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AccessibilityFocusOvershotSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *) 0 ;
  void (*arg2)(Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) = (void (*)(Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *)jarg1;
  arg2 = (void (*)(Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Toolkit_AccessibilityManager_FocusOvershotDirection_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AccessibilityFocusOvershotSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *) 0 ;
  void (*arg2)(Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) = (void (*)(Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *)jarg1;
  arg2 = (void (*)(Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Toolkit_AccessibilityManager_FocusOvershotDirection_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_AccessibilityFocusOvershotSignal_Emit(void * jarg1, void * jarg2, int jarg3) {
  Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *) 0 ;
  Dali::Actor arg2 ;
  Dali::Toolkit::AccessibilityManager::FocusOvershotDirection arg3 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (Dali::Toolkit::AccessibilityManager::FocusOvershotDirection)jarg3;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Toolkit_AccessibilityManager_FocusOvershotDirection_SP__Sg__Emit(arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_AccessibilityFocusOvershotSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *)new Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_AccessibilityFocusOvershotSignal(void * jarg1) {
  Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::Toolkit::AccessibilityManager::FocusOvershotDirection) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_FocusChangedSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Actor,Dali::Actor) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::Actor) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::Actor) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Actor_SP__Sg__Empty((Dali::Signal< void (Dali::Actor,Dali::Actor) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_FocusChangedSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Actor,Dali::Actor) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::Actor) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::Actor) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Actor_SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Actor,Dali::Actor) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_FocusChangedSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor,Dali::Actor) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::Actor) > *) 0 ;
  void (*arg2)(Dali::Actor,Dali::Actor) = (void (*)(Dali::Actor,Dali::Actor)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::Actor) > *)jarg1;
  arg2 = (void (*)(Dali::Actor,Dali::Actor))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Actor_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_FocusChangedSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor,Dali::Actor) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::Actor) > *) 0 ;
  void (*arg2)(Dali::Actor,Dali::Actor) = (void (*)(Dali::Actor,Dali::Actor)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::Actor) > *)jarg1;
  arg2 = (void (*)(Dali::Actor,Dali::Actor))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Actor_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_FocusChangedSignal_Emit(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Signal< void (Dali::Actor,Dali::Actor) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::Actor) > *) 0 ;
  Dali::Actor arg2 ;
  Dali::Actor arg3 ;
  Dali::Actor *argp2 ;
  Dali::Actor *argp3 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::Actor) > *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  argp3 = (Dali::Actor *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg3 = *argp3;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_Dali_Actor_SP__Sg__Emit(arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_FocusChangedSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Actor,Dali::Actor) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Actor,Dali::Actor) > *)new Dali::Signal< void (Dali::Actor,Dali::Actor) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_FocusChangedSignal(void * jarg1) {
  Dali::Signal< void (Dali::Actor,Dali::Actor) > *arg1 = (Dali::Signal< void (Dali::Actor,Dali::Actor) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,Dali::Actor) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_FocusGroupChangedSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Actor,bool) > *arg1 = (Dali::Signal< void (Dali::Actor,bool) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Actor,bool) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_SP__Sg__Empty((Dali::Signal< void (Dali::Actor,bool) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_FocusGroupChangedSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Actor,bool) > *arg1 = (Dali::Signal< void (Dali::Actor,bool) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Actor,bool) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Actor,bool) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_FocusGroupChangedSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor,bool) > *arg1 = (Dali::Signal< void (Dali::Actor,bool) > *) 0 ;
  void (*arg2)(Dali::Actor,bool) = (void (*)(Dali::Actor,bool)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,bool) > *)jarg1;
  arg2 = (void (*)(Dali::Actor,bool))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_FocusGroupChangedSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Actor,bool) > *arg1 = (Dali::Signal< void (Dali::Actor,bool) > *) 0 ;
  void (*arg2)(Dali::Actor,bool) = (void (*)(Dali::Actor,bool)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,bool) > *)jarg1;
  arg2 = (void (*)(Dali::Actor,bool))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_FocusGroupChangedSignal_Emit(void * jarg1, void * jarg2, bool jarg3) {
  Dali::Signal< void (Dali::Actor,bool) > *arg1 = (Dali::Signal< void (Dali::Actor,bool) > *) 0 ;
  Dali::Actor arg2 ;
  bool arg3 ;
  Dali::Actor *argp2 ;

  arg1 = (Dali::Signal< void (Dali::Actor,bool) > *)jarg1;
  argp2 = (Dali::Actor *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Actor", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = jarg3 ? true : false;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Actor_Sc_bool_SP__Sg__Emit(arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_FocusGroupChangedSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Actor,bool) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Actor,bool) > *)new Dali::Signal< void (Dali::Actor,bool) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_FocusGroupChangedSignal(void * jarg1) {
  Dali::Signal< void (Dali::Actor,bool) > *arg1 = (Dali::Signal< void (Dali::Actor,bool) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Actor,bool) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_StyleChangedSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *arg1 = (Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Toolkit_StyleManager_Sc_Dali_StyleChange_Type_SP__Sg__Empty((Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_StyleChangedSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *arg1 = (Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Toolkit_StyleManager_Sc_Dali_StyleChange_Type_SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_StyleChangedSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *arg1 = (Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *) 0 ;
  void (*arg2)(Dali::Toolkit::StyleManager,Dali::StyleChange::Type) = (void (*)(Dali::Toolkit::StyleManager,Dali::StyleChange::Type)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::StyleManager,Dali::StyleChange::Type))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_StyleManager_Sc_Dali_StyleChange_Type_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_StyleChangedSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *arg1 = (Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *) 0 ;
  void (*arg2)(Dali::Toolkit::StyleManager,Dali::StyleChange::Type) = (void (*)(Dali::Toolkit::StyleManager,Dali::StyleChange::Type)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::StyleManager,Dali::StyleChange::Type))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_StyleManager_Sc_Dali_StyleChange_Type_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_StyleChangedSignal_Emit(void * jarg1, void * jarg2, int jarg3) {
  Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *arg1 = (Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *) 0 ;
  Dali::Toolkit::StyleManager arg2 ;
  Dali::StyleChange::Type arg3 ;
  Dali::Toolkit::StyleManager *argp2 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *)jarg1;
  argp2 = (Dali::Toolkit::StyleManager *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::StyleManager", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (Dali::StyleChange::Type)jarg3;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_StyleManager_Sc_Dali_StyleChange_Type_SP__Sg__Emit(arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_StyleChangedSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *)new Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_StyleChangedSignal(void * jarg1) {
  Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *arg1 = (Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::StyleManager,Dali::StyleChange::Type) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ButtonSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< bool (Dali::Toolkit::Button) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Button) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Button) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Button_SP__Sg__Empty((Dali::Signal< bool (Dali::Toolkit::Button) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ButtonSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< bool (Dali::Toolkit::Button) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Button) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Button) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Button_SP__Sg__GetConnectionCount((Dali::Signal< bool (Dali::Toolkit::Button) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ButtonSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< bool (Dali::Toolkit::Button) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Button) > *) 0 ;
  bool (*arg2)(Dali::Toolkit::Button) = (bool (*)(Dali::Toolkit::Button)) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Button) > *)jarg1;
  arg2 = (bool (*)(Dali::Toolkit::Button))jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Button_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ButtonSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< bool (Dali::Toolkit::Button) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Button) > *) 0 ;
  bool (*arg2)(Dali::Toolkit::Button) = (bool (*)(Dali::Toolkit::Button)) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Button) > *)jarg1;
  arg2 = (bool (*)(Dali::Toolkit::Button))jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Button_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ButtonSignal_Emit(void * jarg1, void * jarg2) {
  bool jresult ;
  Dali::Signal< bool (Dali::Toolkit::Button) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Button) > *) 0 ;
  Dali::Toolkit::Button arg2 ;
  Dali::Toolkit::Button *argp2 ;
  bool result;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Button) > *)jarg1;
  argp2 = (Dali::Toolkit::Button *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::Button", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Button_SP__Sg__Emit(arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ButtonSignal() {
  void * jresult ;
  Dali::Signal< bool (Dali::Toolkit::Button) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< bool (Dali::Toolkit::Button) > *)new Dali::Signal< bool (Dali::Toolkit::Button) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ButtonSignal(void * jarg1) {
  Dali::Signal< bool (Dali::Toolkit::Button) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Button) > *) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Button) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_GaussianBlurViewSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *arg1 = (Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Toolkit_GaussianBlurView_SP__Sg__Empty((Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_GaussianBlurViewSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *arg1 = (Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Toolkit_GaussianBlurView_SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_GaussianBlurViewSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *arg1 = (Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *) 0 ;
  void (*arg2)(Dali::Toolkit::GaussianBlurView) = (void (*)(Dali::Toolkit::GaussianBlurView)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::GaussianBlurView))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_GaussianBlurView_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_GaussianBlurViewSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *arg1 = (Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *) 0 ;
  void (*arg2)(Dali::Toolkit::GaussianBlurView) = (void (*)(Dali::Toolkit::GaussianBlurView)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::GaussianBlurView))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_GaussianBlurView_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_GaussianBlurViewSignal_Emit(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *arg1 = (Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *) 0 ;
  Dali::Toolkit::GaussianBlurView arg2 ;
  Dali::Toolkit::GaussianBlurView *argp2 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *)jarg1;
  argp2 = (Dali::Toolkit::GaussianBlurView *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::GaussianBlurView", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_GaussianBlurView_SP__Sg__Emit(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_GaussianBlurViewSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *)new Dali::Signal< void (Dali::Toolkit::GaussianBlurView) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_GaussianBlurViewSignal(void * jarg1) {
  Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *arg1 = (Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::GaussianBlurView) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_PageTurnSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_Sc_unsigned_SS_int_Sc_bool_SP__Sg__Empty((Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_PageTurnSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_Sc_unsigned_SS_int_Sc_bool_SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PageTurnSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *) 0 ;
  void (*arg2)(Dali::Toolkit::PageTurnView,unsigned int,bool) = (void (*)(Dali::Toolkit::PageTurnView,unsigned int,bool)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::PageTurnView,unsigned int,bool))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_Sc_unsigned_SS_int_Sc_bool_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PageTurnSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *) 0 ;
  void (*arg2)(Dali::Toolkit::PageTurnView,unsigned int,bool) = (void (*)(Dali::Toolkit::PageTurnView,unsigned int,bool)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::PageTurnView,unsigned int,bool))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_Sc_unsigned_SS_int_Sc_bool_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PageTurnSignal_Emit(void * jarg1, void * jarg2, unsigned int jarg3, bool jarg4) {
  Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *) 0 ;
  Dali::Toolkit::PageTurnView arg2 ;
  unsigned int arg3 ;
  bool arg4 ;
  Dali::Toolkit::PageTurnView *argp2 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *)jarg1;
  argp2 = (Dali::Toolkit::PageTurnView *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::PageTurnView", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (unsigned int)jarg3;
  arg4 = jarg4 ? true : false;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_Sc_unsigned_SS_int_Sc_bool_SP__Sg__Emit(arg1,arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PageTurnSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *)new Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PageTurnSignal(void * jarg1) {
  Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView,unsigned int,bool) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_PagePanSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Toolkit::PageTurnView) > *arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_SP__Sg__Empty((Dali::Signal< void (Dali::Toolkit::PageTurnView) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_PagePanSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Toolkit::PageTurnView) > *arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Toolkit::PageTurnView) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PagePanSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::PageTurnView) > *arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView) > *) 0 ;
  void (*arg2)(Dali::Toolkit::PageTurnView) = (void (*)(Dali::Toolkit::PageTurnView)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::PageTurnView))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PagePanSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::PageTurnView) > *arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView) > *) 0 ;
  void (*arg2)(Dali::Toolkit::PageTurnView) = (void (*)(Dali::Toolkit::PageTurnView)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::PageTurnView))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PagePanSignal_Emit(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::PageTurnView) > *arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView) > *) 0 ;
  Dali::Toolkit::PageTurnView arg2 ;
  Dali::Toolkit::PageTurnView *argp2 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView) > *)jarg1;
  argp2 = (Dali::Toolkit::PageTurnView *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::PageTurnView", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_PageTurnView_SP__Sg__Emit(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PagePanSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Toolkit::PageTurnView) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Toolkit::PageTurnView) > *)new Dali::Signal< void (Dali::Toolkit::PageTurnView) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PagePanSignal(void * jarg1) {
  Dali::Signal< void (Dali::Toolkit::PageTurnView) > *arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::PageTurnView) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ProgressBarValueChangedSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *arg1 = (Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Toolkit_ProgressBar_Sc_float_Sc_float_SP__Sg__Empty((Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ProgressBarValueChangedSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *arg1 = (Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Toolkit_ProgressBar_Sc_float_Sc_float_SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ProgressBarValueChangedSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *arg1 = (Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *) 0 ;
  void (*arg2)(Dali::Toolkit::ProgressBar,float,float) = (void (*)(Dali::Toolkit::ProgressBar,float,float)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::ProgressBar,float,float))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_ProgressBar_Sc_float_Sc_float_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ProgressBarValueChangedSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *arg1 = (Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *) 0 ;
  void (*arg2)(Dali::Toolkit::ProgressBar,float,float) = (void (*)(Dali::Toolkit::ProgressBar,float,float)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::ProgressBar,float,float))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_ProgressBar_Sc_float_Sc_float_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ProgressBarValueChangedSignal_Emit(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *arg1 = (Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *) 0 ;
  Dali::Toolkit::ProgressBar arg2 ;
  float arg3 ;
  float arg4 ;
  Dali::Toolkit::ProgressBar *argp2 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *)jarg1;
  argp2 = (Dali::Toolkit::ProgressBar *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::ProgressBar", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_ProgressBar_Sc_float_Sc_float_SP__Sg__Emit(arg1,arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ProgressBarValueChangedSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *)new Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ProgressBarValueChangedSignal(void * jarg1) {
  Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *arg1 = (Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::ProgressBar,float,float) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ScrollViewSnapStartedSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *arg1 = (Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Toolkit_ScrollView_SnapEvent_SS_const_SA__SP__Sg__Empty((Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ScrollViewSnapStartedSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *arg1 = (Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Toolkit_ScrollView_SnapEvent_SS_const_SA__SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollViewSnapStartedSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *arg1 = (Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *) 0 ;
  void (*arg2)(Dali::Toolkit::ScrollView::SnapEvent const &) = (void (*)(Dali::Toolkit::ScrollView::SnapEvent const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::ScrollView::SnapEvent const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_ScrollView_SnapEvent_SS_const_SA__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollViewSnapStartedSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *arg1 = (Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *) 0 ;
  void (*arg2)(Dali::Toolkit::ScrollView::SnapEvent const &) = (void (*)(Dali::Toolkit::ScrollView::SnapEvent const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::ScrollView::SnapEvent const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_ScrollView_SnapEvent_SS_const_SA__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollViewSnapStartedSignal_Emit(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *arg1 = (Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *) 0 ;
  Dali::Toolkit::ScrollView::SnapEvent *arg2 = 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *)jarg1;
  arg2 = (Dali::Toolkit::ScrollView::SnapEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ScrollView::SnapEvent const & type is null", 0);
    return ;
  }
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_ScrollView_SnapEvent_SS_const_SA__SP__Sg__Emit(arg1,(Dali::Toolkit::ScrollView::SnapEvent const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ScrollViewSnapStartedSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *)new Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ScrollViewSnapStartedSignal(void * jarg1) {
  Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *arg1 = (Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::ScrollView::SnapEvent const &) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ScrollableSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Vector2 const &) > *arg1 = (Dali::Signal< void (Dali::Vector2 const &) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Vector2 const &) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Vector2_SS_const_SA__SP__Sg__Empty((Dali::Signal< void (Dali::Vector2 const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ScrollableSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Vector2 const &) > *arg1 = (Dali::Signal< void (Dali::Vector2 const &) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Vector2 const &) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Vector2_SS_const_SA__SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Vector2 const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollableSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Vector2 const &) > *arg1 = (Dali::Signal< void (Dali::Vector2 const &) > *) 0 ;
  void (*arg2)(Dali::Vector2 const &) = (void (*)(Dali::Vector2 const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Vector2 const &) > *)jarg1;
  arg2 = (void (*)(Dali::Vector2 const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Vector2_SS_const_SA__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollableSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Vector2 const &) > *arg1 = (Dali::Signal< void (Dali::Vector2 const &) > *) 0 ;
  void (*arg2)(Dali::Vector2 const &) = (void (*)(Dali::Vector2 const &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Vector2 const &) > *)jarg1;
  arg2 = (void (*)(Dali::Vector2 const &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Vector2_SS_const_SA__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ScrollableSignal_Emit(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Vector2 const &) > *arg1 = (Dali::Signal< void (Dali::Vector2 const &) > *) 0 ;
  Dali::Vector2 *arg2 = 0 ;

  arg1 = (Dali::Signal< void (Dali::Vector2 const &) > *)jarg1;
  arg2 = (Dali::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Vector2 const & type is null", 0);
    return ;
  }
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Vector2_SS_const_SA__SP__Sg__Emit(arg1,(Dali::Vector2 const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ScrollableSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Vector2 const &) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Vector2 const &) > *)new Dali::Signal< void (Dali::Vector2 const &) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ScrollableSignal(void * jarg1) {
  Dali::Signal< void (Dali::Vector2 const &) > *arg1 = (Dali::Signal< void (Dali::Vector2 const &) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Vector2 const &) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}



SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ControlKeySignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Control_Sc_Dali_KeyEvent_SS_const_SA__SP__Sg__Empty((Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ControlKeySignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Control_Sc_Dali_KeyEvent_SS_const_SA__SP__Sg__GetConnectionCount((Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ControlKeySignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *) 0 ;
  bool (*arg2)(Dali::Toolkit::Control,Dali::KeyEvent const &) = (bool (*)(Dali::Toolkit::Control,Dali::KeyEvent const &)) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *)jarg1;
  arg2 = (bool (*)(Dali::Toolkit::Control,Dali::KeyEvent const &))jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Control_Sc_Dali_KeyEvent_SS_const_SA__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ControlKeySignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *) 0 ;
  bool (*arg2)(Dali::Toolkit::Control,Dali::KeyEvent const &) = (bool (*)(Dali::Toolkit::Control,Dali::KeyEvent const &)) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *)jarg1;
  arg2 = (bool (*)(Dali::Toolkit::Control,Dali::KeyEvent const &))jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Control_Sc_Dali_KeyEvent_SS_const_SA__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ControlKeySignal_Emit(void * jarg1, void * jarg2, void * jarg3) {
  bool jresult ;
  Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *) 0 ;
  Dali::Toolkit::Control arg2 ;
  Dali::KeyEvent *arg3 = 0 ;
  Dali::Toolkit::Control *argp2 ;
  bool result;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *)jarg1;
  argp2 = (Dali::Toolkit::Control *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::Control", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::KeyEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::KeyEvent const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Control_Sc_Dali_KeyEvent_SS_const_SA__SP__Sg__Emit(arg1,arg2,(Dali::KeyEvent const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ControlKeySignal() {
  void * jresult ;
  Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *)new Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ControlKeySignal(void * jarg1) {
  Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Control,Dali::KeyEvent const &) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_KeyInputFocusSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Toolkit::Control) > *arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Toolkit_Control_SP__Sg__Empty((Dali::Signal< void (Dali::Toolkit::Control) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_KeyInputFocusSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Toolkit::Control) > *arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Toolkit_Control_SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Toolkit::Control) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_KeyInputFocusSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::Control) > *arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *) 0 ;
  void (*arg2)(Dali::Toolkit::Control) = (void (*)(Dali::Toolkit::Control)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::Control))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_Control_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_KeyInputFocusSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::Control) > *arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *) 0 ;
  void (*arg2)(Dali::Toolkit::Control) = (void (*)(Dali::Toolkit::Control)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::Control))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_Control_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_KeyInputFocusSignal_Emit(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::Control) > *arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *) 0 ;
  Dali::Toolkit::Control arg2 ;
  Dali::Toolkit::Control *argp2 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *)jarg1;
  argp2 = (Dali::Toolkit::Control *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::Control", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_Control_SP__Sg__Emit(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_KeyInputFocusSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Toolkit::Control) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Toolkit::Control) > *)new Dali::Signal< void (Dali::Toolkit::Control) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_KeyInputFocusSignal(void * jarg1) {
  Dali::Signal< void (Dali::Toolkit::Control) > *arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_VideoViewSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Toolkit::VideoView &) > *arg1 = (Dali::Signal< void (Dali::Toolkit::VideoView &) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::VideoView &) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Toolkit_VideoView_SA__SP__Sg__Empty((Dali::Signal< void (Dali::Toolkit::VideoView &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_VideoViewSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Toolkit::VideoView &) > *arg1 = (Dali::Signal< void (Dali::Toolkit::VideoView &) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::VideoView &) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Toolkit_VideoView_SA__SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Toolkit::VideoView &) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VideoViewSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::VideoView &) > *arg1 = (Dali::Signal< void (Dali::Toolkit::VideoView &) > *) 0 ;
  void (*arg2)(Dali::Toolkit::VideoView &) = (void (*)(Dali::Toolkit::VideoView &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::VideoView &) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::VideoView &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_VideoView_SA__SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VideoViewSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::VideoView &) > *arg1 = (Dali::Signal< void (Dali::Toolkit::VideoView &) > *) 0 ;
  void (*arg2)(Dali::Toolkit::VideoView &) = (void (*)(Dali::Toolkit::VideoView &)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::VideoView &) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::VideoView &))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_VideoView_SA__SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_VideoViewSignal_Emit(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::VideoView &) > *arg1 = (Dali::Signal< void (Dali::Toolkit::VideoView &) > *) 0 ;
  Dali::Toolkit::VideoView *arg2 = 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::VideoView &) > *)jarg1;
  arg2 = (Dali::Toolkit::VideoView *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::VideoView & type is null", 0);
    return ;
  }
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_VideoView_SA__SP__Sg__Emit(arg1,*arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_VideoViewSignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Toolkit::VideoView &) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Toolkit::VideoView &) > *)new Dali::Signal< void (Dali::Toolkit::VideoView &) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_VideoViewSignal(void * jarg1) {
  Dali::Signal< void (Dali::Toolkit::VideoView &) > *arg1 = (Dali::Signal< void (Dali::Toolkit::VideoView &) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::VideoView &) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_SliderValueChangedSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< bool (Dali::Toolkit::Slider,float) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,float) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,float) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_float_SP__Sg__Empty((Dali::Signal< bool (Dali::Toolkit::Slider,float) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_SliderValueChangedSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< bool (Dali::Toolkit::Slider,float) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,float) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,float) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_float_SP__Sg__GetConnectionCount((Dali::Signal< bool (Dali::Toolkit::Slider,float) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_SliderValueChangedSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< bool (Dali::Toolkit::Slider,float) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,float) > *) 0 ;
  bool (*arg2)(Dali::Toolkit::Slider,float) = (bool (*)(Dali::Toolkit::Slider,float)) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,float) > *)jarg1;
  arg2 = (bool (*)(Dali::Toolkit::Slider,float))jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_float_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_SliderValueChangedSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< bool (Dali::Toolkit::Slider,float) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,float) > *) 0 ;
  bool (*arg2)(Dali::Toolkit::Slider,float) = (bool (*)(Dali::Toolkit::Slider,float)) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,float) > *)jarg1;
  arg2 = (bool (*)(Dali::Toolkit::Slider,float))jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_float_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_SliderValueChangedSignal_Emit(void * jarg1, void * jarg2, float jarg3) {
  bool jresult ;
  Dali::Signal< bool (Dali::Toolkit::Slider,float) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,float) > *) 0 ;
  Dali::Toolkit::Slider arg2 ;
  float arg3 ;
  Dali::Toolkit::Slider *argp2 ;
  bool result;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,float) > *)jarg1;
  argp2 = (Dali::Toolkit::Slider *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::Slider", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (float)jarg3;
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_float_SP__Sg__Emit(arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_SliderValueChangedSignal() {
  void * jresult ;
  Dali::Signal< bool (Dali::Toolkit::Slider,float) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< bool (Dali::Toolkit::Slider,float) > *)new Dali::Signal< bool (Dali::Toolkit::Slider,float) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_SliderValueChangedSignal(void * jarg1) {
  Dali::Signal< bool (Dali::Toolkit::Slider,float) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,float) > *) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,float) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_SliderMarkReachedSignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< bool (Dali::Toolkit::Slider,int) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,int) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,int) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_int_SP__Sg__Empty((Dali::Signal< bool (Dali::Toolkit::Slider,int) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_SliderMarkReachedSignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< bool (Dali::Toolkit::Slider,int) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,int) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,int) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_int_SP__Sg__GetConnectionCount((Dali::Signal< bool (Dali::Toolkit::Slider,int) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_SliderMarkReachedSignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< bool (Dali::Toolkit::Slider,int) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,int) > *) 0 ;
  bool (*arg2)(Dali::Toolkit::Slider,int) = (bool (*)(Dali::Toolkit::Slider,int)) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,int) > *)jarg1;
  arg2 = (bool (*)(Dali::Toolkit::Slider,int))jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_int_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_SliderMarkReachedSignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< bool (Dali::Toolkit::Slider,int) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,int) > *) 0 ;
  bool (*arg2)(Dali::Toolkit::Slider,int) = (bool (*)(Dali::Toolkit::Slider,int)) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,int) > *)jarg1;
  arg2 = (bool (*)(Dali::Toolkit::Slider,int))jarg2;
  {
    try {
      Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_int_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_SliderMarkReachedSignal_Emit(void * jarg1, void * jarg2, int jarg3) {
  bool jresult ;
  Dali::Signal< bool (Dali::Toolkit::Slider,int) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,int) > *) 0 ;
  Dali::Toolkit::Slider arg2 ;
  int arg3 ;
  Dali::Toolkit::Slider *argp2 ;
  bool result;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,int) > *)jarg1;
  argp2 = (Dali::Toolkit::Slider *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::Slider", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (int)jarg3;
  {
    try {
      result = (bool)Dali_Signal_Sl_bool_Sp_Dali_Toolkit_Slider_Sc_int_SP__Sg__Emit(arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_SliderMarkReachedSignal() {
  void * jresult ;
  Dali::Signal< bool (Dali::Toolkit::Slider,int) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< bool (Dali::Toolkit::Slider,int) > *)new Dali::Signal< bool (Dali::Toolkit::Slider,int) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_SliderMarkReachedSignal(void * jarg1) {
  Dali::Signal< bool (Dali::Toolkit::Slider,int) > *arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,int) > *) 0 ;

  arg1 = (Dali::Signal< bool (Dali::Toolkit::Slider,int) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_RulerPtr__SWIG_0() {
  void * jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *result = 0 ;

  {
    try {
      result = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)new Dali::IntrusivePtr< Dali::Toolkit::Ruler >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_RulerPtr__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Toolkit::Ruler *arg1 = (Dali::Toolkit::Ruler *) 0 ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *result = 0 ;

  arg1 = (Dali::Toolkit::Ruler *)jarg1;
  {
    try {
      result = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)new Dali::IntrusivePtr< Dali::Toolkit::Ruler >(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_RulerPtr__SWIG_2(void * jarg1) {
  void * jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = 0 ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *result = 0 ;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::IntrusivePtr< Dali::Toolkit::Ruler > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)new Dali::IntrusivePtr< Dali::Toolkit::Ruler >((Dali::IntrusivePtr< Dali::Toolkit::Ruler > const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_RulerPtr(void * jarg1) {
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RulerPtr_Get(void * jarg1) {
  void * jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  Dali::Toolkit::Ruler *result = 0 ;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Ruler *)((Dali::IntrusivePtr< Dali::Toolkit::Ruler > const *)arg1)->Get();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RulerPtr___deref__(void * jarg1) {
  void * jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  Dali::Toolkit::Ruler *result = 0 ;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Ruler *)((Dali::IntrusivePtr< Dali::Toolkit::Ruler > const *)arg1)->operator ->();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RulerPtr___ref__(void * jarg1) {
  void * jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  Dali::Toolkit::Ruler *result = 0 ;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Ruler *) &((Dali::IntrusivePtr< Dali::Toolkit::Ruler > const *)arg1)->operator *();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RulerPtr_Assign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg2 = 0 ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *result = 0 ;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  arg2 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::IntrusivePtr< Dali::Toolkit::Ruler > const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) &(arg1)->operator =((Dali::IntrusivePtr< Dali::Toolkit::Ruler > const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RulerPtr_Assign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  Dali::Toolkit::Ruler *arg2 = (Dali::Toolkit::Ruler *) 0 ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *result = 0 ;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  arg2 = (Dali::Toolkit::Ruler *)jarg2;
  {
    try {
      result = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) &(arg1)->operator =(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RulerPtr_Reset__SWIG_0(void * jarg1) {
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  {
    try {
      (arg1)->Reset();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RulerPtr_Reset__SWIG_1(void * jarg1, void * jarg2) {
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  Dali::Toolkit::Ruler *arg2 = (Dali::Toolkit::Ruler *) 0 ;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  arg2 = (Dali::Toolkit::Ruler *)jarg2;
  {
    try {
      (arg1)->Reset(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RulerPtr_Detach(void * jarg1) {
  void * jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  Dali::Toolkit::Ruler *result = 0 ;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Ruler *)(arg1)->Detach();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerPtr_Snap__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  float jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      result = (float)(*arg1)->Snap(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerPtr_Snap__SWIG_1(void * jarg1, float jarg2) {
  float jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  float arg2 ;
  float result;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (float)(*arg1)->Snap(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerPtr_GetPositionFromPage(void * jarg1, unsigned int jarg2, unsigned int * jarg3, bool jarg4) {
  float jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = 0 ;
  bool arg4 ;
  float result;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (unsigned int *)jarg3;
  arg4 = jarg4 ? true : false;
  {
    try {
      result = (float)(*arg1)->GetPositionFromPage(arg2,*arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_RulerPtr_GetPageFromPosition(void * jarg1, float jarg2, bool jarg3) {
  unsigned int jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  float arg2 ;
  bool arg3 ;
  unsigned int result;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  arg2 = (float)jarg2;
  arg3 = jarg3 ? true : false;
  {
    try {
      result = (unsigned int)(*arg1)->GetPageFromPosition(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_RulerPtr_GetTotalPages(void * jarg1) {
  unsigned int jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  unsigned int result;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  {
    try {
      result = (unsigned int)(*arg1)->GetTotalPages();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_RulerPtr_GetType(void * jarg1) {
  int jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  Dali::Toolkit::Ruler::RulerType result;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  {
    try {
      result = (Dali::Toolkit::Ruler::RulerType)(*arg1)->GetType();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (int)result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_RulerPtr_IsEnabled(void * jarg1) {
  bool jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  bool result;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  {
    try {
      result = (bool)(*arg1)->IsEnabled();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RulerPtr_Enable(void * jarg1) {
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  {
    try {
      (*arg1)->Enable();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RulerPtr_Disable(void * jarg1) {
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  {
    try {
      (*arg1)->Disable();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RulerPtr_SetDomain(void * jarg1, void * jarg2) {
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  SwigValueWrapper< Dali::Toolkit::RulerDomain > arg2 ;
  Dali::Toolkit::RulerDomain *argp2 ;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  argp2 = (Dali::Toolkit::RulerDomain *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::RulerDomain", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (*arg1)->SetDomain(arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_RulerPtr_GetDomain(void * jarg1) {
  void * jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  Dali::Toolkit::RulerDomain *result = 0 ;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  {
    try {
      result = (Dali::Toolkit::RulerDomain *) &(*arg1)->GetDomain();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RulerPtr_DisableDomain(void * jarg1) {
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  {
    try {
      (*arg1)->DisableDomain();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerPtr_Clamp__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  {
    try {
      result = (float)(*arg1)->Clamp(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerPtr_Clamp__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  float jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      result = (float)(*arg1)->Clamp(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerPtr_Clamp__SWIG_2(void * jarg1, float jarg2) {
  float jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  float arg2 ;
  float result;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (float)(*arg1)->Clamp(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerPtr_Clamp__SWIG_3(void * jarg1, float jarg2, float jarg3, float jarg4, void * jarg5) {
  float jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Dali::Toolkit::ClampState *arg5 = 0 ;
  float result;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (Dali::Toolkit::ClampState *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ClampState & type is null", 0);
    return 0;
  }
  {
    try {
      result = (float)(*arg1)->Clamp(arg2,arg3,arg4,*arg5);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerPtr_SnapAndClamp__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  float jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float result;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  {
    try {
      result = (float)(*arg1)->SnapAndClamp(arg2,arg3,arg4,arg5);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerPtr_SnapAndClamp__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  {
    try {
      result = (float)(*arg1)->SnapAndClamp(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerPtr_SnapAndClamp__SWIG_2(void * jarg1, float jarg2, float jarg3) {
  float jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  {
    try {
      result = (float)(*arg1)->SnapAndClamp(arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerPtr_SnapAndClamp__SWIG_3(void * jarg1, float jarg2) {
  float jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  float arg2 ;
  float result;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      result = (float)(*arg1)->SnapAndClamp(arg2);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Dali_RulerPtr_SnapAndClamp__SWIG_4(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, void * jarg6) {
  float jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Dali::Toolkit::ClampState *arg6 = 0 ;
  float result;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (Dali::Toolkit::ClampState *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Toolkit::ClampState & type is null", 0);
    return 0;
  }
  {
    try {
      result = (float)(*arg1)->SnapAndClamp(arg2,arg3,arg4,arg5,*arg6);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RulerPtr_Reference(void * jarg1) {
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  {
    try {
      (*arg1)->Reference();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_RulerPtr_Unreference(void * jarg1) {
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  {
    try {
      (*arg1)->Unreference();
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_RulerPtr_ReferenceCount(void * jarg1) {
  int jresult ;
  Dali::IntrusivePtr< Dali::Toolkit::Ruler > *arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *) 0 ;
  int result;

  arg1 = (Dali::IntrusivePtr< Dali::Toolkit::Ruler > *)jarg1;
  {
    try {
      result = (int)(*arg1)->ReferenceCount();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_ViewResourceReadySignal_Empty(void * jarg1) {
  bool jresult ;
  Dali::Signal< void (Dali::Toolkit::Control) > *arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *) 0 ;
  bool result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *)jarg1;
  {
    try {
      result = (bool)Dali_Signal_Sl_void_Sp_Dali_Toolkit_Control_SP__Sg__Empty((Dali::Signal< void (Dali::Toolkit::Control) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Dali_ViewResourceReadySignal_GetConnectionCount(void * jarg1) {
  unsigned long jresult ;
  Dali::Signal< void (Dali::Toolkit::Control) > *arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *) 0 ;
  std::size_t result;

  arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *)jarg1;
  {
    try {
      result = Dali_Signal_Sl_void_Sp_Dali_Toolkit_Control_SP__Sg__GetConnectionCount((Dali::Signal< void (Dali::Toolkit::Control) > const *)arg1);
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewResourceReadySignal_Connect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::Control) > *arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *) 0 ;
  void (*arg2)(Dali::Toolkit::Control) = (void (*)(Dali::Toolkit::Control)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::Control))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_Control_SP__Sg__Connect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewResourceReadySignal_Disconnect(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::Control) > *arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *) 0 ;
  void (*arg2)(Dali::Toolkit::Control) = (void (*)(Dali::Toolkit::Control)) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *)jarg1;
  arg2 = (void (*)(Dali::Toolkit::Control))jarg2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_Control_SP__Sg__Disconnect(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_ViewResourceReadySignal_Emit(void * jarg1, void * jarg2) {
  Dali::Signal< void (Dali::Toolkit::Control) > *arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *) 0 ;
  Dali::Toolkit::Control arg2 ;
  Dali::Toolkit::Control *argp2 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *)jarg1;
  argp2 = (Dali::Toolkit::Control *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Toolkit::Control", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      Dali_Signal_Sl_void_Sp_Dali_Toolkit_Control_SP__Sg__Emit(arg1,arg2);
    } CALL_CATCH_EXCEPTION();
  }

}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_ViewResourceReadySignal() {
  void * jresult ;
  Dali::Signal< void (Dali::Toolkit::Control) > *result = 0 ;

  {
    try {
      result = (Dali::Signal< void (Dali::Toolkit::Control) > *)new Dali::Signal< void (Dali::Toolkit::Control) >();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ViewResourceReadySignal(void * jarg1) {
  Dali::Signal< void (Dali::Toolkit::Control) > *arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *) 0 ;

  arg1 = (Dali::Signal< void (Dali::Toolkit::Control) > *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }

}

SWIGEXPORT Dali::RefObject * SWIGSTDCALL CSharp_Dali_GetRefObjectPtr(Dali::BaseHandle *arg1) {
  Dali::RefObject *result = NULL;

  if (arg1)
  {
    result = (Dali::RefObject *)((Dali::BaseHandle const *)arg1)->GetObjectPtr();
  }
  return result;
}

SWIGEXPORT Dali::RefObject * SWIGSTDCALL CSharp_Dali_BaseObject_SWIGUpcast(Dali::BaseObject *jarg1) {
    return (Dali::RefObject *)jarg1;
}

SWIGEXPORT Dali::SignalObserver * SWIGSTDCALL CSharp_Dali_ConnectionTrackerInterface_SWIGUpcast(Dali::ConnectionTrackerInterface *jarg1) {
    return (Dali::SignalObserver *)jarg1;
}

SWIGEXPORT Dali::ConnectionTrackerInterface * SWIGSTDCALL CSharp_Dali_ConnectionTracker_SWIGUpcast(Dali::ConnectionTracker *jarg1) {
    return (Dali::ConnectionTrackerInterface *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_ObjectRegistry_SWIGUpcast(Dali::ObjectRegistry *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_PropertyCondition_SWIGUpcast(Dali::PropertyCondition *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_PropertyNotification_SWIGUpcast(Dali::PropertyNotification *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_Handle_SWIGUpcast(Dali::Handle *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_TypeInfo_SWIGUpcast(Dali::TypeInfo *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_TypeRegistry_SWIGUpcast(Dali::TypeRegistry *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_PixelData_SWIGUpcast(Dali::PixelData *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_Texture_SWIGUpcast(Dali::Texture *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_Sampler_SWIGUpcast(Dali::Sampler *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_TextureSet_SWIGUpcast(Dali::TextureSet *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_VertexBuffer_SWIGUpcast(Dali::VertexBuffer *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_Geometry_SWIGUpcast(Dali::Geometry *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::Handle * SWIGSTDCALL CSharp_Dali_Shader_SWIGUpcast(Dali::Shader *jarg1) {
    return (Dali::Handle *)jarg1;
}

SWIGEXPORT Dali::Handle * SWIGSTDCALL CSharp_Dali_Renderer_SWIGUpcast(Dali::Renderer *jarg1) {
    return (Dali::Handle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_FrameBuffer_SWIGUpcast(Dali::FrameBuffer *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_RenderTaskList_SWIGUpcast(Dali::RenderTaskList *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::Handle * SWIGSTDCALL CSharp_Dali_RenderTask_SWIGUpcast(Dali::RenderTask *jarg1) {
    return (Dali::Handle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_Touch_SWIGUpcast(Dali::TouchEvent *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_Hover_SWIGUpcast(Dali::HoverEvent *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_Wheel_SWIGUpcast(Dali::WheelEvent *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_Key_SWIGUpcast(Dali::KeyEvent *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_Gesture_SWIGUpcast(Dali::Gesture *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::Handle * SWIGSTDCALL CSharp_Dali_GestureDetector_SWIGUpcast(Dali::GestureDetector *jarg1) {
    return (Dali::Handle *)jarg1;
}

SWIGEXPORT Dali::GestureDetector * SWIGSTDCALL CSharp_Dali_LongPressGestureDetector_SWIGUpcast(Dali::LongPressGestureDetector *jarg1) {
    return (Dali::GestureDetector *)jarg1;
}

SWIGEXPORT Dali::Gesture * SWIGSTDCALL CSharp_Dali_LongPressGesture_SWIGUpcast(Dali::LongPressGesture *jarg1) {
    return (Dali::Gesture *)jarg1;
}

SWIGEXPORT Dali::Handle * SWIGSTDCALL CSharp_Dali_Actor_SWIGUpcast(Dali::Actor *jarg1) {
    return (Dali::Handle *)jarg1;
}

SWIGEXPORT Dali::Actor * SWIGSTDCALL CSharp_Dali_Layer_SWIGUpcast(Dali::Layer *jarg1) {
    return (Dali::Actor *)jarg1;
}

SWIGEXPORT Dali::RefObject * SWIGSTDCALL CSharp_Dali_CustomActorImpl_SWIGUpcast(Dali::CustomActorImpl *jarg1) {
    return (Dali::RefObject *)jarg1;
}

SWIGEXPORT Dali::Actor * SWIGSTDCALL CSharp_Dali_CustomActor_SWIGUpcast(Dali::CustomActor *jarg1) {
    return (Dali::Actor *)jarg1;
}

SWIGEXPORT Dali::GestureDetector * SWIGSTDCALL CSharp_Dali_PanGestureDetector_SWIGUpcast(Dali::PanGestureDetector *jarg1) {
    return (Dali::GestureDetector *)jarg1;
}

SWIGEXPORT Dali::Gesture * SWIGSTDCALL CSharp_Dali_PanGesture_SWIGUpcast(Dali::PanGesture *jarg1) {
    return (Dali::Gesture *)jarg1;
}

SWIGEXPORT Dali::GestureDetector * SWIGSTDCALL CSharp_Dali_PinchGestureDetector_SWIGUpcast(Dali::PinchGestureDetector *jarg1) {
    return (Dali::GestureDetector *)jarg1;
}

SWIGEXPORT Dali::Gesture * SWIGSTDCALL CSharp_Dali_PinchGesture_SWIGUpcast(Dali::PinchGesture *jarg1) {
    return (Dali::Gesture *)jarg1;
}

SWIGEXPORT Dali::GestureDetector * SWIGSTDCALL CSharp_Dali_TapGestureDetector_SWIGUpcast(Dali::TapGestureDetector *jarg1) {
    return (Dali::GestureDetector *)jarg1;
}

SWIGEXPORT Dali::Gesture * SWIGSTDCALL CSharp_Dali_TapGesture_SWIGUpcast(Dali::TapGesture *jarg1) {
    return (Dali::Gesture *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_KeyFrames_SWIGUpcast(Dali::KeyFrames *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::Handle * SWIGSTDCALL CSharp_Dali_Path_SWIGUpcast(Dali::Path *jarg1) {
    return (Dali::Handle *)jarg1;
}

SWIGEXPORT Dali::Handle * SWIGSTDCALL CSharp_Dali_LinearConstrainer_SWIGUpcast(Dali::LinearConstrainer *jarg1) {
    return (Dali::Handle *)jarg1;
}

SWIGEXPORT Dali::Handle * SWIGSTDCALL CSharp_Dali_PathConstrainer_SWIGUpcast(Dali::PathConstrainer *jarg1) {
    return (Dali::Handle *)jarg1;
}

SWIGEXPORT Dali::RefObject * SWIGSTDCALL CSharp_Dali_NativeImageInterface_SWIGUpcast(Dali::NativeImageInterface *jarg1) {
    return (Dali::RefObject *)jarg1;
}

SWIGEXPORT Dali::Actor * SWIGSTDCALL CSharp_Dali_CameraActor_SWIGUpcast(Dali::CameraActor *jarg1) {
    return (Dali::Actor *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_Timer_SWIGUpcast(Dali::Timer *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_Builder_SWIGUpcast(Dali::Toolkit::Builder *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_TransitionData_SWIGUpcast(Dali::Toolkit::TransitionData *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::CustomActorImpl * SWIGSTDCALL CSharp_Dali_ViewImpl_SWIGUpcast(Dali::Toolkit::Internal::Control *jarg1) {
    return (Dali::CustomActorImpl *)jarg1;
}

SWIGEXPORT Dali::CustomActor * SWIGSTDCALL CSharp_Dali_View_SWIGUpcast(Dali::Toolkit::Control *jarg1) {
    return (Dali::CustomActor *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_KeyInputFocusManager_SWIGUpcast(Dali::Toolkit::KeyInputFocusManager *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Control * SWIGSTDCALL CSharp_Dali_Alignment_SWIGUpcast(Dali::Toolkit::Alignment *jarg1) {
    return (Dali::Toolkit::Control *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Control * SWIGSTDCALL CSharp_Dali_Button_SWIGUpcast(Dali::Toolkit::Button *jarg1) {
    return (Dali::Toolkit::Control *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Button * SWIGSTDCALL CSharp_Dali_CheckBoxButton_SWIGUpcast(Dali::Toolkit::CheckBoxButton *jarg1) {
    return (Dali::Toolkit::Button *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Button * SWIGSTDCALL CSharp_Dali_PushButton_SWIGUpcast(Dali::Toolkit::PushButton *jarg1) {
    return (Dali::Toolkit::Button *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Button * SWIGSTDCALL CSharp_Dali_RadioButton_SWIGUpcast(Dali::Toolkit::RadioButton *jarg1) {
    return (Dali::Toolkit::Button *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Control * SWIGSTDCALL CSharp_Dali_FlexContainer_SWIGUpcast(Dali::Toolkit::FlexContainer *jarg1) {
    return (Dali::Toolkit::Control *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Control * SWIGSTDCALL CSharp_Dali_ImageView_SWIGUpcast(Dali::Toolkit::ImageView *jarg1) {
    return (Dali::Toolkit::Control *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Control * SWIGSTDCALL CSharp_Dali_Model3dView_SWIGUpcast(Dali::Toolkit::Model3dView *jarg1) {
    return (Dali::Toolkit::Control *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Control * SWIGSTDCALL CSharp_Dali_ScrollBar_SWIGUpcast(Dali::Toolkit::ScrollBar *jarg1) {
    return (Dali::Toolkit::Control *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Control * SWIGSTDCALL CSharp_Dali_Scrollable_SWIGUpcast(Dali::Toolkit::Scrollable *jarg1) {
    return (Dali::Toolkit::Control *)jarg1;
}

SWIGEXPORT Dali::RefObject * SWIGSTDCALL CSharp_Dali_ItemLayout_SWIGUpcast(Dali::Toolkit::ItemLayout *jarg1) {
    return (Dali::RefObject *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Scrollable * SWIGSTDCALL CSharp_Dali_ItemView_SWIGUpcast(Dali::Toolkit::ItemView *jarg1) {
    return (Dali::Toolkit::Scrollable *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_ScrollViewEffect_SWIGUpcast(Dali::Toolkit::ScrollViewEffect *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::Toolkit::ScrollViewEffect * SWIGSTDCALL CSharp_Dali_ScrollViewPagePathEffect_SWIGUpcast(Dali::Toolkit::ScrollViewPagePathEffect *jarg1) {
    return (Dali::Toolkit::ScrollViewEffect *)jarg1;
}

SWIGEXPORT Dali::RefObject * SWIGSTDCALL CSharp_Dali_Ruler_SWIGUpcast(Dali::Toolkit::Ruler *jarg1) {
    return (Dali::RefObject *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Ruler * SWIGSTDCALL CSharp_Dali_DefaultRuler_SWIGUpcast(Dali::Toolkit::DefaultRuler *jarg1) {
    return (Dali::Toolkit::Ruler *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Ruler * SWIGSTDCALL CSharp_Dali_FixedRuler_SWIGUpcast(Dali::Toolkit::FixedRuler *jarg1) {
    return (Dali::Toolkit::Ruler *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Scrollable * SWIGSTDCALL CSharp_Dali_ScrollView_SWIGUpcast(Dali::Toolkit::ScrollView *jarg1) {
    return (Dali::Toolkit::Scrollable *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Control * SWIGSTDCALL CSharp_Dali_TableView_SWIGUpcast(Dali::Toolkit::TableView *jarg1) {
    return (Dali::Toolkit::Control *)jarg1;
}


SWIGEXPORT Dali::Toolkit::Control * SWIGSTDCALL CSharp_Dali_TextLabel_SWIGUpcast(Dali::Toolkit::TextLabel *jarg1) {
    return (Dali::Toolkit::Control *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_AccessibilityManager_SWIGUpcast(Dali::Toolkit::AccessibilityManager *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_StyleManager_SWIGUpcast(Dali::Toolkit::StyleManager *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Control * SWIGSTDCALL CSharp_Dali_Slider_SWIGUpcast(Dali::Toolkit::Slider *jarg1) {
    return (Dali::Toolkit::Control *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Control * SWIGSTDCALL CSharp_Dali_VideoView_SWIGUpcast(Dali::Toolkit::VideoView *jarg1) {
    return (Dali::Toolkit::Control *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Control * SWIGSTDCALL CSharp_Dali_CameraView_SWIGUpcast(Dali::Toolkit::CameraView *jarg1) {
    return (Dali::Toolkit::Control *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Control * SWIGSTDCALL CSharp_Dali_Popup_SWIGUpcast(Dali::Toolkit::Popup *jarg1) {
    return (Dali::Toolkit::Control *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Control * SWIGSTDCALL CSharp_Dali_ProgressBar_SWIGUpcast(Dali::Toolkit::ProgressBar *jarg1) {
    return (Dali::Toolkit::Control *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Control * SWIGSTDCALL CSharp_Dali_GaussianBlurView_SWIGUpcast(Dali::Toolkit::GaussianBlurView *jarg1) {
    return (Dali::Toolkit::Control *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Control * SWIGSTDCALL CSharp_Dali_PageTurnView_SWIGUpcast(Dali::Toolkit::PageTurnView *jarg1) {
    return (Dali::Toolkit::Control *)jarg1;
}

SWIGEXPORT Dali::Toolkit::PageTurnView * SWIGSTDCALL CSharp_Dali_PageTurnLandscapeView_SWIGUpcast(Dali::Toolkit::PageTurnLandscapeView *jarg1) {
    return (Dali::Toolkit::PageTurnView *)jarg1;
}

SWIGEXPORT Dali::Toolkit::PageTurnView * SWIGSTDCALL CSharp_Dali_PageTurnPortraitView_SWIGUpcast(Dali::Toolkit::PageTurnPortraitView *jarg1) {
    return (Dali::Toolkit::PageTurnView *)jarg1;
}

SWIGEXPORT Dali::Toolkit::Button * SWIGSTDCALL CSharp_Dali_ToggleButton_SWIGUpcast(Dali::Toolkit::ToggleButton *jarg1) {
    return (Dali::Toolkit::Button *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_VisualBase_SWIGUpcast(Dali::Toolkit::Visual::Base *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_VisualFactory_SWIGUpcast(Dali::Toolkit::VisualFactory *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_AsyncImageLoader_SWIGUpcast(Dali::Toolkit::AsyncImageLoader *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

/*
 * Widget binding
 */
SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_Widget_SWIGUpcast(Dali::Widget *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT Dali::BaseObject * SWIGSTDCALL CSharp_Dali_WidgetImpl_SWIGUpcast(Dali::Internal::Adaptor::Widget *jarg1) {
    return (Dali::BaseObject *)jarg1;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Widget_New__SWIG_0() {
  void * jresult ;
  Dali::Widget result;

  {
    try {
      result = Dali::Widget::New();
    } CALL_CATCH_EXCEPTION(0);
  }

  jresult = new Dali::Widget((const Dali::Widget &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Widget_New__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Internal::Adaptor::Widget *arg1 = 0 ;
  Dali::Widget result;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;

  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Internal::Adaptor::Widget & type is null", 0);
    return 0;
  }
  {
    try {
      jresult = new Dali::Widget(arg1);
    } CALL_CATCH_EXCEPTION(0);
  }
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_Widget() {
  void * jresult ;
  Dali::Widget *result = 0 ;

  {
    try {
      result = (Dali::Widget *)new Dali::Widget();
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Widget_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Widget *arg1 = (Dali::Widget *) 0 ;
  Dali::Widget *arg2 = 0 ;
  Dali::Widget *result = 0 ;

  arg1 = (Dali::Widget *)jarg1;
  arg2 = (Dali::Widget *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Widget const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Widget *) &(arg1)->operator =((Dali::Widget const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = (void *)result;
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_Widget(void * jarg1) {
  Dali::Widget *arg1 = (Dali::Widget *) 0 ;

  arg1 = (Dali::Widget *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_WidgetImpl_New() {
  void * jresult ;
  SwigDirector_WidgetImpl* result;
  {
    try {
      result = new SwigDirector_WidgetImpl();
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = result;
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_OnCreate(void * jarg1, char * jarg2, void * jarg3) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Window arg3 ;
  Dali::Window *argp3 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  argp3 = (Dali::Window *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Window", 0);
    return ;
  }
  arg3 = *argp3;
  {
    try {
      (arg1)->OnCreate((std::string const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_OnCreateSwigExplicitWidgetImpl(void * jarg1, char * jarg2, void * jarg3) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Window arg3 ;
  Dali::Window *argp3 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  argp3 = (Dali::Window *)jarg3;
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Window", 0);
    return ;
  }
  arg3 = *argp3;
  {
    try {
      (arg1)->Dali::Internal::Adaptor::Widget::OnCreate((std::string const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_OnTerminate(void * jarg1, char * jarg2, int jarg3) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Widget::Termination arg3 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Widget::Termination)jarg3;
  {
    try {
      (arg1)->OnTerminate((std::string const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_OnTerminateSwigExplicitWidgetImpl(void * jarg1, char * jarg2, int jarg3) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;
  std::string *arg2 = 0 ;
  Dali::Widget::Termination arg3 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (Dali::Widget::Termination)jarg3;
  {
    try {
      (arg1)->Dali::Internal::Adaptor::Widget::OnTerminate((std::string const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_OnPause(void * jarg1) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  {
    try {
      (arg1)->OnPause();
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_OnPauseSwigExplicitWidgetImpl(void * jarg1) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  {
    try {
      (arg1)->Dali::Internal::Adaptor::Widget::OnPause();
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_OnResume(void * jarg1) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  {
    try {
      (arg1)->OnResume();
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_OnResumeSwigExplicitWidgetImpl(void * jarg1) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  {
    try {
      (arg1)->Dali::Internal::Adaptor::Widget::OnResume();
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_OnResize(void * jarg1, void * jarg2) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;
  Dali::Window arg2 ;
  Dali::Window *argp2 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  argp2 = (Dali::Window *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Window", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->OnResize(arg2);
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_OnResizeSwigExplicitWidgetImpl(void * jarg1, void * jarg2) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;
  Dali::Window arg2 ;
  Dali::Window *argp2 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  argp2 = (Dali::Window *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Window", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->Dali::Internal::Adaptor::Widget::OnResize(arg2);
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_OnUpdate(void * jarg1, char * jarg2, int jarg3) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (int)jarg3;
  {
    try {
      (arg1)->OnUpdate((std::string const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_OnUpdateSwigExplicitWidgetImpl(void * jarg1, char * jarg2, int jarg3) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  arg3 = (int)jarg3;
  {
    try {
      (arg1)->Dali::Internal::Adaptor::Widget::OnUpdate((std::string const &)*arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_SignalConnected(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;
  Dali::SlotObserver *arg2 = (Dali::SlotObserver *) 0 ;
  Dali::CallbackBase *arg3 = (Dali::CallbackBase *) 0 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  arg2 = (Dali::SlotObserver *)jarg2;
  arg3 = (Dali::CallbackBase *)jarg3;
  {
    try {
      (arg1)->SignalConnected(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_SignalConnectedSwigExplicitWidgetImpl(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;
  Dali::SlotObserver *arg2 = (Dali::SlotObserver *) 0 ;
  Dali::CallbackBase *arg3 = (Dali::CallbackBase *) 0 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  arg2 = (Dali::SlotObserver *)jarg2;
  arg3 = (Dali::CallbackBase *)jarg3;
  {
    try {
      (arg1)->Dali::Internal::Adaptor::Widget::SignalConnected(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_SignalDisconnected(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;
  Dali::SlotObserver *arg2 = (Dali::SlotObserver *) 0 ;
  Dali::CallbackBase *arg3 = (Dali::CallbackBase *) 0 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  arg2 = (Dali::SlotObserver *)jarg2;
  arg3 = (Dali::CallbackBase *)jarg3;
  {
    try {
      (arg1)->SignalDisconnected(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_SignalDisconnectedSwigExplicitWidgetImpl(void * jarg1, void * jarg2, void * jarg3) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;
  Dali::SlotObserver *arg2 = (Dali::SlotObserver *) 0 ;
  Dali::CallbackBase *arg3 = (Dali::CallbackBase *) 0 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  arg2 = (Dali::SlotObserver *)jarg2;
  arg3 = (Dali::CallbackBase *)jarg3;
  {
    try {
      (arg1)->Dali::Internal::Adaptor::Widget::SignalDisconnected(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_SetContentInfo(void * jarg1, char * jarg2) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str;
  {
    try {
      (arg1)->SetContentInfo((std::string const &)*arg2);
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_SetImpl(void * jarg1, void * jarg2) {
  Dali::Internal::Adaptor::Widget *arg1 = (Dali::Internal::Adaptor::Widget *) 0 ;
  Dali::Internal::Adaptor::Widget::Impl *arg2 = (Dali::Internal::Adaptor::Widget::Impl *) 0 ;

  arg1 = (Dali::Internal::Adaptor::Widget *)jarg1;
  arg2 = (Dali::Internal::Adaptor::Widget::Impl *)jarg2;
  {
    try {
      (arg1)->SetImpl(arg2);
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetImpl_director_connect(void *objarg, SwigDirector_WidgetImpl::SWIG_Callback0_t callback0, SwigDirector_WidgetImpl::SWIG_Callback1_t callback1, SwigDirector_WidgetImpl::SWIG_Callback2_t callback2, SwigDirector_WidgetImpl::SWIG_Callback3_t callback3, SwigDirector_WidgetImpl::SWIG_Callback4_t callback4, SwigDirector_WidgetImpl::SWIG_Callback5_t callback5, SwigDirector_WidgetImpl::SWIG_Callback6_t callback6, SwigDirector_WidgetImpl::SWIG_Callback7_t callback7) {
  SwigDirector_WidgetImpl *director = static_cast<SwigDirector_WidgetImpl *>(objarg);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7);
  }
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_Widget_GetImplementation__SWIG_0(void * jarg1) {
  void * jresult ;
  Dali::Widget *arg1 = 0 ;
  SwigDirector_WidgetImpl *result = 0 ;

  arg1 = (Dali::Widget *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Widget & type is null", 0);
    return 0;
  }
  {
    try {
      result = (SwigDirector_WidgetImpl *) &Dali::Internal::Adaptor::GetImplementation(*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = (void*) result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_WidgetApplication_New(int jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  int *arg1 = (int *) 0 ;
  char ***arg2 ;
  std::string *arg3 = 0 ;
  Dali::WidgetApplication result;
  {
    int index = 0;
    int length = 0;
    char *retPtr;
    char *nextPtr;
    argWidgetC = jarg1;
    argWidgetV = new char*[jarg1 + 1];

    retPtr = strtok_r( jarg2, " ", &nextPtr);
    if( retPtr )
    {
      length = strlen(retPtr);
    }
    argWidgetV[index] = new char[length + 1];
    if( retPtr )
    {
      strncpy(argWidgetV[index], retPtr, length);
    }
    argWidgetV[index][length] = '\0';
    index++;

    while (index < jarg1)
    {
      length = 0;
      retPtr = strtok_r(NULL, " ", &nextPtr);
      if( retPtr )
      {
        length = strlen(retPtr);
      }
      argWidgetV[index] = new char[length + 1];
      if( retPtr )
      {
        strncpy(argWidgetV[index], retPtr, length);
      }
      argWidgetV[index][length] = '\0';
      index++;
    }

    argWidgetV[jarg1] = NULL;
    argWidgetC = jarg1;

    arg1 = &argWidgetC;
    arg2 = &argWidgetV;
  }

  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str;
  {
    try {
      result = Dali::WidgetApplication::New(arg1,arg2,(std::string const &)*arg3);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::WidgetApplication((const Dali::WidgetApplication &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_WidgetApplication__SWIG_0() {
  void * jresult ;
  Dali::WidgetApplication *result = 0 ;

  {
    try {
      result = (Dali::WidgetApplication *)new Dali::WidgetApplication();
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_WidgetApplication__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::WidgetApplication *arg1 = 0 ;
  Dali::WidgetApplication *result = 0 ;

  arg1 = (Dali::WidgetApplication *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::WidgetApplication const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::WidgetApplication *)new Dali::WidgetApplication((Dali::WidgetApplication const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_WidgetApplication_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::WidgetApplication *arg1 = (Dali::WidgetApplication *) 0 ;
  Dali::WidgetApplication *arg2 = 0 ;
  Dali::WidgetApplication *result = 0 ;

  arg1 = (Dali::WidgetApplication *)jarg1;
  arg2 = (Dali::WidgetApplication *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::WidgetApplication const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::WidgetApplication *) &(arg1)->operator =((Dali::WidgetApplication const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_WidgetApplication(void * jarg1) {
  Dali::WidgetApplication *arg1 = (Dali::WidgetApplication *) 0 ;

  arg1 = (Dali::WidgetApplication *)jarg1;
  {
    try {
      delete arg1;
      if( argWidgetV )
      {
        // free string data
        for( int i=0; i < argWidgetC+1; i++)
        {
          delete [] argWidgetV[i];
        }
        delete [] argWidgetV;
      }
    } CALL_CATCH_EXCEPTION();
  }
}


typedef Dali::Widget*(SWIGSTDCALL *CSharpCreateWidgetFunction)(const std::string&);
CSharpCreateWidgetFunction _CSharpCreateWidgetFunction = NULL;

static Dali::Widget SWIGSTDCALL WidgetFactoryFunction( const std::string& widgetName )
{
  Widget* widget = _CSharpCreateWidgetFunction( widgetName.c_str() );
  return *widget;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_WidgetApplication_RegisterWidgetCreatingFunction(void * jarg1, char** jarg2, void * jarg3) {
  Dali::WidgetApplication *arg1 = (Dali::WidgetApplication *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (Dali::WidgetApplication *)jarg1;
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(*jarg2);
  arg2 = &arg2_str;

  if(!_CSharpCreateWidgetFunction)
  {
    _CSharpCreateWidgetFunction = (Dali::Widget*(*)(const std::string&))jarg3;
  }

  {
    try {
      (arg1)->RegisterWidgetCreatingFunction((std::string const &)*arg2, WidgetFactoryFunction);
    } CALL_CATCH_EXCEPTION();
  }
  *jarg2 = SWIG_csharp_string_callback(arg2->c_str());
}


//for PixelBuffer and ImageLoading

SWIGEXPORT Dali::BaseHandle * SWIGSTDCALL CSharp_Dali_PixelBuffer_SWIGUpcast(Dali::Devel::PixelBuffer *jarg1) {
    return (Dali::BaseHandle *)jarg1;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PixelBuffer_New(unsigned int jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Dali::Pixel::Format arg3 ;
  Dali::Devel::PixelBuffer result;

  arg1 = (unsigned int)jarg1;
  arg2 = (unsigned int)jarg2;
  arg3 = (Dali::Pixel::Format)jarg3;
  {
    try {
      result = Dali::Devel::PixelBuffer::New(arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::Devel::PixelBuffer((const Dali::Devel::PixelBuffer &)result);
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PixelBuffer__SWIG_0() {
  void * jresult ;
  Dali::Devel::PixelBuffer *result = 0 ;

  {
    try {
      result = (Dali::Devel::PixelBuffer *)new Dali::Devel::PixelBuffer();
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_PixelBuffer(void * jarg1) {
  Dali::Devel::PixelBuffer *arg1 = (Dali::Devel::PixelBuffer *) 0 ;

  arg1 = (Dali::Devel::PixelBuffer *)jarg1;
  {
    try {
      delete arg1;
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_new_PixelBuffer__SWIG_1(void * jarg1) {
  void * jresult ;
  Dali::Devel::PixelBuffer *arg1 = 0 ;
  Dali::Devel::PixelBuffer *result = 0 ;

  arg1 = (Dali::Devel::PixelBuffer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Devel::PixelBuffer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Devel::PixelBuffer *)new Dali::Devel::PixelBuffer((Dali::Devel::PixelBuffer const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PixelBuffer_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Devel::PixelBuffer *arg1 = (Dali::Devel::PixelBuffer *) 0 ;
  Dali::Devel::PixelBuffer *arg2 = 0 ;
  Dali::Devel::PixelBuffer *result = 0 ;

  arg1 = (Dali::Devel::PixelBuffer *)jarg1;
  arg2 = (Dali::Devel::PixelBuffer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Devel::PixelBuffer const & type is null", 0);
    return 0;
  }
  {
    try {
      result = (Dali::Devel::PixelBuffer *) &(arg1)->operator =((Dali::Devel::PixelBuffer const &)*arg2);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PixelBuffer_Convert(void * jarg1) {
  void * jresult ;
  Dali::Devel::PixelBuffer *arg1 = 0 ;
  Dali::PixelData result;

  arg1 = (Dali::Devel::PixelBuffer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dali::Devel::PixelBuffer & type is null", 0);
    return 0;
  }
  {
    try {
      result = Dali::Devel::PixelBuffer::Convert(*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::PixelData((const Dali::PixelData &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PixelBuffer_CreatePixelData(void * jarg1) {
  void * jresult ;
  Dali::Devel::PixelBuffer *arg1 = (Dali::Devel::PixelBuffer *) 0 ;
  Dali::PixelData result;

  arg1 = (Dali::Devel::PixelBuffer *)jarg1;
  {
    try {
      result = ((Dali::Devel::PixelBuffer const *)arg1)->CreatePixelData();
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::PixelData((const Dali::PixelData &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_PixelBuffer_GetBuffer(void * jarg1) {
  void * jresult ;
  Dali::Devel::PixelBuffer *arg1 = (Dali::Devel::PixelBuffer *) 0 ;
  unsigned char *result = 0 ;

  arg1 = (Dali::Devel::PixelBuffer *)jarg1;
  {
    try {
      result = (unsigned char *)(arg1)->GetBuffer();
    } CALL_CATCH_EXCEPTION(0);
  }
   jresult = (void *)result;
   return jresult;
}

SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_PixelBuffer_GetWidth(void * jarg1) {
  unsigned int jresult ;
  Dali::Devel::PixelBuffer *arg1 = (Dali::Devel::PixelBuffer *) 0 ;
  unsigned int result;

  arg1 = (Dali::Devel::PixelBuffer *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::Devel::PixelBuffer const *)arg1)->GetWidth();
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Dali_PixelBuffer_GetHeight(void * jarg1) {
  unsigned int jresult ;
  Dali::Devel::PixelBuffer *arg1 = (Dali::Devel::PixelBuffer *) 0 ;
  unsigned int result;

  arg1 = (Dali::Devel::PixelBuffer *)jarg1;
  {
    try {
      result = (unsigned int)((Dali::Devel::PixelBuffer const *)arg1)->GetHeight();
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Dali_PixelBuffer_GetPixelFormat(void * jarg1) {
  int jresult ;
  Dali::Devel::PixelBuffer *arg1 = (Dali::Devel::PixelBuffer *) 0 ;
  Dali::Pixel::Format result;

  arg1 = (Dali::Devel::PixelBuffer *)jarg1;
  {
    try {
      result = (Dali::Pixel::Format)((Dali::Devel::PixelBuffer const *)arg1)->GetPixelFormat();
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PixelBuffer_ApplyMask__SWIG_0(void * jarg1, void * jarg2, float jarg3, bool jarg4) {
  Dali::Devel::PixelBuffer *arg1 = (Dali::Devel::PixelBuffer *) 0 ;
  Dali::Devel::PixelBuffer arg2 ;
  float arg3 ;
  bool arg4 ;
  Dali::Devel::PixelBuffer *argp2 ;

  arg1 = (Dali::Devel::PixelBuffer *)jarg1;
  argp2 = (Dali::Devel::PixelBuffer *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Devel::PixelBuffer", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (float)jarg3;
  arg4 = jarg4 ? true : false;
  {
    try {
      (arg1)->ApplyMask(arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PixelBuffer_ApplyMask__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  Dali::Devel::PixelBuffer *arg1 = (Dali::Devel::PixelBuffer *) 0 ;
  Dali::Devel::PixelBuffer arg2 ;
  float arg3 ;
  Dali::Devel::PixelBuffer *argp2 ;

  arg1 = (Dali::Devel::PixelBuffer *)jarg1;
  argp2 = (Dali::Devel::PixelBuffer *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Devel::PixelBuffer", 0);
    return ;
  }
  arg2 = *argp2;
  arg3 = (float)jarg3;
  {
    try {
      (arg1)->ApplyMask(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PixelBuffer_ApplyMask__SWIG_2(void * jarg1, void * jarg2) {
  Dali::Devel::PixelBuffer *arg1 = (Dali::Devel::PixelBuffer *) 0 ;
  Dali::Devel::PixelBuffer arg2 ;
  Dali::Devel::PixelBuffer *argp2 ;

  arg1 = (Dali::Devel::PixelBuffer *)jarg1;
  argp2 = (Dali::Devel::PixelBuffer *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::Devel::PixelBuffer", 0);
    return ;
  }
  arg2 = *argp2;
  {
    try {
      (arg1)->ApplyMask(arg2);
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PixelBuffer_ApplyGaussianBlur(void * jarg1, float jarg2) {
  Dali::Devel::PixelBuffer *arg1 = (Dali::Devel::PixelBuffer *) 0 ;
  float arg2 ;

  arg1 = (Dali::Devel::PixelBuffer *)jarg1;
  arg2 = (float)jarg2;
  {
    try {
      (arg1)->ApplyGaussianBlur(arg2);
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PixelBuffer_Crop(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned short jarg4, unsigned short jarg5) {
  Dali::Devel::PixelBuffer *arg1 = (Dali::Devel::PixelBuffer *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  uint16_t arg5 ;

  arg1 = (Dali::Devel::PixelBuffer *)jarg1;
  arg2 = (uint16_t)jarg2;
  arg3 = (uint16_t)jarg3;
  arg4 = (uint16_t)jarg4;
  arg5 = (uint16_t)jarg5;
  {
    try {
      (arg1)->Crop(arg2,arg3,arg4,arg5);
    } CALL_CATCH_EXCEPTION();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dali_PixelBuffer_Resize(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  Dali::Devel::PixelBuffer *arg1 = (Dali::Devel::PixelBuffer *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;

  arg1 = (Dali::Devel::PixelBuffer *)jarg1;
  arg2 = (uint16_t)jarg2;
  arg3 = (uint16_t)jarg3;
  {
    try {
      (arg1)->Resize(arg2,arg3);
    } CALL_CATCH_EXCEPTION();
  }
}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_PixelBuffer_Rotate(void * jarg1, void* jarg2) {
  Dali::Devel::PixelBuffer *arg1 = (Dali::Devel::PixelBuffer *) 0 ;
  Dali::Degree * arg2 ;

  bool result = false;

  arg1 = (Dali::Devel::PixelBuffer *)jarg1;
  arg2 = (Dali::Degree *)jarg2;
  {
    try {
      result = (arg1)->Rotate(*arg2);
    } CALL_CATCH_EXCEPTION(false);
  }
  return result;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LoadImageFromFile__SWIG_0(char * jarg1, void * jarg2, int jarg3, int jarg4, bool jarg5) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::ImageDimensions arg2 ;
  Dali::FittingMode::Type arg3 ;
  Dali::SamplingMode::Type arg4 ;
  bool arg5 ;
  Dali::ImageDimensions *argp2 ;
  Dali::Devel::PixelBuffer result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::FittingMode::Type)jarg3;
  arg4 = (Dali::SamplingMode::Type)jarg4;
  arg5 = jarg5 ? true : false;
  {
    try {
      result = Dali::LoadImageFromFile((std::string const &)*arg1,arg2,arg3,arg4,arg5);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::Devel::PixelBuffer((const Dali::Devel::PixelBuffer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LoadImageFromFile__SWIG_1(char * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::ImageDimensions arg2 ;
  Dali::FittingMode::Type arg3 ;
  Dali::SamplingMode::Type arg4 ;
  Dali::ImageDimensions *argp2 ;
  Dali::Devel::PixelBuffer result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::FittingMode::Type)jarg3;
  arg4 = (Dali::SamplingMode::Type)jarg4;
  {
    try {
      result = Dali::LoadImageFromFile((std::string const &)*arg1,arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::Devel::PixelBuffer((const Dali::Devel::PixelBuffer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LoadImageFromFile__SWIG_2(char * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::ImageDimensions arg2 ;
  Dali::FittingMode::Type arg3 ;
  Dali::ImageDimensions *argp2 ;
  Dali::Devel::PixelBuffer result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::FittingMode::Type)jarg3;
  {
    try {
      result = Dali::LoadImageFromFile((std::string const &)*arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::Devel::PixelBuffer((const Dali::Devel::PixelBuffer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LoadImageFromFile__SWIG_3(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::ImageDimensions arg2 ;
  Dali::ImageDimensions *argp2 ;
  Dali::Devel::PixelBuffer result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = Dali::LoadImageFromFile((std::string const &)*arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::Devel::PixelBuffer((const Dali::Devel::PixelBuffer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LoadImageFromFile__SWIG_4(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::Devel::PixelBuffer result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  {
    try {
      result = Dali::LoadImageFromFile((std::string const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::Devel::PixelBuffer((const Dali::Devel::PixelBuffer &)result);
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LoadImageFromBuffer__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, bool jarg5) {
  void * jresult ;
  Dali::Vector<uint8_t> *arg1 = (Dali::Vector<uint8_t> *) 0;
  Dali::ImageDimensions arg2 ;
  Dali::FittingMode::Type arg3 ;
  Dali::SamplingMode::Type arg4 ;
  bool arg5 ;
  Dali::ImageDimensions *argp2 ;
  Dali::Devel::PixelBuffer result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null buffer", 0);
    return 0;
  }
  arg1 = (Dali::Vector<uint8_t> *)jarg1;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::FittingMode::Type)jarg3;
  arg4 = (Dali::SamplingMode::Type)jarg4;
  arg5 = jarg5 ? true : false;
  {
    try {
      result = Dali::LoadImageFromBuffer((const Dali::Vector<uint8_t>&)*arg1, arg2, arg3, arg4, arg5);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::Devel::PixelBuffer((const Dali::Devel::PixelBuffer &)result);
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LoadImageFromBuffer__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  Dali::Vector<uint8_t> *arg1 = (Dali::Vector<uint8_t> *) 0;
  Dali::ImageDimensions arg2 ;
  Dali::FittingMode::Type arg3 ;
  Dali::SamplingMode::Type arg4 ;
  Dali::ImageDimensions *argp2 ;
  Dali::Devel::PixelBuffer result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null buffer", 0);
    return 0;
  }
  arg1 = (Dali::Vector<uint8_t> *)jarg1;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::FittingMode::Type)jarg3;
  arg4 = (Dali::SamplingMode::Type)jarg4;
  {
    try {
      result = Dali::LoadImageFromBuffer((const Dali::Vector<uint8_t>&)*arg1, arg2, arg3, arg4);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::Devel::PixelBuffer((const Dali::Devel::PixelBuffer &)result);
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LoadImageFromBuffer__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Dali::Vector<uint8_t> *arg1 = (Dali::Vector<uint8_t> *) 0;
  Dali::ImageDimensions arg2 ;
  Dali::FittingMode::Type arg3 ;
  Dali::ImageDimensions *argp2 ;
  Dali::Devel::PixelBuffer result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null buffer", 0);
    return 0;
  }
  arg1 = (Dali::Vector<uint8_t> *)jarg1;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::FittingMode::Type)jarg3;
  {
    try {
      result = Dali::LoadImageFromBuffer((const Dali::Vector<uint8_t>&)*arg1, arg2, arg3);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::Devel::PixelBuffer((const Dali::Devel::PixelBuffer &)result);
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LoadImageFromBuffer__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  Dali::Vector<uint8_t> *arg1 = (Dali::Vector<uint8_t> *) 0;
  Dali::ImageDimensions arg2 ;
  Dali::ImageDimensions *argp2 ;
  Dali::Devel::PixelBuffer result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null buffer", 0);
    return 0;
  }
  arg1 = (Dali::Vector<uint8_t> *)jarg1;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = Dali::LoadImageFromBuffer((const Dali::Vector<uint8_t>&)*arg1, arg2);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::Devel::PixelBuffer((const Dali::Devel::PixelBuffer &)result);
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_LoadImageFromBuffer__SWIG_4(void * jarg1) {
  void * jresult ;
  Dali::Vector<uint8_t> *arg1 = (Dali::Vector<uint8_t> *) 0;
  Dali::Devel::PixelBuffer result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null buffer", 0);
    return 0;
  }
  arg1 = (Dali::Vector<uint8_t> *)jarg1;
  {
    try {
      result = Dali::LoadImageFromBuffer((const Dali::Vector<uint8_t>&)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::Devel::PixelBuffer((const Dali::Devel::PixelBuffer &)result);
  return jresult;
}



SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GetClosestImageSize__SWIG_0(char * jarg1, void * jarg2, int jarg3, int jarg4, bool jarg5) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::ImageDimensions arg2 ;
  Dali::FittingMode::Type arg3 ;
  Dali::SamplingMode::Type arg4 ;
  bool arg5 ;
  Dali::ImageDimensions *argp2 ;
  Dali::ImageDimensions result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::FittingMode::Type)jarg3;
  arg4 = (Dali::SamplingMode::Type)jarg4;
  arg5 = jarg5 ? true : false;
  {
    try {
      result = Dali::GetClosestImageSize((std::string const &)*arg1,arg2,arg3,arg4,arg5);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::ImageDimensions((const Dali::ImageDimensions &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GetClosestImageSize__SWIG_1(char * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::ImageDimensions arg2 ;
  Dali::FittingMode::Type arg3 ;
  Dali::SamplingMode::Type arg4 ;
  Dali::ImageDimensions *argp2 ;
  Dali::ImageDimensions result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::FittingMode::Type)jarg3;
  arg4 = (Dali::SamplingMode::Type)jarg4;
  {
    try {
      result = Dali::GetClosestImageSize((std::string const &)*arg1,arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::ImageDimensions((const Dali::ImageDimensions &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GetClosestImageSize__SWIG_2(char * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::ImageDimensions arg2 ;
  Dali::FittingMode::Type arg3 ;
  Dali::ImageDimensions *argp2 ;
  Dali::ImageDimensions result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::FittingMode::Type)jarg3;
  {
    try {
      result = Dali::GetClosestImageSize((std::string const &)*arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::ImageDimensions((const Dali::ImageDimensions &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GetClosestImageSize__SWIG_3(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::ImageDimensions arg2 ;
  Dali::ImageDimensions *argp2 ;
  Dali::ImageDimensions result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = Dali::GetClosestImageSize((std::string const &)*arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::ImageDimensions((const Dali::ImageDimensions &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GetClosestImageSize__SWIG_4(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::ImageDimensions result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  {
    try {
      result = Dali::GetClosestImageSize((std::string const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::ImageDimensions((const Dali::ImageDimensions &)result);
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_GetOriginalImageSize(char * jarg1, bool jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  Dali::ImageDimensions result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  arg2 = jarg2 ? true : false;
  {
    try {
      result = Dali::GetOriginalImageSize((std::string const &)*arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::ImageDimensions((const Dali::ImageDimensions &)result);
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DownloadImageSynchronously__SWIG_0(char * jarg1, void * jarg2, int jarg3, int jarg4, bool jarg5) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::ImageDimensions arg2 ;
  Dali::FittingMode::Type arg3 ;
  Dali::SamplingMode::Type arg4 ;
  bool arg5 ;
  Dali::ImageDimensions *argp2 ;
  Dali::Devel::PixelBuffer result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::FittingMode::Type)jarg3;
  arg4 = (Dali::SamplingMode::Type)jarg4;
  arg5 = jarg5 ? true : false;
  {
    try {
      result = Dali::DownloadImageSynchronously((std::string const &)*arg1,arg2,arg3,arg4,arg5);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::Devel::PixelBuffer((const Dali::Devel::PixelBuffer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DownloadImageSynchronously__SWIG_1(char * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::ImageDimensions arg2 ;
  Dali::FittingMode::Type arg3 ;
  Dali::SamplingMode::Type arg4 ;
  Dali::ImageDimensions *argp2 ;
  Dali::Devel::PixelBuffer result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::FittingMode::Type)jarg3;
  arg4 = (Dali::SamplingMode::Type)jarg4;
  {
    try {
      result = Dali::DownloadImageSynchronously((std::string const &)*arg1,arg2,arg3,arg4);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::Devel::PixelBuffer((const Dali::Devel::PixelBuffer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DownloadImageSynchronously__SWIG_2(char * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::ImageDimensions arg2 ;
  Dali::FittingMode::Type arg3 ;
  Dali::ImageDimensions *argp2 ;
  Dali::Devel::PixelBuffer result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  arg3 = (Dali::FittingMode::Type)jarg3;
  {
    try {
      result = Dali::DownloadImageSynchronously((std::string const &)*arg1,arg2,arg3);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::Devel::PixelBuffer((const Dali::Devel::PixelBuffer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DownloadImageSynchronously__SWIG_3(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::ImageDimensions arg2 ;
  Dali::ImageDimensions *argp2 ;
  Dali::Devel::PixelBuffer result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  argp2 = (Dali::ImageDimensions *)jarg2;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Dali::ImageDimensions", 0);
    return 0;
  }
  arg2 = *argp2;
  {
    try {
      result = Dali::DownloadImageSynchronously((std::string const &)*arg1,arg2);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::Devel::PixelBuffer((const Dali::Devel::PixelBuffer &)result);
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dali_DownloadImageSynchronously__SWIG_4(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Dali::Devel::PixelBuffer result;

  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str;
  {
    try {
      result = Dali::DownloadImageSynchronously((std::string const &)*arg1);
    } CALL_CATCH_EXCEPTION(0);
  }
  jresult = new Dali::Devel::PixelBuffer((const Dali::Devel::PixelBuffer &)result);
  return jresult;
}

SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_GetEnvironmentVariable(char * jarg1) {
  const char * result = EnvironmentVariable::GetEnvironmentVariable(jarg1);
  char * jresult = SWIG_csharp_string_callback((const char *)result);
  return jresult;
}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_SetEnvironmentVariable(char * jarg1, char * jarg2) {
  bool result = EnvironmentVariable::SetEnvironmentVariable(jarg1, jarg2);
  return result;
}

struct NativeImageSourcePtrHandle
{
  NativeImageSourcePtr Ptr;
};

SWIGEXPORT NativeImageInterface* SWIGSTDCALL CSharp_Dali_NativeImageSource_Upcast(void* jarg1)
{
  NativeImageSource* arg1 = (NativeImageSource*)jarg1;
  return (NativeImageInterface*)(arg1);
}

SWIGEXPORT void* SWIGSTDCALL CSharp_Dali_NativeImageSource_New_Handle(unsigned int jarg1, unsigned int jarg2, int jarg3)
{
  void* jresult;
  NativeImageSourcePtrHandle* handle = new NativeImageSourcePtrHandle();
  {
    try {
      handle->Ptr = ( NativeImageSource::New(jarg1, jarg2, (NativeImageSource::ColorDepth)jarg3) );
    }
    catch (std::out_of_range & e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    }
    catch (std::exception & e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    }
    catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    }
    catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }
  jresult = (void *)handle;
  return jresult;
}

SWIGEXPORT void* SWIGSTDCALL CSharp_Dali_NativeImageSource_New(void* jarg1)
{
  void* jresult;
  NativeImageSourcePtrHandle* handle = (NativeImageSourcePtrHandle*)jarg1;
  jresult = (void*)( handle->Ptr.Get() );
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_NativeImageSource_Delete(void* jarg1) {
  NativeImageSourcePtrHandle* arg1 = (NativeImageSourcePtrHandle*)jarg1;
  {
    try {
      delete arg1;
    }
    catch (std::out_of_range & e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return;
      };
    }
    catch (std::exception & e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return;
      };
    }
    catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return;
      };
    }
    catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return;
      };
    }
  }
}

SWIGEXPORT void* SWIGSTDCALL CSharp_Dali_NativeImageSource_AcquireBuffer(void* jarg1, int* jarg2, int* jarg3, int* jarg4)
{
  void* jresult;
  NativeImageSource* arg1 = (NativeImageSource*)jarg1;
  uint16_t* arg2 = (uint16_t*)(jarg2);
  uint16_t* arg3 = (uint16_t*)(jarg3);
  uint16_t* arg4 = (uint16_t*)(jarg4);
  {
    try {
      jresult = (void *)Dali::DevelNativeImageSource::AcquireBuffer( *arg1, *arg2, *arg3, *arg4 );
    }
    catch (std::out_of_range & e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    }
    catch (std::exception & e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    }
    catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    }
    catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }
  return jresult;
}

SWIGEXPORT bool SWIGSTDCALL CSharp_Dali_NativeImageSource_ReleaseBuffer(void* jarg1)
{
  bool jresult;
  NativeImageSource* arg1 = (NativeImageSource*)jarg1;

  {
    try {
      jresult = Dali::DevelNativeImageSource::ReleaseBuffer( *arg1 );
    }
    catch (std::out_of_range & e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0;
      };
    }
    catch (std::exception & e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what())); return 0;
      };
    }
    catch (Dali::DaliException e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.condition); return 0;
      };
    }
    catch (...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, "unknown error"); return 0;
      };
    }
  }
  return jresult;
}

SWIGEXPORT void* SWIGSTDCALL CSharp_Dali_NativeImageSource_GenerateUrl(void* handle)
{
  Dali::Toolkit::ImageUrl result;
  NativeImageSource* nativeImageSource = (NativeImageSource*)handle;
  void *jresult;

  if (!nativeImageSource)
  {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "some argument is null", 0);
    return 0;
  }
  {
    try
    {
      result = Dali::Toolkit::Image::GenerateUrl(nativeImageSource);
    }
    catch (std::out_of_range& e)
    {
      SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what()));
      return 0;
    }
    catch (std::exception& e)
    {
      SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what()));
      return 0;
    }
    catch (Dali::DaliException e)
    {
      SWIG_CSharpException(SWIG_UnknownError, e.condition);
      return 0;
    }
    catch (...)
    {
      SWIG_CSharpException(SWIG_UnknownError, "unknown error");
      return 0;
    }
  }

  jresult = new Dali::Toolkit::ImageUrl((const Dali::Toolkit::ImageUrl &)result);
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_Dali_delete_ImageUrl(void* jarg1)
{
  Dali::Toolkit::ImageUrl* imageUrl = (Dali::Toolkit::ImageUrl*) 0;

  imageUrl = (Dali::Toolkit::ImageUrl*)jarg1;
  {
    try
    {
      delete imageUrl;
    }
    catch (std::out_of_range& e)
    {
      SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what()));
      return;
    }
    catch (std::exception& e)
    {
      SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what()));
      return;
    }
    catch (Dali::DaliException e)
    {
      SWIG_CSharpException(SWIG_UnknownError, e.condition);
      return;
    }
    catch (...)
    {
      SWIG_CSharpException(SWIG_UnknownError, "unknown error");
      return;
    }
  }
}

SWIGEXPORT char * SWIGSTDCALL CSharp_Dali_ImageUrl_Get(void* jarg1)
{
  char *jresult;
  Dali::Toolkit::ImageUrl* imageUrl = (Dali::Toolkit::ImageUrl*) 0;
  std::string result;

  imageUrl = (Dali::Toolkit::ImageUrl*)jarg1;
  {
    try
    {
      result = imageUrl->GetUrl();
    }
    catch (std::out_of_range& e)
    {
      SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what()));
      return 0;
    }
    catch (std::exception& e)
    {
      SWIG_CSharpException(SWIG_RuntimeError, const_cast<char*>(e.what()));
      return 0;
    }
    catch (Dali::DaliException e)
    {
      SWIG_CSharpException(SWIG_UnknownError, e.condition);
      return 0;
    }
    catch (...)
    {
      SWIG_CSharpException(SWIG_UnknownError, "unknown error");
      return 0;
    }
  }

  jresult = SWIG_csharp_string_callback((&result)->c_str());
  return jresult;
}

SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Actor_GetSuggestedMinimumWidth(void * jarg1) {
  Dali::Actor *arg1 = (Dali::Actor *) 0;
  Dali::Vector2 maximumSize;
  Dali::Vector2 minimumSize;
  Dali::Vector3 naturalSize;
  float result;
  {
    try {
      arg1 = (Dali::Actor *)jarg1;
      maximumSize = arg1->GetProperty< Vector2 >( Actor::Property::MAXIMUM_SIZE );
      minimumSize = arg1->GetProperty< Vector2 >( Actor::Property::MINIMUM_SIZE );
      naturalSize = arg1->GetNaturalSize();

      float baseHeight = maximumSize.height > 0 ? std::min(maximumSize.height, naturalSize.height) : naturalSize.height;
      float baseWidth = arg1->GetWidthForHeight(baseHeight);

      result = minimumSize.width > 0 ? std::max(baseWidth, minimumSize.width) : baseWidth;
      result = maximumSize.width > 0 ? std::min(result, maximumSize.width) : result;
    } CALL_CATCH_EXCEPTION(0);
  }

  return result;
}

SWIGEXPORT float SWIGSTDCALL CSharp_Dali_Actor_GetSuggestedMinimumHeight(void * jarg1) {
  Dali::Actor *arg1 = (Dali::Actor *) 0;
  Dali::Vector2 maximumSize;
  Dali::Vector2 minimumSize;
  Dali::Vector3 naturalSize;
  float result;
  {
    try {
      arg1 = (Dali::Actor *)jarg1;
      maximumSize = arg1->GetProperty< Vector2 >( Actor::Property::MAXIMUM_SIZE );
      minimumSize = arg1->GetProperty< Vector2 >( Actor::Property::MINIMUM_SIZE );
      naturalSize = arg1->GetNaturalSize();

      float baseWidth = maximumSize.width > 0 ? std::min(maximumSize.width, naturalSize.width) : naturalSize.width;
      float baseHeight = arg1->GetHeightForWidth(baseWidth);

      result = minimumSize.height > 0 ? std::max(baseHeight, minimumSize.height) : baseHeight;
      result = maximumSize.height > 0 ? std::min(result, maximumSize.height) : result;
    } CALL_CATCH_EXCEPTION(0);
  }

  return result;
}

#ifdef __cplusplus
}
#endif
